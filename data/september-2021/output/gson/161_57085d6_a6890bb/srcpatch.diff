diff -ru /tmp/v1/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java /tmp/v2/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
--- /tmp/v1/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	2021-09-30 23:39:40.766316093 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	2021-09-30 18:05:19.084134178 +0200
@@ -27,12 +27,12 @@
 import java.util.List;
 import java.util.Locale;
 
+import com.google.gson.internal.JavaVersion;
 import com.google.gson.internal.PreJava9DateFormatProvider;
 import com.google.gson.internal.bind.util.ISO8601Utils;
 import com.google.gson.stream.JsonReader;
 import com.google.gson.stream.JsonToken;
 import com.google.gson.stream.JsonWriter;
-import com.google.gson.util.VersionUtils;
 
 /**
  * This type adapter supports three subclasses of date: Date, Timestamp, and
@@ -59,7 +59,7 @@
     if (!Locale.getDefault().equals(Locale.US)) {
       dateFormats.add(DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT));
     }
-    if (VersionUtils.isJava9OrLater()) {
+    if (JavaVersion.isJava9OrLater()) {
       dateFormats.add(PreJava9DateFormatProvider.getUSDateTimeFormat(DateFormat.DEFAULT, DateFormat.DEFAULT));
     }
   }
@@ -78,7 +78,7 @@
     if (!Locale.getDefault().equals(Locale.US)) {
       dateFormats.add(DateFormat.getDateInstance(style));
     }
-    if (VersionUtils.isJava9OrLater()) {
+    if (JavaVersion.isJava9OrLater()) {
       dateFormats.add(PreJava9DateFormatProvider.getUSDateFormat(style));
     }
   }
@@ -93,7 +93,7 @@
     if (!Locale.getDefault().equals(Locale.US)) {
       dateFormats.add(DateFormat.getDateTimeInstance(dateStyle, timeStyle));
     }
-    if (VersionUtils.isJava9OrLater()) {
+    if (JavaVersion.isJava9OrLater()) {
       dateFormats.add(PreJava9DateFormatProvider.getUSDateTimeFormat(dateStyle, timeStyle));
     }
   }
diff -ru /tmp/v1/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java /tmp/v2/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java
--- /tmp/v1/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java	2021-09-30 23:39:40.766316093 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java	2021-09-30 11:43:34.418619203 +0200
@@ -20,13 +20,13 @@
 import com.google.gson.JsonSyntaxException;
 import com.google.gson.TypeAdapter;
 import com.google.gson.TypeAdapterFactory;
+import com.google.gson.internal.JavaVersion;
 import com.google.gson.internal.PreJava9DateFormatProvider;
 import com.google.gson.internal.bind.util.ISO8601Utils;
 import com.google.gson.reflect.TypeToken;
 import com.google.gson.stream.JsonReader;
 import com.google.gson.stream.JsonToken;
 import com.google.gson.stream.JsonWriter;
-import com.google.gson.util.VersionUtils;
 
 import java.io.IOException;
 import java.text.DateFormat;
@@ -62,7 +62,7 @@
     if (!Locale.getDefault().equals(Locale.US)) {
       dateFormats.add(DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT));
     }
-    if (VersionUtils.isJava9OrLater()) {
+    if (JavaVersion.isJava9OrLater()) {
       dateFormats.add(PreJava9DateFormatProvider.getUSDateTimeFormat(DateFormat.DEFAULT, DateFormat.DEFAULT));
     }
   }
Only in /tmp/v2/gson/src/main/java/com/google/gson/internal: JavaVersion.java
diff -ru /tmp/v1/gson/src/main/java/com/google/gson/internal/reflect/ReflectionAccessor.java /tmp/v2/gson/src/main/java/com/google/gson/internal/reflect/ReflectionAccessor.java
--- /tmp/v1/gson/src/main/java/com/google/gson/internal/reflect/ReflectionAccessor.java	2021-09-30 23:39:40.766316093 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/internal/reflect/ReflectionAccessor.java	2021-09-30 11:43:34.418619203 +0200
@@ -15,10 +15,10 @@
  */
 package com.google.gson.internal.reflect;
 
-import com.google.gson.util.VersionUtils;
-
 import java.lang.reflect.AccessibleObject;
 
+import com.google.gson.internal.JavaVersion;
+
 /**
  * Provides a replacement for {@link AccessibleObject#setAccessible(boolean)}, which may be used to
  * avoid reflective access issues appeared in Java 9, like {@link java.lang.reflect.InaccessibleObjectException}
@@ -33,7 +33,7 @@
 public abstract class ReflectionAccessor {
 
   // the singleton instance, use getInstance() to obtain
-  private static final ReflectionAccessor instance = VersionUtils.getMajorJavaVersion() < 9 ? new PreJava9ReflectionAccessor() : new UnsafeReflectionAccessor();
+  private static final ReflectionAccessor instance = JavaVersion.getMajorJavaVersion() < 9 ? new PreJava9ReflectionAccessor() : new UnsafeReflectionAccessor();
 
   /**
    * Does the same as {@code ao.setAccessible(true)}, but never throws
Only in /tmp/v1/gson/src/main/java/com/google/gson: util
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java /tmp/v2/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java	2021-09-30 23:39:40.766316093 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java	2021-09-30 22:13:58.825646807 +0200
@@ -23,7 +23,8 @@
 import java.util.Locale;
 import java.util.TimeZone;
 
-import com.google.gson.util.VersionUtils;
+import com.google.gson.internal.JavaVersion;
+
 import junit.framework.TestCase;
 
 /**
@@ -47,9 +48,9 @@
     Locale defaultLocale = Locale.getDefault();
     Locale.setDefault(locale);
     try {
-      String afterYearSep = VersionUtils.isJava9OrLater() ? ", " : " ";
-      String afterYearLongSep = VersionUtils.isJava9OrLater() ? " at " : " ";
-      String utcFull = VersionUtils.isJava9OrLater() ? "Coordinated Universal Time" : "UTC";
+      String afterYearSep = JavaVersion.isJava9OrLater() ? ", " : " ";
+      String afterYearLongSep = JavaVersion.isJava9OrLater() ? " at " : " ";
+      String utcFull = JavaVersion.isJava9OrLater() ? "Coordinated Universal Time" : "UTC";
       assertFormatted(String.format("Jan 1, 1970%s12:00:00 AM", afterYearSep),
               new DefaultDateTypeAdapter(Date.class));
       assertFormatted("1/1/70", new DefaultDateTypeAdapter(Date.class, DateFormat.SHORT));
@@ -75,7 +76,7 @@
     Locale defaultLocale = Locale.getDefault();
     Locale.setDefault(Locale.FRANCE);
     try {
-      String afterYearSep = VersionUtils.isJava9OrLater() ? " à " : " ";
+      String afterYearSep = JavaVersion.isJava9OrLater() ? " à " : " ";
       assertParsed(String.format("1 janv. 1970%s00:00:00", afterYearSep),
               new DefaultDateTypeAdapter(Date.class));
       assertParsed("01/01/70", new DefaultDateTypeAdapter(Date.class, DateFormat.SHORT));
@@ -87,7 +88,7 @@
           new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));
       assertParsed(String.format("1 janvier 1970%s00:00:00 UTC", afterYearSep),
           new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));
-      assertParsed(VersionUtils.isJava9OrLater() ?
+      assertParsed(JavaVersion.isJava9OrLater() ?
                       "jeudi 1 janvier 1970 à 00:00:00 Coordinated Universal Time" :
                       "jeudi 1 janvier 1970 00 h 00 UTC",
           new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));
@@ -127,7 +128,7 @@
     Locale defaultLocale = Locale.getDefault();
     Locale.setDefault(Locale.US);
     try {
-      String afterYearSep = VersionUtils.isJava9OrLater() ? ", " : " ";
+      String afterYearSep = JavaVersion.isJava9OrLater() ? ", " : " ";
       assertFormatted(String.format("Dec 31, 1969%s4:00:00 PM", afterYearSep),
               new DefaultDateTypeAdapter(Date.class));
       assertParsed("Dec 31, 1969 4:00:00 PM", new DefaultDateTypeAdapter(Date.class));
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java /tmp/v2/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java	2021-09-30 23:39:40.766316093 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java	2021-09-30 22:19:57.999603292 +0200
@@ -27,6 +27,7 @@
 import com.google.gson.JsonPrimitive;
 import com.google.gson.JsonSyntaxException;
 import com.google.gson.TypeAdapter;
+import com.google.gson.internal.JavaVersion;
 import com.google.gson.reflect.TypeToken;
 import com.google.gson.stream.JsonReader;
 import com.google.gson.stream.JsonWriter;
@@ -56,7 +57,6 @@
 import java.util.TreeSet;
 import java.util.UUID;
 
-import com.google.gson.util.VersionUtils;
 import junit.framework.TestCase;
 
 /**
@@ -330,7 +330,7 @@
   public void testDefaultDateSerialization() {
     Date now = new Date(1315806903103L);
     String json = gson.toJson(now);
-    if (VersionUtils.isJava9OrLater()) {
+    if (JavaVersion.isJava9OrLater()) {
       assertEquals("\"Sep 11, 2011, 10:55:03 PM\"", json);
     } else {
       assertEquals("\"Sep 11, 2011 10:55:03 PM\"", json);
@@ -375,7 +375,7 @@
   public void testDefaultJavaSqlTimestampSerialization() {
     Timestamp now = new java.sql.Timestamp(1259875082000L);
     String json = gson.toJson(now);
-    if (VersionUtils.isJava9OrLater()) {
+    if (JavaVersion.isJava9OrLater()) {
       assertEquals("\"Dec 3, 2009, 1:18:02 PM\"", json);
     } else {
       assertEquals("\"Dec 3, 2009 1:18:02 PM\"", json);
@@ -405,7 +405,7 @@
     Gson gson = new GsonBuilder().create();
     Date now = new Date(1315806903103L);
     String json = gson.toJson(now);
-    if (VersionUtils.isJava9OrLater()) {
+    if (JavaVersion.isJava9OrLater()) {
       assertEquals("\"Sep 11, 2011, 10:55:03 PM\"", json);
     } else {
       assertEquals("\"Sep 11, 2011 10:55:03 PM\"", json);
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/functional/ObjectTest.java /tmp/v2/gson/src/test/java/com/google/gson/functional/ObjectTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/functional/ObjectTest.java	2021-09-30 23:39:40.766316093 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/functional/ObjectTest.java	2021-09-30 22:54:21.972878397 +0200
@@ -33,6 +33,7 @@
 import com.google.gson.common.TestTypes.ClassWithTransientFields;
 import com.google.gson.common.TestTypes.Nested;
 import com.google.gson.common.TestTypes.PrimitiveArray;
+import com.google.gson.internal.JavaVersion;
 import com.google.gson.reflect.TypeToken;
 import java.lang.reflect.Type;
 import java.util.ArrayList;
@@ -44,7 +45,6 @@
 import java.util.Map;
 import java.util.TimeZone;
 
-import com.google.gson.util.VersionUtils;
 import junit.framework.TestCase;
 
 /**
@@ -484,7 +484,7 @@
   public void testDateAsMapObjectField() {
     HasObjectMap a = new HasObjectMap();
     a.map.put("date", new Date(0));
-    if (VersionUtils.isJava9OrLater()) {
+    if (JavaVersion.isJava9OrLater()) {
       assertEquals("{\"map\":{\"date\":\"Dec 31, 1969, 4:00:00 PM\"}}", gson.toJson(a));
     } else {
       assertEquals("{\"map\":{\"date\":\"Dec 31, 1969 4:00:00 PM\"}}", gson.toJson(a));
Only in /tmp/v2/gson/src/test/java/com/google/gson/internal: JavaVersionTest.java
