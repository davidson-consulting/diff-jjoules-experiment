diff -ru /tmp/v1/gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java /tmp/v2/gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java
--- /tmp/v1/gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java	2021-09-22 13:45:48.892298385 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java	2021-09-22 13:45:48.896298328 +0200
@@ -250,8 +250,14 @@
   }
 
   JsonElement nextJsonElement() throws IOException {
-    if (peek() == JsonToken.NAME) {
-      throw new IllegalStateException("Can't turn a name into a JsonElement");
+    final JsonToken peeked = peek();
+    if (
+      peeked == JsonToken.NAME
+      || peeked == JsonToken.END_ARRAY
+      || peeked == JsonToken.END_OBJECT
+      || peeked == JsonToken.END_DOCUMENT
+    ) {
+      throw new IllegalStateException("Unexpected " + peeked + " when reading a JsonElement.");
     }
     final JsonElement element = (JsonElement) peekStack();
     skipValue();
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java /tmp/v2/gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java	2021-09-22 13:45:48.892298385 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java	2021-09-22 13:20:57.538045801 +0200
@@ -18,6 +18,7 @@
 
 import com.google.gson.JsonElement;
 import com.google.gson.JsonParser;
+import com.google.gson.JsonPrimitive;
 import com.google.gson.stream.JsonToken;
 import java.io.IOException;
 import junit.framework.TestCase;
@@ -298,6 +299,41 @@
     reader.endArray();
   }
 
+  public void testNextJsonElement() throws IOException {
+    final JsonElement element = JsonParser.parseString("{\"A\": 1, \"B\" : {}, \"C\" : []}");
+    JsonTreeReader reader = new JsonTreeReader(element);
+    reader.beginObject();
+    try {
+      reader.nextJsonElement();
+      fail();
+    } catch (IllegalStateException expected) {
+    }
+    reader.nextName();
+    assertEquals(reader.nextJsonElement(), new JsonPrimitive(1));
+    reader.nextName();
+    reader.beginObject();
+    try {
+      reader.nextJsonElement();
+      fail();
+    } catch (IllegalStateException expected) {
+    }
+    reader.endObject();
+    reader.nextName();
+    reader.beginArray();
+    try {
+      reader.nextJsonElement();
+      fail();
+    } catch (IllegalStateException expected) {
+    }
+    reader.endArray();
+    reader.endObject();
+    try {
+      reader.nextJsonElement();
+      fail();
+    } catch (IllegalStateException expected) {
+    }
+  }
+
   public void testEarlyClose() throws IOException {
     JsonElement element = JsonParser.parseString("[1, 2, 3]");
     JsonTreeReader reader = new JsonTreeReader(element);
