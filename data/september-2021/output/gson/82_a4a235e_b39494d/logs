[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for com.google.code.gson:gson:jar:2.8.7-SNAPSHOT
[WARNING] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-jar-plugin is missing. @ line 46, column 15
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO] 
[INFO] ---------------------< com.google.code.gson:gson >----------------------
[INFO] Building Gson 2.8.7-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ gson ---
[INFO] Deleting /tmp/v1/gson/target
[INFO] 
[INFO] --- diff-jjoules:0.0.1-SNAPSHOT:diff-jjoules (default-cli) @ gson ---
[INFO] Running on:
[INFO] /tmp/v1/gson
[INFO] /tmp/v2/gson/
[INFO] Enable JUnit4 mode
[WARNING] No path to diff file has been specified.
[WARNING] I'll compute a diff file using the UNIX diff command
[WARNING] You may encounter troubles.
[WARNING] If so, please specify a path to a correct diff file
[WARNING] or implement a new way to compute a diff file.
[INFO] Computing the diff with diff commnd line
[INFO] The diff will be computed between:
[INFO] /tmp/v1/gson/src and 
[INFO] /tmp/v2/gson/src
[INFO] Executing: diff -ru /tmp/v1/gson/src /tmp/v2/gson/src from /tmp/v1/gson/src
[INFO] Run DiffJJoules - Configuration{pathToFirstVersion='/tmp/v1/gson', pathToSecondVersion='/tmp/v2/gson/', pathToTestListAsCSV='/tmp/v1/gson/testsThatExecuteTheChange.csv', junit4=true, iterations=5, output='/tmp/v1/gson/diff-jjoules', pathToJSONDelta='deltas.json', pathToJSONDataV1='data_v1.json', pathToJSONDataV2='data_v2.json', diff='Only in /tmp/v2/gson/src/main/java/com/google/gson: DefaultDateTypeAdapter.java
diff -ru /tmp/v1/gson/src/main/java/com/google/gson/GsonBuilder.java /tmp/v2/gson/src/main/java/com/google/gson/GsonBuilder.java
--- /tmp/v1/gson/src/main/java/com/google/gson/GsonBuilder.java	2021-09-22 15:53:42.458033479 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/GsonBuilder.java	2021-09-22 14:19:41.284351820 +0200
@@ -17,6 +17,7 @@
 package com.google.gson;
 
 import java.lang.reflect.Type;
+import java.sql.Timestamp;
 import java.text.DateFormat;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -27,10 +28,8 @@
 
 import com.google.gson.internal.$Gson$Preconditions;
 import com.google.gson.internal.Excluder;
-import com.google.gson.internal.bind.DefaultDateTypeAdapter;
 import com.google.gson.internal.bind.TreeTypeAdapter;
 import com.google.gson.internal.bind.TypeAdapters;
-import com.google.gson.internal.sql.SqlTypesSupport;
 import com.google.gson.reflect.TypeToken;
 import com.google.gson.stream.JsonReader;
 
@@ -418,8 +417,8 @@
    * call this method or {@link #setDateFormat(int)} multiple times, but only the last invocation
    * will be used to decide the serialization format.
    *
-   * <p>The date format will be used to serialize and deserialize {@link java.util.Date} and in case
-   * the {@code java.sql} module is present, also {@link java.sql.Timestamp} and {@link java.sql.Date}.
+   * <p>The date format will be used to serialize and deserialize {@link java.util.Date}, {@link
+   * java.sql.Timestamp} and {@link java.sql.Date}.
    *
    * <p>Note that this pattern must abide by the convention provided by {@code SimpleDateFormat}
    * class. See the documentation in {@link java.text.SimpleDateFormat} for more information on
@@ -603,35 +602,26 @@
         this.factories, this.hierarchyFactories, factories);
   }
 
+  @SuppressWarnings("unchecked")
   private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle,
       List<TypeAdapterFactory> factories) {
-    TypeAdapterFactory dateAdapterFactory;
-    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;
-    TypeAdapterFactory sqlTimestampAdapterFactory = null;
-    TypeAdapterFactory sqlDateAdapterFactory = null;
-
-    if (datePattern != null && !datePattern.trim().isEmpty()) {
-      dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);
-
-      if (sqlTypesSupported) {
-        sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);
-        sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);
-      }
+    DefaultDateTypeAdapter dateTypeAdapter;
+    TypeAdapter<Timestamp> timestampTypeAdapter;
+    TypeAdapter<java.sql.Date> javaSqlDateTypeAdapter;
+    if (datePattern != null && !"".equals(datePattern.trim())) {
+      dateTypeAdapter = new DefaultDateTypeAdapter(Date.class, datePattern);
+      timestampTypeAdapter = (TypeAdapter) new DefaultDateTypeAdapter(Timestamp.class, datePattern);
+      javaSqlDateTypeAdapter = (TypeAdapter) new DefaultDateTypeAdapter(java.sql.Date.class, datePattern);
     } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {
-      dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);
-
-      if (sqlTypesSupported) {
-        sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);
-        sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);
-      }
+      dateTypeAdapter = new DefaultDateTypeAdapter(Date.class, dateStyle, timeStyle);
+      timestampTypeAdapter = (TypeAdapter) new DefaultDateTypeAdapter(Timestamp.class, dateStyle, timeStyle);
+      javaSqlDateTypeAdapter = (TypeAdapter) new DefaultDateTypeAdapter(java.sql.Date.class, dateStyle, timeStyle);
     } else {
       return;
     }
 
-    factories.add(dateAdapterFactory);
-    if (sqlTypesSupported) {
-      factories.add(sqlTimestampAdapterFactory);
-      factories.add(sqlDateAdapterFactory);
-    }
+    factories.add(TypeAdapters.newFactory(Date.class, dateTypeAdapter));
+    factories.add(TypeAdapters.newFactory(Timestamp.class, timestampTypeAdapter));
+    factories.add(TypeAdapters.newFactory(java.sql.Date.class, javaSqlDateTypeAdapter));
   }
 }
diff -ru /tmp/v1/gson/src/main/java/com/google/gson/Gson.java /tmp/v2/gson/src/main/java/com/google/gson/Gson.java
--- /tmp/v1/gson/src/main/java/com/google/gson/Gson.java	2021-09-22 15:53:42.458033479 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/Gson.java	2021-09-22 14:19:41.284351820 +0200
@@ -49,8 +49,9 @@
 import com.google.gson.internal.bind.MapTypeAdapterFactory;
 import com.google.gson.internal.bind.ObjectTypeAdapter;
 import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
+import com.google.gson.internal.bind.SqlDateTypeAdapter;
+import com.google.gson.internal.bind.TimeTypeAdapter;
 import com.google.gson.internal.bind.TypeAdapters;
-import com.google.gson.internal.sql.SqlTypesSupport;
 import com.google.gson.reflect.TypeToken;
 import com.google.gson.stream.JsonReader;
 import com.google.gson.stream.JsonToken;
@@ -261,13 +262,9 @@
     factories.add(TypeAdapters.BIT_SET_FACTORY);
     factories.add(DateTypeAdapter.FACTORY);
     factories.add(TypeAdapters.CALENDAR_FACTORY);
-
-    if (SqlTypesSupport.SUPPORTS_SQL_TYPES) {
-      factories.add(SqlTypesSupport.TIME_FACTORY);
-      factories.add(SqlTypesSupport.DATE_FACTORY);
-      factories.add(SqlTypesSupport.TIMESTAMP_FACTORY);
-    }
-
+    factories.add(TimeTypeAdapter.FACTORY);
+    factories.add(SqlDateTypeAdapter.FACTORY);
+    factories.add(TypeAdapters.TIMESTAMP_FACTORY);
     factories.add(ArrayTypeAdapter.FACTORY);
     factories.add(TypeAdapters.CLASS_FACTORY);
 
diff -ru /tmp/v1/gson/src/main/java/com/google/gson/internal/$Gson$Types.java /tmp/v2/gson/src/main/java/com/google/gson/internal/$Gson$Types.java
--- /tmp/v1/gson/src/main/java/com/google/gson/internal/$Gson$Types.java	2021-09-22 15:53:42.458033479 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/internal/$Gson$Types.java	2021-09-22 15:07:44.431593597 +0200
@@ -334,11 +334,11 @@
   }
 
   public static Type resolve(Type context, Class<?> contextRawType, Type toResolve) {
-    return resolve(context, contextRawType, toResolve, new HashSet<TypeVariable<?>>());
+    return resolve(context, contextRawType, toResolve, new HashSet<TypeVariable>());
   }
 
   private static Type resolve(Type context, Class<?> contextRawType, Type toResolve,
-                              Collection<TypeVariable<?>> visitedTypeVariables) {
+                              Collection<TypeVariable> visitedTypeVariables) {
     // this implementation is made a little more complicated in an attempt to avoid object-creation
     while (true) {
       if (toResolve instanceof TypeVariable) {
Only in /tmp/v1/gson/src/main/java/com/google/gson/internal/bind: DefaultDateTypeAdapter.java
Only in /tmp/v2/gson/src/main/java/com/google/gson/internal/bind: SqlDateTypeAdapter.java
Only in /tmp/v2/gson/src/main/java/com/google/gson/internal/bind: TimeTypeAdapter.java
diff -ru /tmp/v1/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java /tmp/v2/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
--- /tmp/v1/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java	2021-09-22 15:53:42.458033479 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java	2021-09-22 15:00:38.850948950 +0200
@@ -23,10 +23,12 @@
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URL;
+import java.sql.Timestamp;
 import java.util.ArrayList;
 import java.util.BitSet;
 import java.util.Calendar;
 import java.util.Currency;
+import java.util.Date;
 import java.util.GregorianCalendar;
 import java.util.HashMap;
 import java.util.List;
@@ -404,7 +406,7 @@
       out.value(value);
     }
   };
-
+  
   public static final TypeAdapter<BigDecimal> BIG_DECIMAL = new TypeAdapter<BigDecimal>() {
     @Override public BigDecimal read(JsonReader in) throws IOException {
       if (in.peek() == JsonToken.NULL) {
@@ -422,7 +424,7 @@
       out.value(value);
     }
   };
-
+  
   public static final TypeAdapter<BigInteger> BIG_INTEGER = new TypeAdapter<BigInteger>() {
     @Override public BigInteger read(JsonReader in) throws IOException {
       if (in.peek() == JsonToken.NULL) {
@@ -567,6 +569,27 @@
   }.nullSafe();
   public static final TypeAdapterFactory CURRENCY_FACTORY = newFactory(Currency.class, CURRENCY);
 
+  public static final TypeAdapterFactory TIMESTAMP_FACTORY = new TypeAdapterFactory() {
+    @SuppressWarnings("unchecked") // we use a runtime check to make sure the 'T's equal
+    @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
+      if (typeToken.getRawType() != Timestamp.class) {
+        return null;
+      }
+
+      final TypeAdapter<Date> dateTypeAdapter = gson.getAdapter(Date.class);
+      return (TypeAdapter<T>) new TypeAdapter<Timestamp>() {
+        @Override public Timestamp read(JsonReader in) throws IOException {
+          Date date = dateTypeAdapter.read(in);
+          return date != null ? new Timestamp(date.getTime()) : null;
+        }
+
+        @Override public void write(JsonWriter out, Timestamp value) throws IOException {
+          dateTypeAdapter.write(out, value);
+        }
+      };
+    }
+  };
+
   public static final TypeAdapter<Calendar> CALENDAR = new TypeAdapter<Calendar>() {
     private static final String YEAR = "year";
     private static final String MONTH = "month";
diff -ru /tmp/v1/gson/src/main/java/com/google/gson/internal/reflect/UnsafeReflectionAccessor.java /tmp/v2/gson/src/main/java/com/google/gson/internal/reflect/UnsafeReflectionAccessor.java
--- /tmp/v1/gson/src/main/java/com/google/gson/internal/reflect/UnsafeReflectionAccessor.java	2021-09-22 15:53:42.458033479 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/internal/reflect/UnsafeReflectionAccessor.java	2021-09-22 15:53:42.466033626 +0200
@@ -79,7 +79,7 @@
   private static Field getOverrideField() {
     try {
       return AccessibleObject.class.getDeclaredField("override");
-    } catch (NoSuchFieldException e) {
+    } catch (Exception e) {
       return null;
     }
   }
Only in /tmp/v1/gson/src/main/java/com/google/gson/internal: sql
Only in /tmp/v2/gson/src/test/java/com/google/gson: DefaultDateTypeAdapterTest.java
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/functional/CollectionTest.java /tmp/v2/gson/src/test/java/com/google/gson/functional/CollectionTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/functional/CollectionTest.java	2021-09-22 15:53:42.462033552 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/functional/CollectionTest.java	2021-09-22 15:07:44.431593597 +0200
@@ -37,6 +37,7 @@
 import com.google.gson.JsonPrimitive;
 import com.google.gson.JsonSerializationContext;
 import com.google.gson.JsonSerializer;
+import com.google.gson.common.MoreAsserts;
 import com.google.gson.common.TestTypes.BagOfPrimitives;
 import com.google.gson.reflect.TypeToken;
 
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java /tmp/v2/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java	2021-09-22 15:53:42.462033552 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java	2021-09-22 14:31:11.551503512 +0200
@@ -69,14 +69,12 @@
 public class DefaultTypeAdaptersTest extends TestCase {
   private Gson gson;
   private TimeZone oldTimeZone;
-  private Locale oldLocale;
 
   @Override
   protected void setUp() throws Exception {
     super.setUp();
     this.oldTimeZone = TimeZone.getDefault();
     TimeZone.setDefault(TimeZone.getTimeZone("America/Los_Angeles"));
-    this.oldLocale = Locale.getDefault();
     Locale.setDefault(Locale.US);
     gson = new Gson();
   }
@@ -84,7 +82,6 @@
   @Override
   protected void tearDown() throws Exception {
     TimeZone.setDefault(oldTimeZone);
-    Locale.setDefault(oldLocale);
     super.tearDown();
   }
 
@@ -149,7 +146,7 @@
     URI target = gson.fromJson(json, URI.class);
     assertEquals(uriValue, target.toASCIIString());
   }
-
+  
   public void testNullSerialization() throws Exception {
     testNullSerializationAndDeserialization(Boolean.class);
     testNullSerializationAndDeserialization(Byte.class);
@@ -178,15 +175,14 @@
     testNullSerializationAndDeserialization(Date.class);
     testNullSerializationAndDeserialization(GregorianCalendar.class);
     testNullSerializationAndDeserialization(Calendar.class);
+    testNullSerializationAndDeserialization(Time.class);
+    testNullSerializationAndDeserialization(Timestamp.class);
+    testNullSerializationAndDeserialization(java.sql.Date.class);
     testNullSerializationAndDeserialization(Enum.class);
     testNullSerializationAndDeserialization(Class.class);
   }
 
   private void testNullSerializationAndDeserialization(Class<?> c) {
-    testNullSerializationAndDeserialization(gson, c);
-  }
-
-  public static void testNullSerializationAndDeserialization(Gson gson, Class<?> c) {
     assertEquals("null", gson.toJson(null, c));
     assertEquals(null, gson.fromJson("null", c));
   }
@@ -273,7 +269,7 @@
     ClassWithBigInteger actual = gson.fromJson(json, ClassWithBigInteger.class);
     assertEquals(expected.value, actual.value);
   }
-
+  
   public void testOverrideBigIntegerTypeAdapter() throws Exception {
     gson = new GsonBuilder()
         .registerTypeAdapter(BigInteger.class, new NumberAsStringAdapter(BigInteger.class))
@@ -351,19 +347,60 @@
   // Date can not directly be compared with another instance since the deserialization loses the
   // millisecond portion.
   @SuppressWarnings("deprecation")
-  public static void assertEqualsDate(Date date, int year, int month, int day) {
+  private void assertEqualsDate(Date date, int year, int month, int day) {
     assertEquals(year-1900, date.getYear());
     assertEquals(month, date.getMonth());
     assertEquals(day, date.getDate());
   }
 
   @SuppressWarnings("deprecation")
-  public static void assertEqualsTime(Date date, int hours, int minutes, int seconds) {
+  private void assertEqualsTime(Date date, int hours, int minutes, int seconds) {
     assertEquals(hours, date.getHours());
     assertEquals(minutes, date.getMinutes());
     assertEquals(seconds, date.getSeconds());
   }
 
+  public void testDefaultJavaSqlDateSerialization() {
+    java.sql.Date instant = new java.sql.Date(1259875082000L);
+    String json = gson.toJson(instant);
+    assertEquals("\"Dec 3, 2009\"", json);
+  }
+
+  public void testDefaultJavaSqlDateDeserialization() {
+    String json = "'Dec 3, 2009'";
+    java.sql.Date extracted = gson.fromJson(json, java.sql.Date.class);
+    assertEqualsDate(extracted, 2009, 11, 3);
+  }
+
+  public void testDefaultJavaSqlTimestampSerialization() {
+    Timestamp now = new java.sql.Timestamp(1259875082000L);
+    String json = gson.toJson(now);
+    if (JavaVersion.isJava9OrLater()) {
+      assertEquals("\"Dec 3, 2009, 1:18:02 PM\"", json);
+    } else {
+      assertEquals("\"Dec 3, 2009 1:18:02 PM\"", json);
+    }
+  }
+
+  public void testDefaultJavaSqlTimestampDeserialization() {
+    String json = "'Dec 3, 2009 1:18:02 PM'";
+    Timestamp extracted = gson.fromJson(json, Timestamp.class);
+    assertEqualsDate(extracted, 2009, 11, 3);
+    assertEqualsTime(extracted, 13, 18, 2);
+  }
+
+  public void testDefaultJavaSqlTimeSerialization() {
+    Time now = new Time(1259875082000L);
+    String json = gson.toJson(now);
+    assertEquals("\"01:18:02 PM\"", json);
+  }
+
+  public void testDefaultJavaSqlTimeDeserialization() {
+    String json = "'1:18:02 PM'";
+    Time extracted = gson.fromJson(json, Time.class);
+    assertEqualsTime(extracted, 13, 18, 2);
+  }
+
   public void testDefaultDateSerializationUsingBuilder() throws Exception {
     Gson gson = new GsonBuilder().create();
     Date now = new Date(1315806903103L);
@@ -484,6 +521,42 @@
     } finally {
       TimeZone.setDefault(defaultTimeZone);
       Locale.setDefault(defaultLocale);
+    }
+  }
+
+  // http://code.google.com/p/google-gson/issues/detail?id=230
+  public void testTimestampSerialization() throws Exception {
+    TimeZone defaultTimeZone = TimeZone.getDefault();
+    TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
+    Locale defaultLocale = Locale.getDefault();
+    Locale.setDefault(Locale.US);
+    try {
+      Timestamp timestamp = new Timestamp(0L);
+      Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
+      String json = gson.toJson(timestamp, Timestamp.class);
+      assertEquals("\"1970-01-01\"", json);
+      assertEquals(0, gson.fromJson("\"1970-01-01\"", Timestamp.class).getTime());
+    } finally {
+      TimeZone.setDefault(defaultTimeZone);
+      Locale.setDefault(defaultLocale);
+    }
+  }
+
+  // http://code.google.com/p/google-gson/issues/detail?id=230
+  public void testSqlDateSerialization() throws Exception {
+    TimeZone defaultTimeZone = TimeZone.getDefault();
+    TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
+    Locale defaultLocale = Locale.getDefault();
+    Locale.setDefault(Locale.US);
+    try {
+      java.sql.Date sqlDate = new java.sql.Date(0L);
+      Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
+      String json = gson.toJson(sqlDate, Timestamp.class);
+      assertEquals("\"1970-01-01\"", json);
+      assertEquals(0, gson.fromJson("\"1970-01-01\"", java.sql.Date.class).getTime());
+    } finally {
+      TimeZone.setDefault(defaultTimeZone);
+      Locale.setDefault(defaultLocale);
     }
   }
 
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java /tmp/v2/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java	2021-09-22 15:53:42.462033552 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java	2021-09-22 14:19:41.284351820 +0200
@@ -172,7 +172,6 @@
     int numClasses;
   }
 
-  @SafeVarargs
   private static <T> List<T> createList(T ...items) {
     return Arrays.asList(items);
   }
Only in /tmp/v1/gson/src/test/java/com/google/gson/internal/bind: DefaultDateTypeAdapterTest.java
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java /tmp/v2/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java	2021-09-22 15:53:42.462033552 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java	2021-09-22 14:19:41.284351820 +0200
@@ -36,7 +36,7 @@
 
   @SuppressWarnings("unused")
   private static class Foo1<A> {
-    public Foo2<? extends A> foo2;
+	public Foo2<? extends A> foo2;
   }
   @SuppressWarnings("unused")
   private static class Foo2<B> {
@@ -48,7 +48,6 @@
    */
 
   public void testRecursiveResolveSimple() {
-    @SuppressWarnings("rawtypes")
     TypeAdapter<Foo1> adapter = new Gson().getAdapter(Foo1.class);
     assertNotNull(adapter);
   }
@@ -63,7 +62,6 @@
   }
 
   public void testIssue440WeakReference() throws Exception {
-    @SuppressWarnings("rawtypes")
     TypeAdapter<WeakReference> adapter = new Gson().getAdapter(WeakReference.class);
     assertNotNull(adapter);
   }
@@ -107,13 +105,11 @@
   }
 
   public void testRecursiveTypeVariablesResolve1() throws Exception {
-    @SuppressWarnings("rawtypes")
     TypeAdapter<TestType> adapter = new Gson().getAdapter(TestType.class);
     assertNotNull(adapter);
   }
 
   public void testRecursiveTypeVariablesResolve12() throws Exception {
-    @SuppressWarnings("rawtypes")
     TypeAdapter<TestType2> adapter = new Gson().getAdapter(TestType2.class);
     assertNotNull(adapter);
   }
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java /tmp/v2/gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java	2021-09-22 15:53:42.462033552 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java	2021-09-22 14:19:41.284351820 +0200
@@ -280,7 +280,6 @@
     }
   }
 
-  @SafeVarargs
   private <T> void assertIterationOrder(Iterable<T> actual, T... expected) {
     ArrayList<T> actualList = new ArrayList<T>();
     for (T t : actual) {
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java /tmp/v2/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java	2021-09-22 15:53:42.462033552 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java	2021-09-22 14:19:41.284351820 +0200
@@ -140,7 +140,6 @@
     MoreAsserts.assertEqualsAndHashCode(map1, map2);
   }
 
-  @SafeVarargs
   private <T> void assertIterationOrder(Iterable<T> actual, T... expected) {
     ArrayList<T> actualList = new ArrayList<T>();
     for (T t : actual) {
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/internal/reflect/UnsafeReflectionAccessorTest.java /tmp/v2/gson/src/test/java/com/google/gson/internal/reflect/UnsafeReflectionAccessorTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/internal/reflect/UnsafeReflectionAccessorTest.java	2021-09-22 15:53:42.462033552 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/internal/reflect/UnsafeReflectionAccessorTest.java	2021-09-22 15:53:42.466033626 +0200
@@ -15,10 +15,12 @@
  */
 package com.google.gson.internal.reflect;
 
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
 import java.lang.reflect.Field;
+import java.security.Permission;
 
 import org.junit.Test;
 
@@ -41,6 +43,30 @@
     }
   }
 
+  @Test
+  public void testMakeAccessibleWithRestrictiveSecurityManager() throws Exception {
+    final Permission accessDeclaredMembers = new RuntimePermission("accessDeclaredMembers");
+    final SecurityManager original = System.getSecurityManager();
+    SecurityManager restrictiveManager = new SecurityManager() {
+      @Override
+      public void checkPermission(Permission perm) {
+        if (accessDeclaredMembers.equals(perm)) {
+          throw new SecurityException("nope");
+        }
+      }
+    };
+    System.setSecurityManager(restrictiveManager);
+
+    try {
+      UnsafeReflectionAccessor accessor = new UnsafeReflectionAccessor();
+      Field field = ClassWithPrivateFinalFields.class.getDeclaredField("a");
+      assertFalse("override field should have been inaccessible", accessor.makeAccessibleWithUnsafe(field));
+      accessor.makeAccessible(field);
+    } finally {
+      System.setSecurityManager(original);
+    }
+  }
+
   @SuppressWarnings("unused")
   private static final class ClassWithPrivateFinalFields {
     private final String a;
Only in /tmp/v1/gson/src/test/java/com/google/gson/internal: sql
', pathToJSONDeltaOmega='deltaOmega.json', pathToRepositoryV1='/tmp/v1', pathToRepositoryV2='/tmp/v2', pathToJSONConsideredTestMethodNames='consideredTestMethods.json', pathToExecLinesAdditions='exec_additions.json', pathToExecLinesDeletions='exec_deletions.json', pathToJSONSuspiciousV1='suspicious_v1.json', pathToJSONSuspiciousV2='suspicious_v2.json', pathToReport='.github/workflows/template.md', classpathV1=[/home/benjamin/.m2/repository/junit/junit/4.12/junit-4.12.jar, /home/benjamin/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar], classpathV2=[/home/benjamin/.m2/repository/junit/junit/4.12/junit-4.12.jar, /home/benjamin/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar], classpathV1AsString='/home/benjamin/.m2/repository/junit/junit/4.12/junit-4.12.jar:/home/benjamin/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar', classpathV2AsString='/home/benjamin/.m2/repository/junit/junit/4.12/junit-4.12.jar:/home/benjamin/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar', testsList=null, dataV1=null, dataV2=null, deltas=null, consideredTestsNames=null, execLinesAdditions=null, execLinesDeletions=null, deltaOmega=null, scorePerLineV1=null, scorePerLineV2=null, ownConsumptionReports={}, reportEnum=NONE}
[INFO] mvn -f /tmp/v1/gson clean test -DskipTests dependency:build-classpath --quiet -Dcobertura.skip=true -Dlicense.skip=true -Dfindbugs.skip=true -Danimal.sniffer.skip=true -Djacoco.skip=true -Dcheckstyle.skip=true -Dproguard.skip=true -Dmdep.outputFile=classpath -DskipITs=true -Drat.skip=true -Denforcer.skip=true -Dgpg.skip=true
[WARN] Maven will be executed in interactive mode, but no input stream has been configured for this MavenInvoker instance.
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.google.inject.internal.cglib.core.$ReflectUtils$1 (file:/usr/share/maven/lib/guice.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)
WARNING: Please consider reporting this to the maintainers of com.google.inject.internal.cglib.core.$ReflectUtils$1
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
[INFO] mvn -f /tmp/v2/gson/ clean test -DskipTests dependency:build-classpath --quiet -Dcobertura.skip=true -Dlicense.skip=true -Dfindbugs.skip=true -Danimal.sniffer.skip=true -Djacoco.skip=true -Dcheckstyle.skip=true -Dproguard.skip=true -Dmdep.outputFile=classpath -DskipITs=true -Drat.skip=true -Denforcer.skip=true -Dgpg.skip=true
[WARN] Maven will be executed in interactive mode, but no input stream has been configured for this MavenInvoker instance.
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.google.inject.internal.cglib.core.$ReflectUtils$1 (file:/usr/share/maven/lib/guice.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)
WARNING: Please consider reporting this to the maintainers of com.google.inject.internal.cglib.core.$ReflectUtils$1
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
[INFO] mvn -f /tmp/v1/gson clean eu.stamp-project:dspot-diff-test-selection:3.1.1-SNAPSHOT:list -Dcobertura.skip=true -Dlicense.skip=true -Dfindbugs.skip=true -Danimal.sniffer.skip=true -Djacoco.skip=true -Dcheckstyle.skip=true -Dproguard.skip=true -Dpath-dir-second-version=/tmp/v2/gson/ -DskipITs=true -Drat.skip=true -Denforcer.skip=true -Dgpg.skip=true
[WARN] Maven will be executed in interactive mode, but no input stream has been configured for this MavenInvoker instance.
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.google.inject.internal.cglib.core.$ReflectUtils$1 (file:/usr/share/maven/lib/guice.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)
WARNING: Please consider reporting this to the maintainers of com.google.inject.internal.cglib.core.$ReflectUtils$1
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
[[1;34mINFO[m] Scanning for projects...
[[1;33mWARNING[m] 
[[1;33mWARNING[m] Some problems were encountered while building the effective model for com.google.code.gson:gson:jar:2.8.7-SNAPSHOT
[[1;33mWARNING[m] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-jar-plugin is missing. @ line 46, column 15
[[1;33mWARNING[m] 
[[1;33mWARNING[m] It is highly recommended to fix these problems because they threaten the stability of your build.
[[1;33mWARNING[m] 
[[1;33mWARNING[m] For this reason, future Maven versions might no longer support building such malformed projects.
[[1;33mWARNING[m] 
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m---------------------< [0;36mcom.google.code.gson:gson[0;1m >----------------------[m
[[1;34mINFO[m] [1mBuilding Gson 2.8.7-SNAPSHOT[m
[[1;34mINFO[m] [1m--------------------------------[ jar ]---------------------------------[m
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-clean-plugin:2.5:clean[m [1m(default-clean)[m @ [36mgson[0;1m ---[m
[[1;34mINFO[m] Deleting /tmp/v1/gson/target
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mdspot-diff-test-selection:3.1.1-SNAPSHOT:list[m [1m(default-cli)[m @ [36mgson[0;1m ---[m
[[1;34mINFO[m] Running on:
[[1;34mINFO[m] /tmp/v1/gson
[[1;33mWARNING[m] No path to diff file has been specified.
[[1;33mWARNING[m] I'll compute a diff file using the UNIX diff command
[[1;33mWARNING[m] You may encounter troubles.
[[1;33mWARNING[m] If so, please specify a path to a correct diff file
[[1;33mWARNING[m] or implement a new way to compute a diff file.
[[1;34mINFO[m] Computing the diff with diff commnd line
[[1;34mINFO[m] The diff will be computed between:
[[1;34mINFO[m] /tmp/v1/gson/src and 
[[1;34mINFO[m] /tmp/v2/gson/src
[[1;34mINFO[m] Executing: diff -ru /tmp/v1/gson/src /tmp/v2/gson/src from /tmp/v1/gson/src
[[1;34mINFO[m] Running in enhanced mode...
[[1;34mINFO[m] Computing coverage for /tmp/v1/gson
[WARN] Maven will be executed in interactive mode, but no input stream has been configured for this MavenInvoker instance.
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.google.inject.internal.cglib.core.$ReflectUtils$1 (file:/usr/share/maven/lib/guice.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)
WARNING: Please consider reporting this to the maintainers of com.google.inject.internal.cglib.core.$ReflectUtils$1
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
[[1;34mINFO[m] Scanning for projects...
[[1;33mWARNING[m] 
[[1;33mWARNING[m] Some problems were encountered while building the effective model for com.google.code.gson:gson:jar:2.8.7-SNAPSHOT
[[1;33mWARNING[m] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-jar-plugin is missing. @ line 46, column 15
[[1;33mWARNING[m] 
[[1;33mWARNING[m] It is highly recommended to fix these problems because they threaten the stability of your build.
[[1;33mWARNING[m] 
[[1;33mWARNING[m] For this reason, future Maven versions might no longer support building such malformed projects.
[[1;33mWARNING[m] 
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m---------------------< [0;36mcom.google.code.gson:gson[0;1m >----------------------[m
[[1;34mINFO[m] [1mBuilding Gson 2.8.7-SNAPSHOT[m
[[1;34mINFO[m] [1m--------------------------------[ jar ]---------------------------------[m
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-clean-plugin:2.5:clean[m [1m(default-clean)[m @ [36mgson[0;1m ---[m
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mclover-maven-plugin:4.4.1:setup[m [1m(default-cli)[m @ [36mgson[0;1m ---[m
[[1;34mINFO[m] OpenClover Version 4.4.1, built on October 11 2019 (build-1020)
[[1;34mINFO[m] Creating new database at '/tmp/v1/gson/target/clover/clover.db'.
[[1;34mINFO[m] Processing files at 1.9 source level.
[[1;34mINFO[m] Clover all over. Instrumented 74 files (9 packages).
[[1;34mINFO[m] OpenClover Version 4.4.1, built on October 11 2019 (build-1020)
[[1;34mINFO[m] Updating existing database at '/tmp/v1/gson/target/clover/clover.db'.
[[1;34mINFO[m] Processing files at 1.9 source level.
[[1;34mINFO[m] Clover all over. Instrumented 104 files (12 packages).
[[1;34mINFO[m] 1055 test methods detected.
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-enforcer-plugin:1.0:enforce[m [1m(enforce-maven)[m @ [36mgson[0;1m ---[m
[[1;34mINFO[m] Skipping Rule Enforcement.
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mtemplating-maven-plugin:1.0.0:filter-sources[m [1m(filtering-java-templates)[m @ [36mgson[0;1m ---[m
[[1;34mINFO[m] Coping files with filtering to temporary directory.
[[1;34mINFO[m] Using 'UTF-8' encoding to copy filtered resources.
[[1;34mINFO[m] Copying 1 resource
[[1;34mINFO[m] Copied 1 files to output directory: /tmp/v1/gson/target/generated-sources/java-templates
[[1;34mINFO[m] Source directory: /tmp/v1/gson/target/generated-sources/java-templates added.
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:2.6:resources[m [1m(default-resources)[m @ [36mgson[0;1m ---[m
[[1;34mINFO[m] Using 'UTF-8' encoding to copy filtered resources.
[[1;34mINFO[m] skip non existing resourceDirectory /tmp/v1/gson/src/main/resources
[[1;34mINFO[m] Copying 1 resource
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.8.1:compile[m [1m(default-compile)[m @ [36mgson[0;1m ---[m
[[1;34mINFO[m] Changes detected - recompiling the module!
[[1;34mINFO[m] Compiling 75 source files to /tmp/v1/gson/target/classes
[[1;34mINFO[m] /tmp/v1/gson/target/clover/src-instrumented/com/google/gson/JsonPrimitive.java: Some input files use or override a deprecated API.
[[1;34mINFO[m] /tmp/v1/gson/target/clover/src-instrumented/com/google/gson/JsonPrimitive.java: Recompile with -Xlint:deprecation for details.
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.8.1:compile[m [1m(base-compile)[m @ [36mgson[0;1m ---[m
[[1;34mINFO[m] Changes detected - recompiling the module!
[[1;34mINFO[m] Compiling 75 source files to /tmp/v1/gson/target/classes
[[1;34mINFO[m] /tmp/v1/gson/target/clover/src-instrumented/com/google/gson/JsonPrimitive.java: Some input files use or override a deprecated API.
[[1;34mINFO[m] /tmp/v1/gson/target/clover/src-instrumented/com/google/gson/JsonPrimitive.java: Recompile with -Xlint:deprecation for details.
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mbnd-maven-plugin:4.0.0:bnd-process[m [1m(default)[m @ [36mgson[0;1m ---[m
[[1;33mWARNING[m] /tmp/v1/gson/bnd.bnd [0:0]: Export com.google.gson,  has 1,  private references [com.google.gson.internal], 
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:2.6:testResources[m [1m(default-testResources)[m @ [36mgson[0;1m ---[m
[[1;34mINFO[m] Using 'UTF-8' encoding to copy filtered resources.
[[1;34mINFO[m] skip non existing resourceDirectory /tmp/v1/gson/src/test/resources
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.8.1:testCompile[m [1m(default-testCompile)[m @ [36mgson[0;1m ---[m
[[1;34mINFO[m] Changes detected - recompiling the module!
[[1;34mINFO[m] Compiling 104 source files to /tmp/v1/gson/target/test-classes
[[1;34mINFO[m] /tmp/v1/gson/target/clover/src-test-instrumented/com/google/gson/functional/DefaultTypeAdaptersTest.java: Some input files use or override a deprecated API.
[[1;34mINFO[m] /tmp/v1/gson/target/clover/src-test-instrumented/com/google/gson/functional/DefaultTypeAdaptersTest.java: Recompile with -Xlint:deprecation for details.
[[1;34mINFO[m] /tmp/v1/gson/target/clover/src-test-instrumented/com/google/gson/functional/MapTest.java: Some input files use unchecked or unsafe operations.
[[1;34mINFO[m] /tmp/v1/gson/target/clover/src-test-instrumented/com/google/gson/functional/MapTest.java: Recompile with -Xlint:unchecked for details.
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-surefire-plugin:2.12.4:test[m [1m(default-test)[m @ [36mgson[0;1m ---[m
[[1;34mINFO[m] Surefire report directory: /tmp/v1/gson/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running com.google.gson.stream.JsonReaderTest
Tests run: 120, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.22 sec
Running com.google.gson.stream.JsonReaderPathTest
Tests run: 20, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 0.085 sec
Running com.google.gson.stream.JsonWriterTest
Tests run: 39, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.056 sec
Running com.google.gson.GsonTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.03 sec
Running com.google.gson.InnerClassExclusionStrategyTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec
Running com.google.gson.ObjectTypeAdapterTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.016 sec
Running com.google.gson.VersionExclusionStrategyTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec
Running com.google.gson.JsonArrayTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec
Running com.google.gson.JavaSerializationTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.029 sec
Running com.google.gson.ParameterizedTypeTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec
Running com.google.gson.GsonBuilderTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec
Running com.google.gson.JsonNullTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec
Running com.google.gson.GsonTypeAdapterTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.013 sec
Running com.google.gson.CommentsTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec
Running com.google.gson.JsonParserTest
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.01 sec
Running com.google.gson.reflect.TypeTokenTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.007 sec
Running com.google.gson.JsonPrimitiveTest
Tests run: 25, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.016 sec
Running com.google.gson.ExposeAnnotationExclusionStrategyTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec
Running com.google.gson.GenericArrayTypeTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec
Running com.google.gson.FieldAttributesTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec
Running com.google.gson.JsonStreamParserTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec
Running com.google.gson.regression.JsonAdapterNullSafeTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 sec
Running com.google.gson.MixedStreamTest
Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.013 sec
Running com.google.gson.DefaultInetAddressTypeAdapterTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec
Running com.google.gson.LongSerializationPolicyTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 sec
Running com.google.gson.internal.LazilyParsedNumberTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec
Running com.google.gson.internal.GsonTypesTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec
Running com.google.gson.internal.LinkedHashTreeMapTest
Tests run: 15, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.031 sec
Running com.google.gson.internal.bind.JsonTreeReaderTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec
Running com.google.gson.internal.bind.JsonTreeWriterTest
Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.018 sec
Running com.google.gson.internal.bind.util.ISO8601UtilsTest
Tests run: 7, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.05 sec <<< FAILURE!
testDateFormatString(com.google.gson.internal.bind.util.ISO8601UtilsTest)  Time elapsed: 0.007 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<2018-06-2[5]> but was:<2018-06-2[4]>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at org.junit.Assert.assertEquals(Assert.java:144)
	at com.google.gson.internal.bind.util.ISO8601UtilsTest.__CLR4_4_1wyqt75aol(ISO8601UtilsTest.java:23)
	at com.google.gson.internal.bind.util.ISO8601UtilsTest.testDateFormatString(ISO8601UtilsTest.java:19)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate(ExpectedException.java:239)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)

Running com.google.gson.internal.bind.DefaultDateTypeAdapterTest
Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.184 sec
Running com.google.gson.internal.bind.RecursiveTypesResolveTest
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.032 sec
Running com.google.gson.internal.bind.JsonElementReaderTest
Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.014 sec
Running com.google.gson.internal.GsonBuildConfigTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec
Running com.google.gson.internal.JavaVersionTest
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec
Running com.google.gson.internal.sql.SqlTypesSupportTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec
Running com.google.gson.internal.sql.SqlTypesGsonTest
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.016 sec
Running com.google.gson.internal.reflect.UnsafeReflectionAccessorTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec
Running com.google.gson.internal.LinkedTreeMapTest
Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.021 sec
Running com.google.gson.internal.UnsafeAllocatorInstantiationTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec
Running com.google.gson.DefaultMapJsonSerializerTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 sec
Running com.google.gson.OverrideCoreTypeAdaptersTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec
Running com.google.gson.functional.MoreSpecificTypeSerializationTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.014 sec
Running com.google.gson.functional.JavaUtilTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.007 sec
Running com.google.gson.functional.CircularReferenceTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.057 sec
Running com.google.gson.functional.NullObjectAndFieldTest
Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.025 sec
Running com.google.gson.functional.ConcurrencyTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.022 sec
Running com.google.gson.functional.PrimitiveCharacterTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec
Running com.google.gson.functional.CustomDeserializerTest
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.014 sec
Running com.google.gson.functional.MapTest
Tests run: 48, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.078 sec
Running com.google.gson.functional.ExclusionStrategyFunctionalTest
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.017 sec
Running com.google.gson.functional.TypeHierarchyAdapterTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.011 sec
Running com.google.gson.functional.InternationalizationTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec
Running com.google.gson.functional.CustomSerializerTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec
Running com.google.gson.functional.JsonArrayTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.007 sec
Running com.google.gson.functional.JsonTreeTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.008 sec
Running com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.024 sec
Running com.google.gson.functional.TreeTypeAdaptersTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.01 sec
Running com.google.gson.functional.FieldNamingTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.011 sec
Running com.google.gson.functional.LeniencyTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec
Running com.google.gson.functional.GsonVersionDiagnosticsTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 sec
Running com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.007 sec
Running com.google.gson.functional.SecurityTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.007 sec
Running com.google.gson.functional.InheritanceTest
Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.026 sec
Running com.google.gson.functional.SerializedNameTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec
Running com.google.gson.functional.JsonAdapterSerializerDeserializerTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.01 sec
Running com.google.gson.functional.ExposeFieldsTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.015 sec
Running com.google.gson.functional.ParameterizedTypesTest
Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.046 sec
Running com.google.gson.functional.MapAsArrayTypeAdapterTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.013 sec
Running com.google.gson.functional.NamingPolicyTest
Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.022 sec
Running com.google.gson.functional.VersioningTest
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.017 sec
Running com.google.gson.functional.DelegateTypeAdapterTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec
Running com.google.gson.functional.ArrayTest
Tests run: 26, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.029 sec
Running com.google.gson.functional.PrettyPrintingTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.013 sec
Running com.google.gson.functional.CollectionTest
Tests run: 29, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.046 sec
Running com.google.gson.functional.ThrowableFunctionalTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.012 sec
Running com.google.gson.functional.JsonParserTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.012 sec
Running com.google.gson.functional.EnumTest
Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.021 sec
Running com.google.gson.functional.InterfaceTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 sec
Running com.google.gson.functional.RawSerializationTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.01 sec
Running com.google.gson.functional.TypeVariableTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.008 sec
Running com.google.gson.functional.UncategorizedTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.011 sec
Running com.google.gson.functional.PrimitiveTest
Tests run: 99, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.093 sec
Running com.google.gson.functional.EscapingTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.007 sec
Running com.google.gson.functional.JsonAdapterAnnotationOnClassesTest
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.019 sec
Running com.google.gson.functional.ReadersWritersTest
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.013 sec
Running com.google.gson.functional.InstanceCreatorTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.011 sec
Running com.google.gson.functional.CustomTypeAdaptersTest
Tests run: 19, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.032 sec
Running com.google.gson.functional.TypeAdapterPrecedenceTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.013 sec
Running com.google.gson.functional.FieldExclusionTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec
Running com.google.gson.functional.StreamingTypeAdaptersTest
Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.03 sec
Running com.google.gson.functional.PrintFormattingTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec
Running com.google.gson.functional.JavaUtilConcurrentAtomicTest
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.012 sec
Running com.google.gson.functional.StringTest
Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.016 sec
Running com.google.gson.functional.ObjectTest
Tests run: 44, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.062 sec
Running com.google.gson.functional.DefaultTypeAdaptersTest
Tests run: 57, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.055 sec
Running com.google.gson.metrics.PerformanceTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec
Running com.google.gson.JsonObjectTest
Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.008 sec

Results :

Failed tests:   testDateFormatString(com.google.gson.internal.bind.util.ISO8601UtilsTest): expected:<2018-06-2[5]> but was:<2018-06-2[4]>

Tests run: 1065, Failures: 1, Errors: 0, Skipped: 1

[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] [1;31mBUILD FAILURE[m
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] Total time:  14.292 s
[[1;34mINFO[m] Finished at: 2021-09-22T15:54:36+02:00
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;31mERROR[m] Failed to execute goal [32morg.apache.maven.plugins:maven-surefire-plugin:2.12.4:test[m [1m(default-test)[m on project [36mgson[m: [1;31mThere are test failures.[m
[[1;31mERROR[m] [1;31m[m
[[1;31mERROR[m] [1;31mPlease refer to /tmp/v1/gson/target/surefire-reports for the individual test results.[m
[[1;31mERROR[m] -> [1m[Help 1][m
[[1;31mERROR[m] 
[[1;31mERROR[m] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch.
[[1;31mERROR[m] Re-run Maven using the [1m-X[m switch to enable full debug logging.
[[1;31mERROR[m] 
[[1;31mERROR[m] For more information about the errors and possible solutions, please read the following articles:
[[1;31mERROR[m] [1m[Help 1][m http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
Reading Clover data /tmp/v1/gson/target/clover
Writing HTML report to '/tmp/v1/gson/target/clover/report'
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/main/java/com/google/gson/internal/$Gson$Types.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/main/java/com/google/gson/internal/bind/DefaultDateTypeAdapter.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/main/java/com/google/gson/Gson.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/MixedStreamTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/ParameterizedTypeFixtures.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/CollectionTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/EnumTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/InheritanceTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/InterfaceTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/JsonAdapterSerializerDeserializerTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/JsonTreeTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/MapTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/ObjectTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/RawSerializationTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/SerializedNameTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/TypeVariableTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/functional/UncategorizedTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v1/gson/src/test/java/com/google/gson/common/TestTypes.java
Done. Processed 13 packages in 6453ms (496ms per package).
[[1;34mINFO[m] Computing coverage for /tmp/v2/gson/
[WARN] Maven will be executed in interactive mode, but no input stream has been configured for this MavenInvoker instance.
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.google.inject.internal.cglib.core.$ReflectUtils$1 (file:/usr/share/maven/lib/guice.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)
WARNING: Please consider reporting this to the maintainers of com.google.inject.internal.cglib.core.$ReflectUtils$1
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
[[1;34mINFO[m] Scanning for projects...
[[1;33mWARNING[m] 
[[1;33mWARNING[m] Some problems were encountered while building the effective model for com.google.code.gson:gson:jar:2.8.7-SNAPSHOT
[[1;33mWARNING[m] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-jar-plugin is missing. @ line 46, column 15
[[1;33mWARNING[m] 
[[1;33mWARNING[m] It is highly recommended to fix these problems because they threaten the stability of your build.
[[1;33mWARNING[m] 
[[1;33mWARNING[m] For this reason, future Maven versions might no longer support building such malformed projects.
[[1;33mWARNING[m] 
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m---------------------< [0;36mcom.google.code.gson:gson[0;1m >----------------------[m
[[1;34mINFO[m] [1mBuilding Gson 2.8.7-SNAPSHOT[m
[[1;34mINFO[m] [1m--------------------------------[ jar ]---------------------------------[m
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-clean-plugin:2.5:clean[m [1m(default-clean)[m @ [36mgson[0;1m ---[m
[[1;34mINFO[m] Deleting /tmp/v2/gson/target
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mclover-maven-plugin:4.4.1:setup[m [1m(default-cli)[m @ [36mgson[0;1m ---[m
[[1;34mINFO[m] OpenClover Version 4.4.1, built on October 11 2019 (build-1020)
[[1;34mINFO[m] Creating new database at '/tmp/v2/gson/target/clover/clover.db'.
[[1;34mINFO[m] Processing files at 1.9 source level.
[[1;34mINFO[m] Clover all over. Instrumented 72 files (8 packages).
[[1;34mINFO[m] OpenClover Version 4.4.1, built on October 11 2019 (build-1020)
[[1;34mINFO[m] Updating existing database at '/tmp/v2/gson/target/clover/clover.db'.
[[1;34mINFO[m] Processing files at 1.9 source level.
[[1;34mINFO[m] Clover all over. Instrumented 102 files (11 packages).
[[1;34mINFO[m] 1054 test methods detected.
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-enforcer-plugin:1.0:enforce[m [1m(enforce-maven)[m @ [36mgson[0;1m ---[m
[[1;34mINFO[m] Skipping Rule Enforcement.
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mtemplating-maven-plugin:1.0.0:filter-sources[m [1m(filtering-java-templates)[m @ [36mgson[0;1m ---[m
[[1;34mINFO[m] Coping files with filtering to temporary directory.
[[1;34mINFO[m] Using 'UTF-8' encoding to copy filtered resources.
[[1;34mINFO[m] Copying 1 resource
[[1;34mINFO[m] Copied 1 files to output directory: /tmp/v2/gson/target/generated-sources/java-templates
[[1;34mINFO[m] Source directory: /tmp/v2/gson/target/generated-sources/java-templates added.
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:2.6:resources[m [1m(default-resources)[m @ [36mgson[0;1m ---[m
[[1;34mINFO[m] Using 'UTF-8' encoding to copy filtered resources.
[[1;34mINFO[m] skip non existing resourceDirectory /tmp/v2/gson/src/main/resources
[[1;34mINFO[m] Copying 1 resource
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.8.1:compile[m [1m(default-compile)[m @ [36mgson[0;1m ---[m
[[1;34mINFO[m] Changes detected - recompiling the module!
[[1;34mINFO[m] Compiling 73 source files to /tmp/v2/gson/target/classes
[[1;34mINFO[m] /tmp/v2/gson/target/clover/src-instrumented/com/google/gson/JsonArray.java: Some input files use or override a deprecated API.
[[1;34mINFO[m] /tmp/v2/gson/target/clover/src-instrumented/com/google/gson/JsonArray.java: Recompile with -Xlint:deprecation for details.
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.8.1:compile[m [1m(base-compile)[m @ [36mgson[0;1m ---[m
[[1;34mINFO[m] Changes detected - recompiling the module!
[[1;34mINFO[m] Compiling 73 source files to /tmp/v2/gson/target/classes
[[1;34mINFO[m] /tmp/v2/gson/target/clover/src-instrumented/com/google/gson/JsonArray.java: Some input files use or override a deprecated API.
[[1;34mINFO[m] /tmp/v2/gson/target/clover/src-instrumented/com/google/gson/JsonArray.java: Recompile with -Xlint:deprecation for details.
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mbnd-maven-plugin:4.0.0:bnd-process[m [1m(default)[m @ [36mgson[0;1m ---[m
[[1;33mWARNING[m] /tmp/v2/gson/bnd.bnd [0:0]: Export com.google.gson,  has 1,  private references [com.google.gson.internal], 
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:2.6:testResources[m [1m(default-testResources)[m @ [36mgson[0;1m ---[m
[[1;34mINFO[m] Using 'UTF-8' encoding to copy filtered resources.
[[1;34mINFO[m] skip non existing resourceDirectory /tmp/v2/gson/src/test/resources
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.8.1:testCompile[m [1m(default-testCompile)[m @ [36mgson[0;1m ---[m
[[1;34mINFO[m] Changes detected - recompiling the module!
[[1;34mINFO[m] Compiling 102 source files to /tmp/v2/gson/target/test-classes
[[1;34mINFO[m] /tmp/v2/gson/target/clover/src-test-instrumented/com/google/gson/JsonNullTest.java: Some input files use or override a deprecated API.
[[1;34mINFO[m] /tmp/v2/gson/target/clover/src-test-instrumented/com/google/gson/JsonNullTest.java: Recompile with -Xlint:deprecation for details.
[[1;34mINFO[m] /tmp/v2/gson/target/clover/src-test-instrumented/com/google/gson/functional/ParameterizedTypesTest.java: Some input files use unchecked or unsafe operations.
[[1;34mINFO[m] /tmp/v2/gson/target/clover/src-test-instrumented/com/google/gson/functional/ParameterizedTypesTest.java: Recompile with -Xlint:unchecked for details.
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-surefire-plugin:2.12.4:test[m [1m(default-test)[m @ [36mgson[0;1m ---[m
[[1;34mINFO[m] Surefire report directory: /tmp/v2/gson/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running com.google.gson.stream.JsonReaderTest
Tests run: 120, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.204 sec
Running com.google.gson.stream.JsonReaderPathTest
Tests run: 20, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 0.073 sec
Running com.google.gson.stream.JsonWriterTest
Tests run: 39, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.062 sec
Running com.google.gson.GsonTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.031 sec
Running com.google.gson.InnerClassExclusionStrategyTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec
Running com.google.gson.ObjectTypeAdapterTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.019 sec
Running com.google.gson.VersionExclusionStrategyTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec
Running com.google.gson.JsonArrayTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec
Running com.google.gson.JavaSerializationTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.028 sec
Running com.google.gson.ParameterizedTypeTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 sec
Running com.google.gson.GsonBuilderTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.007 sec
Running com.google.gson.JsonNullTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec
Running com.google.gson.GsonTypeAdapterTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.015 sec
Running com.google.gson.CommentsTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec
Running com.google.gson.JsonParserTest
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.011 sec
Running com.google.gson.reflect.TypeTokenTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.007 sec
Running com.google.gson.JsonPrimitiveTest
Tests run: 25, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.018 sec
Running com.google.gson.ExposeAnnotationExclusionStrategyTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec
Running com.google.gson.GenericArrayTypeTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec
Running com.google.gson.FieldAttributesTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec
Running com.google.gson.JsonStreamParserTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 sec
Running com.google.gson.regression.JsonAdapterNullSafeTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec
Running com.google.gson.MixedStreamTest
Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.017 sec
Running com.google.gson.DefaultDateTypeAdapterTest
Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.236 sec
Running com.google.gson.DefaultInetAddressTypeAdapterTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 sec
Running com.google.gson.LongSerializationPolicyTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.007 sec
Running com.google.gson.internal.LazilyParsedNumberTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec
Running com.google.gson.internal.GsonTypesTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec
Running com.google.gson.internal.LinkedHashTreeMapTest
Tests run: 15, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.032 sec
Running com.google.gson.internal.bind.JsonTreeReaderTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec
Running com.google.gson.internal.bind.JsonTreeWriterTest
Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.011 sec
Running com.google.gson.internal.bind.util.ISO8601UtilsTest
Tests run: 7, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.022 sec <<< FAILURE!
testDateFormatString(com.google.gson.internal.bind.util.ISO8601UtilsTest)  Time elapsed: 0.009 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<2018-06-2[5]> but was:<2018-06-2[4]>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at org.junit.Assert.assertEquals(Assert.java:144)
	at com.google.gson.internal.bind.util.ISO8601UtilsTest.__CLR4_4_1wyqt75ap8(ISO8601UtilsTest.java:23)
	at com.google.gson.internal.bind.util.ISO8601UtilsTest.testDateFormatString(ISO8601UtilsTest.java:19)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate(ExpectedException.java:239)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)

Running com.google.gson.internal.bind.RecursiveTypesResolveTest
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.029 sec
Running com.google.gson.internal.bind.JsonElementReaderTest
Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.017 sec
Running com.google.gson.internal.GsonBuildConfigTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec
Running com.google.gson.internal.JavaVersionTest
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.007 sec
Running com.google.gson.internal.reflect.UnsafeReflectionAccessorTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.028 sec
Running com.google.gson.internal.LinkedTreeMapTest
Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.04 sec
Running com.google.gson.internal.UnsafeAllocatorInstantiationTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 sec
Running com.google.gson.DefaultMapJsonSerializerTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec
Running com.google.gson.OverrideCoreTypeAdaptersTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec
Running com.google.gson.functional.MoreSpecificTypeSerializationTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.018 sec
Running com.google.gson.functional.JavaUtilTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec
Running com.google.gson.functional.CircularReferenceTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.051 sec
Running com.google.gson.functional.NullObjectAndFieldTest
Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.017 sec
Running com.google.gson.functional.ConcurrencyTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.021 sec
Running com.google.gson.functional.PrimitiveCharacterTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec
Running com.google.gson.functional.CustomDeserializerTest
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.01 sec
Running com.google.gson.functional.MapTest
Tests run: 48, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.067 sec
Running com.google.gson.functional.ExclusionStrategyFunctionalTest
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.012 sec
Running com.google.gson.functional.TypeHierarchyAdapterTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec
Running com.google.gson.functional.InternationalizationTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec
Running com.google.gson.functional.CustomSerializerTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec
Running com.google.gson.functional.JsonArrayTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec
Running com.google.gson.functional.JsonTreeTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec
Running com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.018 sec
Running com.google.gson.functional.TreeTypeAdaptersTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec
Running com.google.gson.functional.FieldNamingTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.008 sec
Running com.google.gson.functional.LeniencyTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec
Running com.google.gson.functional.GsonVersionDiagnosticsTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec
Running com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec
Running com.google.gson.functional.SecurityTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec
Running com.google.gson.functional.InheritanceTest
Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.02 sec
Running com.google.gson.functional.SerializedNameTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec
Running com.google.gson.functional.JsonAdapterSerializerDeserializerTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.008 sec
Running com.google.gson.functional.ExposeFieldsTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.011 sec
Running com.google.gson.functional.ParameterizedTypesTest
Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.035 sec
Running com.google.gson.functional.MapAsArrayTypeAdapterTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.011 sec
Running com.google.gson.functional.NamingPolicyTest
Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.018 sec
Running com.google.gson.functional.VersioningTest
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.013 sec
Running com.google.gson.functional.DelegateTypeAdapterTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 sec
Running com.google.gson.functional.ArrayTest
Tests run: 26, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.026 sec
Running com.google.gson.functional.PrettyPrintingTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.009 sec
Running com.google.gson.functional.CollectionTest
Tests run: 29, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.039 sec
Running com.google.gson.functional.ThrowableFunctionalTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.009 sec
Running com.google.gson.functional.JsonParserTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.01 sec
Running com.google.gson.functional.EnumTest
Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.018 sec
Running com.google.gson.functional.InterfaceTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec
Running com.google.gson.functional.RawSerializationTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.008 sec
Running com.google.gson.functional.TypeVariableTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec
Running com.google.gson.functional.UncategorizedTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.008 sec
Running com.google.gson.functional.PrimitiveTest
Tests run: 99, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.08 sec
Running com.google.gson.functional.EscapingTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec
Running com.google.gson.functional.JsonAdapterAnnotationOnClassesTest
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.013 sec
Running com.google.gson.functional.ReadersWritersTest
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.01 sec
Running com.google.gson.functional.InstanceCreatorTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.013 sec
Running com.google.gson.functional.CustomTypeAdaptersTest
Tests run: 19, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.03 sec
Running com.google.gson.functional.TypeAdapterPrecedenceTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.007 sec
Running com.google.gson.functional.FieldExclusionTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 sec
Running com.google.gson.functional.StreamingTypeAdaptersTest
Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.024 sec
Running com.google.gson.functional.PrintFormattingTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 sec
Running com.google.gson.functional.JavaUtilConcurrentAtomicTest
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.009 sec
Running com.google.gson.functional.StringTest
Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.017 sec
Running com.google.gson.functional.ObjectTest
Tests run: 44, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.041 sec
Running com.google.gson.functional.DefaultTypeAdaptersTest
Tests run: 65, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.083 sec
Running com.google.gson.metrics.PerformanceTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec
Running com.google.gson.JsonObjectTest
Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.01 sec

Results :

Failed tests:   testDateFormatString(com.google.gson.internal.bind.util.ISO8601UtilsTest): expected:<2018-06-2[5]> but was:<2018-06-2[4]>

Tests run: 1064, Failures: 1, Errors: 0, Skipped: 1

[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] [1;31mBUILD FAILURE[m
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] Total time:  14.729 s
[[1;34mINFO[m] Finished at: 2021-09-22T15:55:00+02:00
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;31mERROR[m] Failed to execute goal [32morg.apache.maven.plugins:maven-surefire-plugin:2.12.4:test[m [1m(default-test)[m on project [36mgson[m: [1;31mThere are test failures.[m
[[1;31mERROR[m] [1;31m[m
[[1;31mERROR[m] [1;31mPlease refer to /tmp/v2/gson/target/surefire-reports for the individual test results.[m
[[1;31mERROR[m] -> [1m[Help 1][m
[[1;31mERROR[m] 
[[1;31mERROR[m] To see the full stack trace of the errors, re-run Maven with the [1m-e[m switch.
[[1;31mERROR[m] Re-run Maven using the [1m-X[m switch to enable full debug logging.
[[1;31mERROR[m] 
[[1;31mERROR[m] For more information about the errors and possible solutions, please read the following articles:
[[1;31mERROR[m] [1m[Help 1][m http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
Reading Clover data /tmp/v2/gson/target/clover
Writing HTML report to '/tmp/v2/gson/target/clover/report'
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/main/java/com/google/gson/internal/$Gson$Types.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/main/java/com/google/gson/Gson.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/MixedStreamTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/ParameterizedTypeFixtures.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/CollectionTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/EnumTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/InheritanceTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/InterfaceTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/JsonAdapterSerializerDeserializerTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/JsonTreeTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/MapTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/ObjectTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/RawSerializationTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/SerializedNameTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/TypeVariableTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/functional/UncategorizedTest.java
ERROR: Invalid Java source found or Clover failed to parse it: /tmp/v2/gson/src/test/java/com/google/gson/common/TestTypes.java
Done. Processed 12 packages in 2978ms (248ms per package).
[[1;34mINFO[m] /tmp/v1/gson/src/main/java/com/google/gson/GsonBuilder.java
[[1;34mINFO[m] /tmp/v2/gson/src/main/java/com/google/gson/GsonBuilder.java
[[1;34mINFO[m] com.google.gson.GsonBuilder:[609, 609, 610, 611, 625, 626, 614, 612, 613, 614, 615, 618, 617, 618, 619, 609, 614, 617, 618, 616, 616, 621, 624, 625, 623, 623, 632, 633] are modified.
[[1;34mINFO[m] com.google.gson.GsonBuilder:609 covered.
[[1;34mINFO[m] com.google.gson.GsonBuilder:610 covered.
[[1;34mINFO[m] com.google.gson.GsonBuilder:611 covered.
[[1;34mINFO[m] com.google.gson.GsonBuilder:613 covered.
[[1;34mINFO[m] com.google.gson.GsonBuilder:614 covered.
[[1;34mINFO[m] com.google.gson.GsonBuilder:618 covered.
[[1;34mINFO[m] com.google.gson.GsonBuilder:617 covered.
[[1;34mINFO[m] com.google.gson.GsonBuilder:616 covered.
[[1;34mINFO[m] com.google.gson.GsonBuilder:632 covered.
[[1;34mINFO[m] com.google.gson.GsonBuilder:633 covered.
[[1;34mINFO[m] com.google.gson.GsonBuilder:[605, 609, 609, 611, 612, 623, 634, 635, 618, 623, 632, 624, 625, 614, 615, 618, 619, 611, 612, 613, 614, 625, 622, 625, 626, 616, 617, 618] are modified.
[[1;34mINFO[m] com.google.gson.GsonBuilder:615 covered.
[[1;34mINFO[m] com.google.gson.GsonBuilder:612 covered.
[[1;34mINFO[m] com.google.gson.GsonBuilder:623 covered.
[[1;34mINFO[m] com.google.gson.GsonBuilder:624 covered.
[[1;34mINFO[m] com.google.gson.GsonBuilder:625 covered.
[[1;34mINFO[m] /tmp/v1/gson/src/main/java/com/google/gson/Gson.java
[[1;34mINFO[m] /tmp/v2/gson/src/main/java/com/google/gson/Gson.java
[[1;34mINFO[m] com.google.gson.Gson:[266, 267, 268, 265, 266, 265] are modified.
[[1;34mINFO[m] com.google.gson.Gson:[265, 267, 268, 269] are modified.
[[1;34mINFO[m] /tmp/v1/gson/src/main/java/com/google/gson/internal/$Gson$Types.java
[[1;34mINFO[m] /tmp/v2/gson/src/main/java/com/google/gson/internal/$Gson$Types.java
[[1;34mINFO[m] /tmp/v1/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
[[1;34mINFO[m] /tmp/v2/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
[[1;34mINFO[m] com.google.gson.internal.bind.TypeAdapters:[594, 662, 699, 809, 825, 835, 848, 863, 882, 716, 724, 753, 761] are modified.
[[1;34mINFO[m] com.google.gson.internal.bind.TypeAdapters:863 covered.
[[1;34mINFO[m] com.google.gson.internal.bind.TypeAdapters:699 covered.
[[1;34mINFO[m] com.google.gson.internal.bind.TypeAdapters:[572, 572, 571, 639, 676, 786, 574, 802, 812, 825, 840, 859, 575, 575, 579, 580, 576, 579, 580, 575, 576, 581, 582, 587, 693, 701, 582, 583, 587, 582, 583, 730, 583, 738] are modified.
[[1;34mINFO[m] com.google.gson.internal.bind.TypeAdapters:575 covered.
[[1;34mINFO[m] com.google.gson.internal.bind.TypeAdapters:576 covered.
[[1;34mINFO[m] com.google.gson.internal.bind.TypeAdapters:812 covered.
[[1;34mINFO[m] com.google.gson.internal.bind.TypeAdapters:701 covered.
[[1;34mINFO[m] com.google.gson.internal.bind.TypeAdapters:738 covered.
[[1;34mINFO[m] com.google.gson.internal.bind.TypeAdapters:676 covered.
[[1;34mINFO[m] /tmp/v1/gson/src/main/java/com/google/gson/internal/reflect/UnsafeReflectionAccessor.java
[[1;34mINFO[m] /tmp/v2/gson/src/main/java/com/google/gson/internal/reflect/UnsafeReflectionAccessor.java
[[1;34mINFO[m] com.google.gson.internal.reflect.UnsafeReflectionAccessor:[83] are modified.
[[1;34mINFO[m] com.google.gson.internal.reflect.UnsafeReflectionAccessor:[83] are modified.
[[1;34mINFO[m] com.google.gson.internal.reflect.UnsafeReflectionAccessor:83 covered.
[[1;34mINFO[m] /tmp/v1/gson/src/test/java/com/google/gson/functional/CollectionTest.java
[[1;34mINFO[m] /tmp/v2/gson/src/test/java/com/google/gson/functional/CollectionTest.java
[[1;34mINFO[m] Build modified Tests /tmp/v2/gson/src/test/java/com/google/gson/functional/CollectionTest.java
[[1;34mINFO[m] /tmp/v1/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
[[1;34mINFO[m] /tmp/v2/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
[[1;34mINFO[m] Build modified Tests /tmp/v2/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
[[1;34mINFO[m] /tmp/v1/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java
[[1;34mINFO[m] /tmp/v2/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java
[[1;34mINFO[m] Build modified Tests /tmp/v2/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java
[[1;34mINFO[m] /tmp/v1/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java
[[1;34mINFO[m] /tmp/v2/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java
[[1;34mINFO[m] Build modified Tests /tmp/v2/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java
[[1;34mINFO[m] /tmp/v1/gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java
[[1;34mINFO[m] /tmp/v2/gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java
[[1;34mINFO[m] Build modified Tests /tmp/v2/gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java
[[1;34mINFO[m] /tmp/v1/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java
[[1;34mINFO[m] /tmp/v2/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java
[[1;34mINFO[m] Build modified Tests /tmp/v2/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java
[[1;34mINFO[m] /tmp/v1/gson/src/test/java/com/google/gson/internal/reflect/UnsafeReflectionAccessorTest.java
[[1;34mINFO[m] /tmp/v2/gson/src/test/java/com/google/gson/internal/reflect/UnsafeReflectionAccessorTest.java
[[1;34mINFO[m] Build modified Tests /tmp/v2/gson/src/test/java/com/google/gson/internal/reflect/UnsafeReflectionAccessorTest.java
[[1;34mINFO[m] Saving result in /tmp/v1/gson/testsThatExecuteTheChange.csv ...
[[1;34mINFO[m] com.google.gson.functional.CollectionTest;testNullsInListSerialization;testUserCollectionTypeAdapter;testCollectionOfStringsSerialization;testPriorityQueue;testCollectionOfBagOfPrimitivesSerialization
com.google.gson.functional.UncategorizedTest;testStaticFieldsAreNotSerialized;testReturningDerivedClassesDuringDeserialization
com.google.gson.functional.ObjectTest;testEmptyCollectionInAnObjectSerialization;testArrayOfObjectsAsFields;testJsonObjectSerialization;testInnerClassDeserialization;testNullFieldsDeserialization;testClassWithNoFieldsSerialization;testAnonymousLocalClassesCustomSerialization
com.google.gson.functional.JsonAdapterAnnotationOnClassesTest;testJsonAdapterInvoked;testRegisteredAdapterOverridesJsonAdapter;testRegisteredDeserializerOverridesJsonAdapter;testRegisteredSerializerOverridesJsonAdapter
com.google.gson.GsonTest;testClonedTypeAdapterFactoryListsAreIndependent
com.google.gson.functional.FieldNamingTest;testLowerCaseWithDashes;testUpperCamelCaseWithSpaces;testUpperCamelCase;testIdentity;testLowerCaseWithUnderscores
com.google.gson.functional.TypeAdapterPrecedenceTest;testStreamingHierarchicalFollowedByNonstreaming;testStreamingHierarchicalFollowedByNonstreamingHierarchical;testNonstreamingHierarchicalFollowedByNonstreaming;testNonstreamingFollowedByNonstreaming;testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter;testStreamingFollowedByStreaming;testStreamingFollowedByNonstreaming;testStreamingFollowedByNonstreamingHierarchical
com.google.gson.functional.MapAsArrayTypeAdapterTest;testTwoTypesCollapseToOneDeserialize;testMultipleEnableComplexKeyRegistrationHasNoEffect;testMapWithTypeVariableDeserialization;testSerializeComplexMapWithTypeAdapter;testMapWithTypeVariableSerialization
com.google.gson.functional.NullObjectAndFieldTest;testExplicitSerializationOfNulls;testCustomSerializationOfNulls;testAbsentJsonElementsAreSetToNull;testPrintPrintingObjectWithNulls;testNullWrappedPrimitiveMemberSerialization;testExplicitSerializationOfNullArrayMembers;testExplicitDeserializationOfNulls;testExplicitSerializationOfNullCollectionMembers;testExplicitSerializationOfNullStringMembers;testTopLevelNullObjectSerialization;testCustomTypeAdapterPassesNullSerialization;testPrintPrintingArraysWithNulls;testNullWrappedPrimitiveMemberDeserialization;testCustomTypeAdapterPassesNullDesrialization;testTopLevelNullObjectDeserialization
com.google.gson.functional.PrintFormattingTest;testJsonObjectWithNullValuesSerialized
com.google.gson.MixedStreamTest;testWriteLenient;testWriteClosed;testWriteHtmlSafe
com.google.gson.functional.CustomTypeAdaptersTest;testCustomTypeAdapterDoesNotAppliesToSubClasses;testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass;testCustomAdapterInvokedForCollectionElementDeserialization;testCustomAdapterInvokedForMapElementSerializationWithType;testCustomDeserializers;testRegisterHierarchyAdapterForDate;testCustomNestedDeserializers;testEnsureCustomSerializerNotInvokedForNullValues;testEnsureCustomDeserializerNotInvokedForNullValues;testCustomAdapterInvokedForCollectionElementSerializationWithType;testCustomAdapterInvokedForMapElementSerialization;testCustomSerializers;testCustomNestedSerializers;testCustomByteArraySerializer;testCustomSerializerInvokedForPrimitives;testCustomAdapterInvokedForCollectionElementSerialization;testCustomAdapterInvokedForMapElementDeserialization;testCustomByteArrayDeserializerAndInstanceCreator;testCustomDeserializerInvokedForPrimitives
com.google.gson.functional.NamingPolicyTest;testGsonWithNonDefaultFieldNamingPolicyDeserialiation;testGsonWithLowerCaseDotPolicyDeserialiation;testGsonWithLowerCaseUnderscorePolicySerialization;testGsonWithLowerCaseDotPolicySerialization;testGsonWithLowerCaseDashPolicyDeserialiation;testComplexFieldNameStrategy;testGsonWithSerializedNameFieldNamingPolicySerialization;testGsonWithUpperCamelCaseSpacesPolicySerialiation;testGsonWithNonDefaultFieldNamingPolicySerialization;testGsonWithLowerCaseDashPolicySerialization;testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization;testGsonWithLowerCaseUnderscorePolicyDeserialiation;testDeprecatedNamingStrategy;testGsonWithSerializedNameFieldNamingPolicyDeserialization;testGsonWithUpperCamelCaseSpacesPolicyDeserialiation
com.google.gson.functional.EnumTest;testEnumSubclassWithRegisteredTypeAdapter;testCollectionOfEnumsSerialization
com.google.gson.GsonBuilderTest;testTransientFieldExclusion;testCreatingMoreThanOnce;testExcludeFieldsWithModifiers
com.google.gson.functional.CircularReferenceTest;testSelfReferenceArrayFieldSerialization;testCircularSerialization;testSelfReferenceCustomHandlerSerialization
com.google.gson.functional.ArrayTest;testNullsInArrayWithSerializeNullPropertySetSerialization;testTopLevelArrayOfIntsDeserialization;testNullsInArraySerialization;testEmptyArrayDeserialization;testSingleStringArraySerialization
com.google.gson.functional.MapTest;testInterfaceTypeMap;testMapSerializationWithNullValueButSerializeNulls;testInterfaceTypeMapWithSerializer;testMapNamePromotionWithJsonElementReader;testGeneralMapField;testMapSerializationWithNullValuesSerialized;testMapSubclassDeserialization;testMapDeserializationEmpty;testCustomSerializerForSpecificMapType;testMapWithQuotes;testHashMapDeserialization;testMapSerialization;testSerializeMaps
com.google.gson.functional.ParameterizedTypesTest;testParameterizedTypeWithReaderDeserialization;testParameterizedTypeWithCustomSerializer;testParameterizedTypeDeserialization;testParameterizedTypesWithCustomDeserializer
com.google.gson.functional.CustomSerializerTest;testSerializerReturnsNull;testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances;testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances;testBaseClassSerializerInvokedForBaseClassFields;testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances
com.google.gson.functional.InstanceCreatorTest;testInstanceCreatorReturnsBaseType;testInstanceCreatorForCollectionType;testInstanceCreatorReturnsSubTypeForField;testInstanceCreatorReturnsSubTypeForTopLevelObject;testInstanceCreatorForParametrizedType
com.google.gson.functional.StreamingTypeAdaptersTest;testNullSafe;testSerializeWithCustomTypeAdapter;testDeserializeWithCustomTypeAdapter
com.google.gson.functional.SecurityTest;testNonExecutableJsonDeserialization;testJsonWithNonExectuableTokenWithRegularGsonDeserialization;testNonExecutableJsonSerialization;testJsonWithNonExectuableTokenSerialization;testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization
com.google.gson.functional.CustomDeserializerTest;testJsonTypeFieldBasedDeserialization;testCustomDeserializerReturnsNullForArrayElements;testCustomDeserializerReturnsNullForTopLevelObject;testCustomDeserializerReturnsNull;testCustomDeserializerReturnsNullForArrayElementsForArrayField
com.google.gson.functional.ExclusionStrategyFunctionalTest;testExclusionStrategyWithMode;testExcludeTopLevelClassSerialization;testExclusionStrategySerialization;testExcludeTopLevelClassSerializationDoesNotImpactDeserialization;testExclusionStrategySerializationDoesNotImpactDeserialization;testExcludeTopLevelClassDeserialization;testExclusionStrategySerializationDoesNotImpactSerialization;testExclusionStrategyDeserialization;testExcludeTopLevelClassDeserializationDoesNotImpactSerialization
com.google.gson.functional.EscapingTest;testGsonAcceptsEscapedAndNonEscapedJsonDeserialization
com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest;testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault;testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter;testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter;testClassAnnotationAdapterTakesPrecedenceOverDefault
com.google.gson.functional.VersioningTest;testVersionedClassesDeserialization;testVersionedClassesSerialization;testIgnoreLaterVersionClassSerialization;testVersionedGsonMixingSinceAndUntilDeserialization;testVersionedUntilSerialization;testVersionedGsonMixingSinceAndUntilSerialization;testVersionedUntilDeserialization;testIgnoreLaterVersionClassDeserialization;testVersionedGsonWithUnversionedClassesDeserialization;testVersionedGsonWithUnversionedClassesSerialization
com.google.gson.LongSerializationPolicyTest;testStringLongSerializationIntegration;testDefaultLongSerializationIntegration
com.google.gson.OverrideCoreTypeAdaptersTest;testOverrideStringAdapter;testOverrideWrapperBooleanAdapter;testOverridePrimitiveBooleanAdapter
com.google.gson.functional.FieldExclusionTest;testDefaultInnerClassExclusion;testDefaultNestedStaticClassIncluded;testInnerClassExclusion
com.google.gson.GsonTypeAdapterTest;testDeserializerForAbstractClass
com.google.gson.functional.TypeHierarchyAdapterTest;testRegisterSuperTypeFirst;testRegisterSubTypeFirstAllowed;testTypeHierarchy
com.google.gson.functional.ReadersWritersTest;testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls;testTopLevelNullObjectSerializationWithWriterAndSerializeNulls
com.google.gson.functional.PrimitiveTest;testLongAsStringSerialization;testNegativeInfinityFloatSerialization;testHtmlCharacterSerialization;testDoubleInfinitySerialization;testDeserializeJsonArrayAsBigInteger;testDeserializeJsonObjectAsInteger;testNegativeInfinitySerialization;testLongAsStringDeserialization;testFloatInfinitySerialization;testDoubleNaNSerialization;testFloatNaNSerialization
com.google.gson.functional.JavaUtilConcurrentAtomicTest;testAtomicLongWithStringSerializationPolicy;testAtomicLongArrayWithStringSerializationPolicy;testAtomicInteger
com.google.gson.functional.DefaultTypeAdaptersTest;testDefaultCalendarSerialization;testClassSerialization;testOverrideBigIntegerTypeAdapter;testClassDeserialization;testDefaultGregorianCalendarDeserialization;testDefaultDateSerializationUsingBuilder;testOverrideBigDecimalTypeAdapter;testDefaultGregorianCalendarSerialization;testDefaultCalendarDeserialization;testDateSerializationInCollection;testDefaultDateDeserializationUsingBuilder;testBigDecimalFieldDeserialization;testLocaleDeserializationWithLanguageCountryVariant;testDateSerializationWithPattern;testDateSerializationWithPatternNotOverridenByTypeAdapter;testPropertiesSerialization;testDateDeserializationWithPattern
com.google.gson.internal.sql.SqlTypesGsonTest;testTimestampSerialization;testSqlDateSerialization
com.google.gson.functional.PrimitiveCharacterTest;testPrimitiveCharacterAutoboxedSerialization
com.google.gson.functional.StringTest;testStringValueSerialization
com.google.gson.functional.RawSerializationTest;testThreeLevelParameterizedObject;testTwoLevelParameterizedObject
com.google.gson.functional.MoreSpecificTypeSerializationTest;testMapOfSubclassFields
com.google.gson.functional.JsonParserTest;testExtraCommasInArrays
com.google.gson.regression.JsonAdapterNullSafeTest;testNullSafeBugDeserialize
com.google.gson.JsonParserTest;testReadWriteTwoObjects
com.google.gson.JsonStreamParserTest;testNoSideEffectForHasNext
com.google.gson.internal.bind.JsonElementReaderTest;testStrings
com.google.gson.functional.JsonAdapterSerializerDeserializerTest;testJsonSerializerDeserializerBasedJsonAdapterOnFields
com.google.gson.functional.DelegateTypeAdapterTest;testDelegateInvoked
com.google.gson.functional.TreeTypeAdaptersTest;testDeserializeId
com.google.gson.CommentsTest;testParseComments
com.google.gson.functional.PrettyPrintingTest;testPrettyPrintArrayOfObjects;testMap
com.google.gson.functional.InheritanceTest;testBaseSerializedAsSub
com.google.gson.functional.JavaUtilTest;testCurrency
[[1;34mINFO[m] Writing Coverage in /tmp/v1/gson/testsThatExecuteTheChange_coverage.csv
[[1;34mINFO[m] com.google.gson.GsonBuilder;15;22

[[1;34mINFO[m] com.google.gson.internal.bind.TypeAdapters;8;35

[[1;34mINFO[m] com.google.gson.internal.reflect.UnsafeReflectionAccessor;1;1

[[1;34mINFO[m] total;24;58

[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] [1;32mBUILD SUCCESS[m
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] Total time:  50.168 s
[[1;34mINFO[m] Finished at: 2021-09-22T15:55:10+02:00
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[INFO] mvn -f /tmp/v1/gson clean test -DskipTests dependency:build-classpath --quiet -Dcobertura.skip=true -Dlicense.skip=true -Dfindbugs.skip=true -Danimal.sniffer.skip=true -Djacoco.skip=true -Dcheckstyle.skip=true -Dproguard.skip=true -Dmdep.outputFile=classpath -DskipITs=true -Drat.skip=true -Denforcer.skip=true -Dgpg.skip=true
[WARN] Maven will be executed in interactive mode, but no input stream has been configured for this MavenInvoker instance.
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.google.inject.internal.cglib.core.$ReflectUtils$1 (file:/usr/share/maven/lib/guice.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)
WARNING: Please consider reporting this to the maintainers of com.google.inject.internal.cglib.core.$ReflectUtils$1
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
[INFO] mvn -f /tmp/v2/gson/ clean test -DskipTests dependency:build-classpath --quiet -Dcobertura.skip=true -Dlicense.skip=true -Dfindbugs.skip=true -Danimal.sniffer.skip=true -Djacoco.skip=true -Dcheckstyle.skip=true -Dproguard.skip=true -Dmdep.outputFile=classpath -DskipITs=true -Drat.skip=true -Denforcer.skip=true -Dgpg.skip=true
[WARN] Maven will be executed in interactive mode, but no input stream has been configured for this MavenInvoker instance.
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.google.inject.internal.cglib.core.$ReflectUtils$1 (file:/usr/share/maven/lib/guice.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)
WARNING: Please consider reporting this to the maintainers of com.google.inject.internal.cglib.core.$ReflectUtils$1
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
[info] Run Instrumentation - Configuration{pathToFirstVersion='/tmp/v1/gson', pathToSecondVersion='/tmp/v2/gson/', pathToTestListAsCSV='/tmp/v1/gson/testsThatExecuteTheChange.csv', junit4=true, iterations=5, output='/tmp/v1/gson/diff-jjoules', pathToJSONDelta='deltas.json', pathToJSONDataV1='data_v1.json', pathToJSONDataV2='data_v2.json', diff='Only in /tmp/v2/gson/src/main/java/com/google/gson: DefaultDateTypeAdapter.java
diff -ru /tmp/v1/gson/src/main/java/com/google/gson/GsonBuilder.java /tmp/v2/gson/src/main/java/com/google/gson/GsonBuilder.java
--- /tmp/v1/gson/src/main/java/com/google/gson/GsonBuilder.java	2021-09-22 15:53:42.458033479 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/GsonBuilder.java	2021-09-22 14:19:41.284351820 +0200
@@ -17,6 +17,7 @@
 package com.google.gson;
 
 import java.lang.reflect.Type;
+import java.sql.Timestamp;
 import java.text.DateFormat;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -27,10 +28,8 @@
 
 import com.google.gson.internal.$Gson$Preconditions;
 import com.google.gson.internal.Excluder;
-import com.google.gson.internal.bind.DefaultDateTypeAdapter;
 import com.google.gson.internal.bind.TreeTypeAdapter;
 import com.google.gson.internal.bind.TypeAdapters;
-import com.google.gson.internal.sql.SqlTypesSupport;
 import com.google.gson.reflect.TypeToken;
 import com.google.gson.stream.JsonReader;
 
@@ -418,8 +417,8 @@
    * call this method or {@link #setDateFormat(int)} multiple times, but only the last invocation
    * will be used to decide the serialization format.
    *
-   * <p>The date format will be used to serialize and deserialize {@link java.util.Date} and in case
-   * the {@code java.sql} module is present, also {@link java.sql.Timestamp} and {@link java.sql.Date}.
+   * <p>The date format will be used to serialize and deserialize {@link java.util.Date}, {@link
+   * java.sql.Timestamp} and {@link java.sql.Date}.
    *
    * <p>Note that this pattern must abide by the convention provided by {@code SimpleDateFormat}
    * class. See the documentation in {@link java.text.SimpleDateFormat} for more information on
@@ -603,35 +602,26 @@
         this.factories, this.hierarchyFactories, factories);
   }
 
+  @SuppressWarnings("unchecked")
   private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle,
       List<TypeAdapterFactory> factories) {
-    TypeAdapterFactory dateAdapterFactory;
-    boolean sqlTypesSupported = SqlTypesSupport.SUPPORTS_SQL_TYPES;
-    TypeAdapterFactory sqlTimestampAdapterFactory = null;
-    TypeAdapterFactory sqlDateAdapterFactory = null;
-
-    if (datePattern != null && !datePattern.trim().isEmpty()) {
-      dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(datePattern);
-
-      if (sqlTypesSupported) {
-        sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(datePattern);
-        sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(datePattern);
-      }
+    DefaultDateTypeAdapter dateTypeAdapter;
+    TypeAdapter<Timestamp> timestampTypeAdapter;
+    TypeAdapter<java.sql.Date> javaSqlDateTypeAdapter;
+    if (datePattern != null && !"".equals(datePattern.trim())) {
+      dateTypeAdapter = new DefaultDateTypeAdapter(Date.class, datePattern);
+      timestampTypeAdapter = (TypeAdapter) new DefaultDateTypeAdapter(Timestamp.class, datePattern);
+      javaSqlDateTypeAdapter = (TypeAdapter) new DefaultDateTypeAdapter(java.sql.Date.class, datePattern);
     } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {
-      dateAdapterFactory = DefaultDateTypeAdapter.DateType.DATE.createAdapterFactory(dateStyle, timeStyle);
-
-      if (sqlTypesSupported) {
-        sqlTimestampAdapterFactory = SqlTypesSupport.TIMESTAMP_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);
-        sqlDateAdapterFactory = SqlTypesSupport.DATE_DATE_TYPE.createAdapterFactory(dateStyle, timeStyle);
-      }
+      dateTypeAdapter = new DefaultDateTypeAdapter(Date.class, dateStyle, timeStyle);
+      timestampTypeAdapter = (TypeAdapter) new DefaultDateTypeAdapter(Timestamp.class, dateStyle, timeStyle);
+      javaSqlDateTypeAdapter = (TypeAdapter) new DefaultDateTypeAdapter(java.sql.Date.class, dateStyle, timeStyle);
     } else {
       return;
     }
 
-    factories.add(dateAdapterFactory);
-    if (sqlTypesSupported) {
-      factories.add(sqlTimestampAdapterFactory);
-      factories.add(sqlDateAdapterFactory);
-    }
+    factories.add(TypeAdapters.newFactory(Date.class, dateTypeAdapter));
+    factories.add(TypeAdapters.newFactory(Timestamp.class, timestampTypeAdapter));
+    factories.add(TypeAdapters.newFactory(java.sql.Date.class, javaSqlDateTypeAdapter));
   }
 }
diff -ru /tmp/v1/gson/src/main/java/com/google/gson/Gson.java /tmp/v2/gson/src/main/java/com/google/gson/Gson.java
--- /tmp/v1/gson/src/main/java/com/google/gson/Gson.java	2021-09-22 15:53:42.458033479 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/Gson.java	2021-09-22 14:19:41.284351820 +0200
@@ -49,8 +49,9 @@
 import com.google.gson.internal.bind.MapTypeAdapterFactory;
 import com.google.gson.internal.bind.ObjectTypeAdapter;
 import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
+import com.google.gson.internal.bind.SqlDateTypeAdapter;
+import com.google.gson.internal.bind.TimeTypeAdapter;
 import com.google.gson.internal.bind.TypeAdapters;
-import com.google.gson.internal.sql.SqlTypesSupport;
 import com.google.gson.reflect.TypeToken;
 import com.google.gson.stream.JsonReader;
 import com.google.gson.stream.JsonToken;
@@ -261,13 +262,9 @@
     factories.add(TypeAdapters.BIT_SET_FACTORY);
     factories.add(DateTypeAdapter.FACTORY);
     factories.add(TypeAdapters.CALENDAR_FACTORY);
-
-    if (SqlTypesSupport.SUPPORTS_SQL_TYPES) {
-      factories.add(SqlTypesSupport.TIME_FACTORY);
-      factories.add(SqlTypesSupport.DATE_FACTORY);
-      factories.add(SqlTypesSupport.TIMESTAMP_FACTORY);
-    }
-
+    factories.add(TimeTypeAdapter.FACTORY);
+    factories.add(SqlDateTypeAdapter.FACTORY);
+    factories.add(TypeAdapters.TIMESTAMP_FACTORY);
     factories.add(ArrayTypeAdapter.FACTORY);
     factories.add(TypeAdapters.CLASS_FACTORY);
 
diff -ru /tmp/v1/gson/src/main/java/com/google/gson/internal/$Gson$Types.java /tmp/v2/gson/src/main/java/com/google/gson/internal/$Gson$Types.java
--- /tmp/v1/gson/src/main/java/com/google/gson/internal/$Gson$Types.java	2021-09-22 15:53:42.458033479 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/internal/$Gson$Types.java	2021-09-22 15:07:44.431593597 +0200
@@ -334,11 +334,11 @@
   }
 
   public static Type resolve(Type context, Class<?> contextRawType, Type toResolve) {
-    return resolve(context, contextRawType, toResolve, new HashSet<TypeVariable<?>>());
+    return resolve(context, contextRawType, toResolve, new HashSet<TypeVariable>());
   }
 
   private static Type resolve(Type context, Class<?> contextRawType, Type toResolve,
-                              Collection<TypeVariable<?>> visitedTypeVariables) {
+                              Collection<TypeVariable> visitedTypeVariables) {
     // this implementation is made a little more complicated in an attempt to avoid object-creation
     while (true) {
       if (toResolve instanceof TypeVariable) {
Only in /tmp/v1/gson/src/main/java/com/google/gson/internal/bind: DefaultDateTypeAdapter.java
Only in /tmp/v2/gson/src/main/java/com/google/gson/internal/bind: SqlDateTypeAdapter.java
Only in /tmp/v2/gson/src/main/java/com/google/gson/internal/bind: TimeTypeAdapter.java
diff -ru /tmp/v1/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java /tmp/v2/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java
--- /tmp/v1/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java	2021-09-22 15:53:42.458033479 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java	2021-09-22 15:00:38.850948950 +0200
@@ -23,10 +23,12 @@
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URL;
+import java.sql.Timestamp;
 import java.util.ArrayList;
 import java.util.BitSet;
 import java.util.Calendar;
 import java.util.Currency;
+import java.util.Date;
 import java.util.GregorianCalendar;
 import java.util.HashMap;
 import java.util.List;
@@ -404,7 +406,7 @@
       out.value(value);
     }
   };
-
+  
   public static final TypeAdapter<BigDecimal> BIG_DECIMAL = new TypeAdapter<BigDecimal>() {
     @Override public BigDecimal read(JsonReader in) throws IOException {
       if (in.peek() == JsonToken.NULL) {
@@ -422,7 +424,7 @@
       out.value(value);
     }
   };
-
+  
   public static final TypeAdapter<BigInteger> BIG_INTEGER = new TypeAdapter<BigInteger>() {
     @Override public BigInteger read(JsonReader in) throws IOException {
       if (in.peek() == JsonToken.NULL) {
@@ -567,6 +569,27 @@
   }.nullSafe();
   public static final TypeAdapterFactory CURRENCY_FACTORY = newFactory(Currency.class, CURRENCY);
 
+  public static final TypeAdapterFactory TIMESTAMP_FACTORY = new TypeAdapterFactory() {
+    @SuppressWarnings("unchecked") // we use a runtime check to make sure the 'T's equal
+    @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
+      if (typeToken.getRawType() != Timestamp.class) {
+        return null;
+      }
+
+      final TypeAdapter<Date> dateTypeAdapter = gson.getAdapter(Date.class);
+      return (TypeAdapter<T>) new TypeAdapter<Timestamp>() {
+        @Override public Timestamp read(JsonReader in) throws IOException {
+          Date date = dateTypeAdapter.read(in);
+          return date != null ? new Timestamp(date.getTime()) : null;
+        }
+
+        @Override public void write(JsonWriter out, Timestamp value) throws IOException {
+          dateTypeAdapter.write(out, value);
+        }
+      };
+    }
+  };
+
   public static final TypeAdapter<Calendar> CALENDAR = new TypeAdapter<Calendar>() {
     private static final String YEAR = "year";
     private static final String MONTH = "month";
diff -ru /tmp/v1/gson/src/main/java/com/google/gson/internal/reflect/UnsafeReflectionAccessor.java /tmp/v2/gson/src/main/java/com/google/gson/internal/reflect/UnsafeReflectionAccessor.java
--- /tmp/v1/gson/src/main/java/com/google/gson/internal/reflect/UnsafeReflectionAccessor.java	2021-09-22 15:53:42.458033479 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/internal/reflect/UnsafeReflectionAccessor.java	2021-09-22 15:53:42.466033626 +0200
@@ -79,7 +79,7 @@
   private static Field getOverrideField() {
     try {
       return AccessibleObject.class.getDeclaredField("override");
-    } catch (NoSuchFieldException e) {
+    } catch (Exception e) {
       return null;
     }
   }
Only in /tmp/v1/gson/src/main/java/com/google/gson/internal: sql
Only in /tmp/v2/gson/src/test/java/com/google/gson: DefaultDateTypeAdapterTest.java
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/functional/CollectionTest.java /tmp/v2/gson/src/test/java/com/google/gson/functional/CollectionTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/functional/CollectionTest.java	2021-09-22 15:53:42.462033552 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/functional/CollectionTest.java	2021-09-22 15:07:44.431593597 +0200
@@ -37,6 +37,7 @@
 import com.google.gson.JsonPrimitive;
 import com.google.gson.JsonSerializationContext;
 import com.google.gson.JsonSerializer;
+import com.google.gson.common.MoreAsserts;
 import com.google.gson.common.TestTypes.BagOfPrimitives;
 import com.google.gson.reflect.TypeToken;
 
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java /tmp/v2/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java	2021-09-22 15:53:42.462033552 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java	2021-09-22 14:31:11.551503512 +0200
@@ -69,14 +69,12 @@
 public class DefaultTypeAdaptersTest extends TestCase {
   private Gson gson;
   private TimeZone oldTimeZone;
-  private Locale oldLocale;
 
   @Override
   protected void setUp() throws Exception {
     super.setUp();
     this.oldTimeZone = TimeZone.getDefault();
     TimeZone.setDefault(TimeZone.getTimeZone("America/Los_Angeles"));
-    this.oldLocale = Locale.getDefault();
     Locale.setDefault(Locale.US);
     gson = new Gson();
   }
@@ -84,7 +82,6 @@
   @Override
   protected void tearDown() throws Exception {
     TimeZone.setDefault(oldTimeZone);
-    Locale.setDefault(oldLocale);
     super.tearDown();
   }
 
@@ -149,7 +146,7 @@
     URI target = gson.fromJson(json, URI.class);
     assertEquals(uriValue, target.toASCIIString());
   }
-
+  
   public void testNullSerialization() throws Exception {
     testNullSerializationAndDeserialization(Boolean.class);
     testNullSerializationAndDeserialization(Byte.class);
@@ -178,15 +175,14 @@
     testNullSerializationAndDeserialization(Date.class);
     testNullSerializationAndDeserialization(GregorianCalendar.class);
     testNullSerializationAndDeserialization(Calendar.class);
+    testNullSerializationAndDeserialization(Time.class);
+    testNullSerializationAndDeserialization(Timestamp.class);
+    testNullSerializationAndDeserialization(java.sql.Date.class);
     testNullSerializationAndDeserialization(Enum.class);
     testNullSerializationAndDeserialization(Class.class);
   }
 
   private void testNullSerializationAndDeserialization(Class<?> c) {
-    testNullSerializationAndDeserialization(gson, c);
-  }
-
-  public static void testNullSerializationAndDeserialization(Gson gson, Class<?> c) {
     assertEquals("null", gson.toJson(null, c));
     assertEquals(null, gson.fromJson("null", c));
   }
@@ -273,7 +269,7 @@
     ClassWithBigInteger actual = gson.fromJson(json, ClassWithBigInteger.class);
     assertEquals(expected.value, actual.value);
   }
-
+  
   public void testOverrideBigIntegerTypeAdapter() throws Exception {
     gson = new GsonBuilder()
         .registerTypeAdapter(BigInteger.class, new NumberAsStringAdapter(BigInteger.class))
@@ -351,19 +347,60 @@
   // Date can not directly be compared with another instance since the deserialization loses the
   // millisecond portion.
   @SuppressWarnings("deprecation")
-  public static void assertEqualsDate(Date date, int year, int month, int day) {
+  private void assertEqualsDate(Date date, int year, int month, int day) {
     assertEquals(year-1900, date.getYear());
     assertEquals(month, date.getMonth());
     assertEquals(day, date.getDate());
   }
 
   @SuppressWarnings("deprecation")
-  public static void assertEqualsTime(Date date, int hours, int minutes, int seconds) {
+  private void assertEqualsTime(Date date, int hours, int minutes, int seconds) {
     assertEquals(hours, date.getHours());
     assertEquals(minutes, date.getMinutes());
     assertEquals(seconds, date.getSeconds());
   }
 
+  public void testDefaultJavaSqlDateSerialization() {
+    java.sql.Date instant = new java.sql.Date(1259875082000L);
+    String json = gson.toJson(instant);
+    assertEquals("\"Dec 3, 2009\"", json);
+  }
+
+  public void testDefaultJavaSqlDateDeserialization() {
+    String json = "'Dec 3, 2009'";
+    java.sql.Date extracted = gson.fromJson(json, java.sql.Date.class);
+    assertEqualsDate(extracted, 2009, 11, 3);
+  }
+
+  public void testDefaultJavaSqlTimestampSerialization() {
+    Timestamp now = new java.sql.Timestamp(1259875082000L);
+    String json = gson.toJson(now);
+    if (JavaVersion.isJava9OrLater()) {
+      assertEquals("\"Dec 3, 2009, 1:18:02 PM\"", json);
+    } else {
+      assertEquals("\"Dec 3, 2009 1:18:02 PM\"", json);
+    }
+  }
+
+  public void testDefaultJavaSqlTimestampDeserialization() {
+    String json = "'Dec 3, 2009 1:18:02 PM'";
+    Timestamp extracted = gson.fromJson(json, Timestamp.class);
+    assertEqualsDate(extracted, 2009, 11, 3);
+    assertEqualsTime(extracted, 13, 18, 2);
+  }
+
+  public void testDefaultJavaSqlTimeSerialization() {
+    Time now = new Time(1259875082000L);
+    String json = gson.toJson(now);
+    assertEquals("\"01:18:02 PM\"", json);
+  }
+
+  public void testDefaultJavaSqlTimeDeserialization() {
+    String json = "'1:18:02 PM'";
+    Time extracted = gson.fromJson(json, Time.class);
+    assertEqualsTime(extracted, 13, 18, 2);
+  }
+
   public void testDefaultDateSerializationUsingBuilder() throws Exception {
     Gson gson = new GsonBuilder().create();
     Date now = new Date(1315806903103L);
@@ -484,6 +521,42 @@
     } finally {
       TimeZone.setDefault(defaultTimeZone);
       Locale.setDefault(defaultLocale);
+    }
+  }
+
+  // http://code.google.com/p/google-gson/issues/detail?id=230
+  public void testTimestampSerialization() throws Exception {
+    TimeZone defaultTimeZone = TimeZone.getDefault();
+    TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
+    Locale defaultLocale = Locale.getDefault();
+    Locale.setDefault(Locale.US);
+    try {
+      Timestamp timestamp = new Timestamp(0L);
+      Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
+      String json = gson.toJson(timestamp, Timestamp.class);
+      assertEquals("\"1970-01-01\"", json);
+      assertEquals(0, gson.fromJson("\"1970-01-01\"", Timestamp.class).getTime());
+    } finally {
+      TimeZone.setDefault(defaultTimeZone);
+      Locale.setDefault(defaultLocale);
+    }
+  }
+
+  // http://code.google.com/p/google-gson/issues/detail?id=230
+  public void testSqlDateSerialization() throws Exception {
+    TimeZone defaultTimeZone = TimeZone.getDefault();
+    TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
+    Locale defaultLocale = Locale.getDefault();
+    Locale.setDefault(Locale.US);
+    try {
+      java.sql.Date sqlDate = new java.sql.Date(0L);
+      Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
+      String json = gson.toJson(sqlDate, Timestamp.class);
+      assertEquals("\"1970-01-01\"", json);
+      assertEquals(0, gson.fromJson("\"1970-01-01\"", java.sql.Date.class).getTime());
+    } finally {
+      TimeZone.setDefault(defaultTimeZone);
+      Locale.setDefault(defaultLocale);
     }
   }
 
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java /tmp/v2/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java	2021-09-22 15:53:42.462033552 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java	2021-09-22 14:19:41.284351820 +0200
@@ -172,7 +172,6 @@
     int numClasses;
   }
 
-  @SafeVarargs
   private static <T> List<T> createList(T ...items) {
     return Arrays.asList(items);
   }
Only in /tmp/v1/gson/src/test/java/com/google/gson/internal/bind: DefaultDateTypeAdapterTest.java
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java /tmp/v2/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java	2021-09-22 15:53:42.462033552 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java	2021-09-22 14:19:41.284351820 +0200
@@ -36,7 +36,7 @@
 
   @SuppressWarnings("unused")
   private static class Foo1<A> {
-    public Foo2<? extends A> foo2;
+	public Foo2<? extends A> foo2;
   }
   @SuppressWarnings("unused")
   private static class Foo2<B> {
@@ -48,7 +48,6 @@
    */
 
   public void testRecursiveResolveSimple() {
-    @SuppressWarnings("rawtypes")
     TypeAdapter<Foo1> adapter = new Gson().getAdapter(Foo1.class);
     assertNotNull(adapter);
   }
@@ -63,7 +62,6 @@
   }
 
   public void testIssue440WeakReference() throws Exception {
-    @SuppressWarnings("rawtypes")
     TypeAdapter<WeakReference> adapter = new Gson().getAdapter(WeakReference.class);
     assertNotNull(adapter);
   }
@@ -107,13 +105,11 @@
   }
 
   public void testRecursiveTypeVariablesResolve1() throws Exception {
-    @SuppressWarnings("rawtypes")
     TypeAdapter<TestType> adapter = new Gson().getAdapter(TestType.class);
     assertNotNull(adapter);
   }
 
   public void testRecursiveTypeVariablesResolve12() throws Exception {
-    @SuppressWarnings("rawtypes")
     TypeAdapter<TestType2> adapter = new Gson().getAdapter(TestType2.class);
     assertNotNull(adapter);
   }
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java /tmp/v2/gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java	2021-09-22 15:53:42.462033552 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java	2021-09-22 14:19:41.284351820 +0200
@@ -280,7 +280,6 @@
     }
   }
 
-  @SafeVarargs
   private <T> void assertIterationOrder(Iterable<T> actual, T... expected) {
     ArrayList<T> actualList = new ArrayList<T>();
     for (T t : actual) {
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java /tmp/v2/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java	2021-09-22 15:53:42.462033552 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java	2021-09-22 14:19:41.284351820 +0200
@@ -140,7 +140,6 @@
     MoreAsserts.assertEqualsAndHashCode(map1, map2);
   }
 
-  @SafeVarargs
   private <T> void assertIterationOrder(Iterable<T> actual, T... expected) {
     ArrayList<T> actualList = new ArrayList<T>();
     for (T t : actual) {
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/internal/reflect/UnsafeReflectionAccessorTest.java /tmp/v2/gson/src/test/java/com/google/gson/internal/reflect/UnsafeReflectionAccessorTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/internal/reflect/UnsafeReflectionAccessorTest.java	2021-09-22 15:53:42.462033552 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/internal/reflect/UnsafeReflectionAccessorTest.java	2021-09-22 15:53:42.466033626 +0200
@@ -15,10 +15,12 @@
  */
 package com.google.gson.internal.reflect;
 
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
 import java.lang.reflect.Field;
+import java.security.Permission;
 
 import org.junit.Test;
 
@@ -41,6 +43,30 @@
     }
   }
 
+  @Test
+  public void testMakeAccessibleWithRestrictiveSecurityManager() throws Exception {
+    final Permission accessDeclaredMembers = new RuntimePermission("accessDeclaredMembers");
+    final SecurityManager original = System.getSecurityManager();
+    SecurityManager restrictiveManager = new SecurityManager() {
+      @Override
+      public void checkPermission(Permission perm) {
+        if (accessDeclaredMembers.equals(perm)) {
+          throw new SecurityException("nope");
+        }
+      }
+    };
+    System.setSecurityManager(restrictiveManager);
+
+    try {
+      UnsafeReflectionAccessor accessor = new UnsafeReflectionAccessor();
+      Field field = ClassWithPrivateFinalFields.class.getDeclaredField("a");
+      assertFalse("override field should have been inaccessible", accessor.makeAccessibleWithUnsafe(field));
+      accessor.makeAccessible(field);
+    } finally {
+      System.setSecurityManager(original);
+    }
+  }
+
   @SuppressWarnings("unused")
   private static final class ClassWithPrivateFinalFields {
     private final String a;
Only in /tmp/v1/gson/src/test/java/com/google/gson/internal: sql
', pathToJSONDeltaOmega='deltaOmega.json', pathToRepositoryV1='/tmp/v1', pathToRepositoryV2='/tmp/v2', pathToJSONConsideredTestMethodNames='consideredTestMethods.json', pathToExecLinesAdditions='exec_additions.json', pathToExecLinesDeletions='exec_deletions.json', pathToJSONSuspiciousV1='suspicious_v1.json', pathToJSONSuspiciousV2='suspicious_v2.json', pathToReport='.github/workflows/template.md', classpathV1=[/home/benjamin/.m2/repository/junit/junit/4.12/junit-4.12.jar, /home/benjamin/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar], classpathV2=[/home/benjamin/.m2/repository/junit/junit/4.12/junit-4.12.jar, /home/benjamin/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar], classpathV1AsString='/home/benjamin/.m2/repository/junit/junit/4.12/junit-4.12.jar:/home/benjamin/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar', classpathV2AsString='/home/benjamin/.m2/repository/junit/junit/4.12/junit-4.12.jar:/home/benjamin/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar', testsList={com.google.gson.functional.CollectionTest=[testNullsInListSerialization, testUserCollectionTypeAdapter, testCollectionOfStringsSerialization, testPriorityQueue, testCollectionOfBagOfPrimitivesSerialization], com.google.gson.functional.ParameterizedTypesTest=[testParameterizedTypeWithReaderDeserialization, testParameterizedTypeWithCustomSerializer, testParameterizedTypeDeserialization, testParameterizedTypesWithCustomDeserializer], com.google.gson.functional.UncategorizedTest=[testStaticFieldsAreNotSerialized, testReturningDerivedClassesDuringDeserialization], com.google.gson.functional.DelegateTypeAdapterTest=[testDelegateInvoked], com.google.gson.functional.CustomSerializerTest=[testSerializerReturnsNull, testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances, testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances, testBaseClassSerializerInvokedForBaseClassFields, testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances], com.google.gson.functional.InstanceCreatorTest=[testInstanceCreatorReturnsBaseType, testInstanceCreatorForCollectionType, testInstanceCreatorReturnsSubTypeForField, testInstanceCreatorReturnsSubTypeForTopLevelObject, testInstanceCreatorForParametrizedType], com.google.gson.functional.ObjectTest=[testEmptyCollectionInAnObjectSerialization, testArrayOfObjectsAsFields, testJsonObjectSerialization, testInnerClassDeserialization, testNullFieldsDeserialization, testClassWithNoFieldsSerialization, testAnonymousLocalClassesCustomSerialization], com.google.gson.functional.StreamingTypeAdaptersTest=[testNullSafe, testSerializeWithCustomTypeAdapter, testDeserializeWithCustomTypeAdapter], com.google.gson.functional.SecurityTest=[testNonExecutableJsonDeserialization, testJsonWithNonExectuableTokenWithRegularGsonDeserialization, testNonExecutableJsonSerialization, testJsonWithNonExectuableTokenSerialization, testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization], com.google.gson.functional.PrimitiveCharacterTest=[testPrimitiveCharacterAutoboxedSerialization], com.google.gson.JsonParserTest=[testReadWriteTwoObjects], com.google.gson.functional.JsonAdapterAnnotationOnClassesTest=[testJsonAdapterInvoked, testRegisteredAdapterOverridesJsonAdapter, testRegisteredDeserializerOverridesJsonAdapter, testRegisteredSerializerOverridesJsonAdapter], com.google.gson.JsonStreamParserTest=[testNoSideEffectForHasNext], com.google.gson.GsonTest=[testClonedTypeAdapterFactoryListsAreIndependent], com.google.gson.functional.StringTest=[testStringValueSerialization], com.google.gson.functional.FieldNamingTest=[testLowerCaseWithDashes, testUpperCamelCaseWithSpaces, testUpperCamelCase, testIdentity, testLowerCaseWithUnderscores], com.google.gson.functional.CustomDeserializerTest=[testJsonTypeFieldBasedDeserialization, testCustomDeserializerReturnsNullForArrayElements, testCustomDeserializerReturnsNullForTopLevelObject, testCustomDeserializerReturnsNull, testCustomDeserializerReturnsNullForArrayElementsForArrayField], com.google.gson.functional.ExclusionStrategyFunctionalTest=[testExclusionStrategyWithMode, testExcludeTopLevelClassSerialization, testExclusionStrategySerialization, testExcludeTopLevelClassSerializationDoesNotImpactDeserialization, testExclusionStrategySerializationDoesNotImpactDeserialization, testExcludeTopLevelClassDeserialization, testExclusionStrategySerializationDoesNotImpactSerialization, testExclusionStrategyDeserialization, testExcludeTopLevelClassDeserializationDoesNotImpactSerialization], com.google.gson.functional.TypeAdapterPrecedenceTest=[testStreamingHierarchicalFollowedByNonstreaming, testStreamingHierarchicalFollowedByNonstreamingHierarchical, testNonstreamingHierarchicalFollowedByNonstreaming, testNonstreamingFollowedByNonstreaming, testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter, testStreamingFollowedByStreaming, testStreamingFollowedByNonstreaming, testStreamingFollowedByNonstreamingHierarchical], com.google.gson.functional.RawSerializationTest=[testThreeLevelParameterizedObject, testTwoLevelParameterizedObject], com.google.gson.functional.MapAsArrayTypeAdapterTest=[testTwoTypesCollapseToOneDeserialize, testMultipleEnableComplexKeyRegistrationHasNoEffect, testMapWithTypeVariableDeserialization, testSerializeComplexMapWithTypeAdapter, testMapWithTypeVariableSerialization], com.google.gson.functional.TreeTypeAdaptersTest=[testDeserializeId], com.google.gson.internal.bind.JsonElementReaderTest=[testStrings], com.google.gson.functional.NullObjectAndFieldTest=[testExplicitSerializationOfNulls, testCustomSerializationOfNulls, testAbsentJsonElementsAreSetToNull, testPrintPrintingObjectWithNulls, testNullWrappedPrimitiveMemberSerialization, testExplicitSerializationOfNullArrayMembers, testExplicitDeserializationOfNulls, testExplicitSerializationOfNullCollectionMembers, testExplicitSerializationOfNullStringMembers, testTopLevelNullObjectSerialization, testCustomTypeAdapterPassesNullSerialization, testPrintPrintingArraysWithNulls, testNullWrappedPrimitiveMemberDeserialization, testCustomTypeAdapterPassesNullDesrialization, testTopLevelNullObjectDeserialization], com.google.gson.functional.EscapingTest=[testGsonAcceptsEscapedAndNonEscapedJsonDeserialization], com.google.gson.CommentsTest=[testParseComments], com.google.gson.functional.PrettyPrintingTest=[testPrettyPrintArrayOfObjects, testMap], com.google.gson.functional.InheritanceTest=[testBaseSerializedAsSub], com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest=[testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault, testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter, testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter, testClassAnnotationAdapterTakesPrecedenceOverDefault], com.google.gson.functional.VersioningTest=[testVersionedClassesDeserialization, testVersionedClassesSerialization, testIgnoreLaterVersionClassSerialization, testVersionedGsonMixingSinceAndUntilDeserialization, testVersionedUntilSerialization, testVersionedGsonMixingSinceAndUntilSerialization, testVersionedUntilDeserialization, testIgnoreLaterVersionClassDeserialization, testVersionedGsonWithUnversionedClassesDeserialization, testVersionedGsonWithUnversionedClassesSerialization], com.google.gson.LongSerializationPolicyTest=[testStringLongSerializationIntegration, testDefaultLongSerializationIntegration], com.google.gson.functional.MoreSpecificTypeSerializationTest=[testMapOfSubclassFields], com.google.gson.functional.JsonParserTest=[testExtraCommasInArrays], com.google.gson.functional.PrintFormattingTest=[testJsonObjectWithNullValuesSerialized], com.google.gson.OverrideCoreTypeAdaptersTest=[testOverrideStringAdapter, testOverrideWrapperBooleanAdapter, testOverridePrimitiveBooleanAdapter], com.google.gson.functional.FieldExclusionTest=[testDefaultInnerClassExclusion, testDefaultNestedStaticClassIncluded, testInnerClassExclusion], com.google.gson.GsonTypeAdapterTest=[testDeserializerForAbstractClass], com.google.gson.regression.JsonAdapterNullSafeTest=[testNullSafeBugDeserialize], com.google.gson.MixedStreamTest=[testWriteLenient, testWriteClosed, testWriteHtmlSafe], com.google.gson.functional.CustomTypeAdaptersTest=[testCustomTypeAdapterDoesNotAppliesToSubClasses, testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass, testCustomAdapterInvokedForCollectionElementDeserialization, testCustomAdapterInvokedForMapElementSerializationWithType, testCustomDeserializers, testRegisterHierarchyAdapterForDate, testCustomNestedDeserializers, testEnsureCustomSerializerNotInvokedForNullValues, testEnsureCustomDeserializerNotInvokedForNullValues, testCustomAdapterInvokedForCollectionElementSerializationWithType, testCustomAdapterInvokedForMapElementSerialization, testCustomSerializers, testCustomNestedSerializers, testCustomByteArraySerializer, testCustomSerializerInvokedForPrimitives, testCustomAdapterInvokedForCollectionElementSerialization, testCustomAdapterInvokedForMapElementDeserialization, testCustomByteArrayDeserializerAndInstanceCreator, testCustomDeserializerInvokedForPrimitives], com.google.gson.functional.NamingPolicyTest=[testGsonWithNonDefaultFieldNamingPolicyDeserialiation, testGsonWithLowerCaseDotPolicyDeserialiation, testGsonWithLowerCaseUnderscorePolicySerialization, testGsonWithLowerCaseDotPolicySerialization, testGsonWithLowerCaseDashPolicyDeserialiation, testComplexFieldNameStrategy, testGsonWithSerializedNameFieldNamingPolicySerialization, testGsonWithUpperCamelCaseSpacesPolicySerialiation, testGsonWithNonDefaultFieldNamingPolicySerialization, testGsonWithLowerCaseDashPolicySerialization, testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization, testGsonWithLowerCaseUnderscorePolicyDeserialiation, testDeprecatedNamingStrategy, testGsonWithSerializedNameFieldNamingPolicyDeserialization, testGsonWithUpperCamelCaseSpacesPolicyDeserialiation], com.google.gson.functional.EnumTest=[testEnumSubclassWithRegisteredTypeAdapter, testCollectionOfEnumsSerialization], com.google.gson.functional.TypeHierarchyAdapterTest=[testRegisterSuperTypeFirst, testRegisterSubTypeFirstAllowed, testTypeHierarchy], com.google.gson.functional.ReadersWritersTest=[testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls, testTopLevelNullObjectSerializationWithWriterAndSerializeNulls], com.google.gson.GsonBuilderTest=[testTransientFieldExclusion, testCreatingMoreThanOnce, testExcludeFieldsWithModifiers], com.google.gson.functional.CircularReferenceTest=[testSelfReferenceArrayFieldSerialization, testCircularSerialization, testSelfReferenceCustomHandlerSerialization], com.google.gson.functional.ArrayTest=[testNullsInArrayWithSerializeNullPropertySetSerialization, testTopLevelArrayOfIntsDeserialization, testNullsInArraySerialization, testEmptyArrayDeserialization, testSingleStringArraySerialization], com.google.gson.functional.MapTest=[testInterfaceTypeMap, testMapSerializationWithNullValueButSerializeNulls, testInterfaceTypeMapWithSerializer, testMapNamePromotionWithJsonElementReader, testGeneralMapField, testMapSerializationWithNullValuesSerialized, testMapSubclassDeserialization, testMapDeserializationEmpty, testCustomSerializerForSpecificMapType, testMapWithQuotes, testHashMapDeserialization, testMapSerialization, testSerializeMaps], com.google.gson.functional.JsonAdapterSerializerDeserializerTest=[testJsonSerializerDeserializerBasedJsonAdapterOnFields], com.google.gson.functional.JavaUtilTest=[testCurrency], com.google.gson.functional.PrimitiveTest=[testLongAsStringSerialization, testNegativeInfinityFloatSerialization, testHtmlCharacterSerialization, testDoubleInfinitySerialization, testDeserializeJsonArrayAsBigInteger, testDeserializeJsonObjectAsInteger, testNegativeInfinitySerialization, testLongAsStringDeserialization, testFloatInfinitySerialization, testDoubleNaNSerialization, testFloatNaNSerialization], com.google.gson.functional.JavaUtilConcurrentAtomicTest=[testAtomicLongWithStringSerializationPolicy, testAtomicLongArrayWithStringSerializationPolicy, testAtomicInteger], com.google.gson.functional.DefaultTypeAdaptersTest=[testDefaultCalendarSerialization, testClassSerialization, testOverrideBigIntegerTypeAdapter, testClassDeserialization, testDefaultGregorianCalendarDeserialization, testDefaultDateSerializationUsingBuilder, testOverrideBigDecimalTypeAdapter, testDefaultGregorianCalendarSerialization, testDefaultCalendarDeserialization, testDateSerializationInCollection, testDefaultDateDeserializationUsingBuilder, testBigDecimalFieldDeserialization, testLocaleDeserializationWithLanguageCountryVariant, testDateSerializationWithPattern, testDateSerializationWithPatternNotOverridenByTypeAdapter, testPropertiesSerialization, testDateDeserializationWithPattern], com.google.gson.internal.sql.SqlTypesGsonTest=[testTimestampSerialization, testSqlDateSerialization]}, dataV1=null, dataV2=null, deltas=null, consideredTestsNames=null, execLinesAdditions=null, execLinesDeletions=null, deltaOmega=null, scorePerLineV1=null, scorePerLineV2=null, ownConsumptionReports={selection={package-0/uncore|uJ=22217, instructions=519233, package-0/dram|uJ=85823877, uncore|uJ=22217, cycles=4645590, dram|mW=1652, cache-misses=111833, package|uJ=816351792, branch-misses=0, package-0/core|mW=13471, device|uJ=902175669, core|uJ=699812906, psys|mW=42642, psys|uJ=2215210636, package-0|uJ=816351792, duration|ns=51948090076, branches=540938, core|mW=13471, device|mW=17366, package-0/dram|mW=1652, dram|uJ=85823877, package-0/core|uJ=699812906, cache-reference=359852, package-0/uncore|mW=0, package-0|mW=15714, package|mW=15714, uncore|mW=0}}, reportEnum=NONE}
[info] Instrument version before commit...
[info] Run on /tmp/v1/gson
[WARNING] warning: @SafeVarargs annotation cannot be applied to non-final instance method assertIterationOrder at /tmp/v1/gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java:284
[WARNING] warning: @SafeVarargs annotation cannot be applied to non-final instance method assertIterationOrder at /tmp/v1/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java:144
[INFO] fr.davidson.diff.jjoules.instrumentation.process.junit4.JJoulesProcessor
[INFO] 54 instrumented test classes have been printed!
[INFO] Injecting JUnit-Jjoules in /tmp/v1/gson/pom.xml
[INFO] Output new POM file in /tmp/v1/gson/pom.xml
[info] Instrument version after commit...
[info] Run on /tmp/v2/gson/
[INFO] fr.davidson.diff.jjoules.instrumentation.process.junit4.JJoulesProcessor
