diff -ru /tmp/v1/gson/src/main/java/com/google/gson/internal/$Gson$Types.java /tmp/v2/gson/src/main/java/com/google/gson/internal/$Gson$Types.java
--- /tmp/v1/gson/src/main/java/com/google/gson/internal/$Gson$Types.java	2021-09-24 16:14:28.186645072 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/internal/$Gson$Types.java	2021-09-24 15:10:07.863784941 +0200
@@ -339,13 +339,13 @@
   }
 
   public static Type resolve(Type context, Class<?> contextRawType, Type toResolve) {
-    return resolve(context, contextRawType, toResolve, new HashMap<TypeVariable, Type>());
+    return resolve(context, contextRawType, toResolve, new HashMap<TypeVariable<?>, Type>());
   }
 
   private static Type resolve(Type context, Class<?> contextRawType, Type toResolve,
-                              Map<TypeVariable, Type> visitedTypeVariables) {
+                              Map<TypeVariable<?>, Type> visitedTypeVariables) {
     // this implementation is made a little more complicated in an attempt to avoid object-creation
-    TypeVariable resolving = null;
+    TypeVariable<?> resolving = null;
     while (true) {
       if (toResolve instanceof TypeVariable) {
         TypeVariable<?> typeVariable = (TypeVariable<?>) toResolve;
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/functional/ReusedTypeVariablesFullyResolveTest.java /tmp/v2/gson/src/test/java/com/google/gson/functional/ReusedTypeVariablesFullyResolveTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/functional/ReusedTypeVariablesFullyResolveTest.java	2021-09-24 16:14:28.186645072 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/functional/ReusedTypeVariablesFullyResolveTest.java	2021-09-24 15:10:07.863784941 +0200
@@ -1,16 +1,17 @@
 package com.google.gson.functional;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import org.junit.Before;
 import org.junit.Test;
-
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.Set;
 
-import static org.junit.Assert.*;
-
 /**
  * This test covers the scenario described in #1390 where a type variable needs to be used
  * by a type definition multiple times.  Both type variable references should resolve to the
@@ -18,37 +19,37 @@
  */
 public class ReusedTypeVariablesFullyResolveTest {
 
-    private Gson gson;
+  private Gson gson;
 
-    @Before
-    public void setUp() {
-        gson = new GsonBuilder().create();
-    }
-
-    @SuppressWarnings("ConstantConditions") // The instances were being unmarshaled as Strings instead of TestEnums
-    @Test
-    public void testGenericsPreservation() {
-        TestEnumSetCollection withSet = gson.fromJson("{\"collection\":[\"ONE\",\"THREE\"]}", TestEnumSetCollection.class);
-        Iterator<TestEnum> iterator = withSet.collection.iterator();
-        assertNotNull(withSet);
-        assertNotNull(withSet.collection);
-        assertEquals(2, withSet.collection.size());
-        TestEnum first = iterator.next();
-        TestEnum second = iterator.next();
-
-        assertTrue(first instanceof TestEnum);
-        assertTrue(second instanceof TestEnum);
-    }
-
-    enum TestEnum { ONE, TWO, THREE }
-
-    private static class TestEnumSetCollection extends SetCollection<TestEnum> {}
-
-    private static class SetCollection<T> extends BaseCollection<T, Set<T>> {}
-
-    private static class BaseCollection<U, C extends Collection<U>>
-    {
-        public C collection;
-    }
+  @Before
+  public void setUp() {
+    gson = new GsonBuilder().create();
+  }
+
+  @SuppressWarnings("ConstantConditions") // The instances were being unmarshaled as Strings instead of TestEnums
+  @Test
+  public void testGenericsPreservation() {
+    TestEnumSetCollection withSet = gson.fromJson("{\"collection\":[\"ONE\",\"THREE\"]}", TestEnumSetCollection.class);
+    Iterator<TestEnum> iterator = withSet.collection.iterator();
+    assertNotNull(withSet);
+    assertNotNull(withSet.collection);
+    assertEquals(2, withSet.collection.size());
+    TestEnum first = iterator.next();
+    TestEnum second = iterator.next();
+
+    assertTrue(first instanceof TestEnum);
+    assertTrue(second instanceof TestEnum);
+  }
+
+  enum TestEnum { ONE, TWO, THREE }
+
+  private static class TestEnumSetCollection extends SetCollection<TestEnum> {}
+
+  private static class SetCollection<T> extends BaseCollection<T, Set<T>> {}
+
+  private static class BaseCollection<U, C extends Collection<U>>
+  {
+    public C collection;
+  }
 
 }
