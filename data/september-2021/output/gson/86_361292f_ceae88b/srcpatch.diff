diff -ru /tmp/v1/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java /tmp/v2/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java
--- /tmp/v1/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	2021-09-22 16:06:16.604584640 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java	2021-09-22 16:06:16.616584661 +0200
@@ -41,52 +41,11 @@
  * @author Inderjeet Singh
  * @author Joel Leitch
  */
-final class DefaultDateTypeAdapter<T extends Date> extends TypeAdapter<T> {
-  private static final String SIMPLE_NAME = "DefaultDateTypeAdapter";
-
-  static abstract class DateType<T extends Date> {
-    private DateType() {
-    }
-
-    public static final DateType<Date> DATE = new DateType<Date>() {
-      @Override
-      protected Date deserialize(Date date) {
-        return date;
-      }
-    };
-    public static final DateType<java.sql.Date> SQL_DATE = new DateType<java.sql.Date>() {
-      @Override
-      protected java.sql.Date deserialize(Date date) {
-        return new java.sql.Date(date.getTime());
-      }
-    };
-    public static final DateType<Timestamp> SQL_TIMESTAMP = new DateType<Timestamp>() {
-      @Override
-      protected Timestamp deserialize(Date date) {
-        return new Timestamp(date.getTime());
-      }
-    };
-
-    protected abstract T deserialize(Date date);
-
-    public DefaultDateTypeAdapter<T> createAdapter(String datePattern) {
-      return new DefaultDateTypeAdapter<T>(this, datePattern);
-    }
-
-    public DefaultDateTypeAdapter<T> createAdapter(int style) {
-      return new DefaultDateTypeAdapter<T>(this, style);
-    }
+final class DefaultDateTypeAdapter extends TypeAdapter<Date> {
 
-    public DefaultDateTypeAdapter<T> createAdapter(int dateStyle, int timeStyle) {
-      return new DefaultDateTypeAdapter<T>(this, dateStyle, timeStyle);
-    }
-
-    public DefaultDateTypeAdapter<T> createDefaultsAdapter() {
-      return new DefaultDateTypeAdapter<T>(this, DateFormat.DEFAULT, DateFormat.DEFAULT);
-    }
-  }
+  private static final String SIMPLE_NAME = "DefaultDateTypeAdapter";
 
-  private final DateType<T> dateType;
+  private final Class<? extends Date> dateType;
 
   /**
    * List of 1 or more different date formats used for de-serialization attempts.
@@ -94,7 +53,18 @@
    */
   private final List<DateFormat> dateFormats = new ArrayList<DateFormat>();
 
-  private DefaultDateTypeAdapter(DateType<T> dateType, String datePattern) {
+  DefaultDateTypeAdapter(Class<? extends Date> dateType) {
+    this.dateType = verifyDateType(dateType);
+    dateFormats.add(DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US));
+    if (!Locale.getDefault().equals(Locale.US)) {
+      dateFormats.add(DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT));
+    }
+    if (JavaVersion.isJava9OrLater()) {
+      dateFormats.add(PreJava9DateFormatProvider.getUSDateTimeFormat(DateFormat.DEFAULT, DateFormat.DEFAULT));
+    }
+  }
+
+  DefaultDateTypeAdapter(Class<? extends Date> dateType, String datePattern) {
     this.dateType = verifyDateType(dateType);
     dateFormats.add(new SimpleDateFormat(datePattern, Locale.US));
     if (!Locale.getDefault().equals(Locale.US)) {
@@ -102,7 +72,7 @@
     }
   }
 
-  private DefaultDateTypeAdapter(DateType<T> dateType, int style) {
+  DefaultDateTypeAdapter(Class<? extends Date> dateType, int style) {
     this.dateType = verifyDateType(dateType);
     dateFormats.add(DateFormat.getDateInstance(style, Locale.US));
     if (!Locale.getDefault().equals(Locale.US)) {
@@ -113,7 +83,11 @@
     }
   }
 
-  private DefaultDateTypeAdapter(DateType<T> dateType, int dateStyle, int timeStyle) {
+  public DefaultDateTypeAdapter(int dateStyle, int timeStyle) {
+    this(Date.class, dateStyle, timeStyle);
+  }
+
+  public DefaultDateTypeAdapter(Class<? extends Date> dateType, int dateStyle, int timeStyle) {
     this.dateType = verifyDateType(dateType);
     dateFormats.add(DateFormat.getDateTimeInstance(dateStyle, timeStyle, Locale.US));
     if (!Locale.getDefault().equals(Locale.US)) {
@@ -124,9 +98,9 @@
     }
   }
 
-  private static <T extends Date> DateType<T> verifyDateType(DateType<T> dateType) {
-    if (dateType == null) {
-      throw new NullPointerException("dateType == null");
+  private static Class<? extends Date> verifyDateType(Class<? extends Date> dateType) {
+    if ( dateType != Date.class && dateType != java.sql.Date.class && dateType != Timestamp.class ) {
+      throw new IllegalArgumentException("Date type must be one of " + Date.class + ", " + Timestamp.class + ", or " + java.sql.Date.class + " but was " + dateType);
     }
     return dateType;
   }
@@ -146,13 +120,22 @@
   }
 
   @Override
-  public T read(JsonReader in) throws IOException {
+  public Date read(JsonReader in) throws IOException {
     if (in.peek() == JsonToken.NULL) {
       in.nextNull();
       return null;
     }
     Date date = deserializeToDate(in.nextString());
-    return dateType.deserialize(date);
+    if (dateType == Date.class) {
+      return date;
+    } else if (dateType == Timestamp.class) {
+      return new Timestamp(date.getTime());
+    } else if (dateType == java.sql.Date.class) {
+      return new java.sql.Date(date.getTime());
+    } else {
+      // This must never happen: dateType is guarded in the primary constructor
+      throw new AssertionError();
+    }
   }
 
   private Date deserializeToDate(String s) {
diff -ru /tmp/v1/gson/src/main/java/com/google/gson/GsonBuilder.java /tmp/v2/gson/src/main/java/com/google/gson/GsonBuilder.java
--- /tmp/v1/gson/src/main/java/com/google/gson/GsonBuilder.java	2021-09-22 16:06:16.608584647 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/GsonBuilder.java	2021-09-22 16:06:16.616584661 +0200
@@ -602,19 +602,20 @@
         this.factories, this.hierarchyFactories, factories);
   }
 
+  @SuppressWarnings("unchecked")
   private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle,
       List<TypeAdapterFactory> factories) {
-    DefaultDateTypeAdapter<Date> dateTypeAdapter;
+    DefaultDateTypeAdapter dateTypeAdapter;
     TypeAdapter<Timestamp> timestampTypeAdapter;
     TypeAdapter<java.sql.Date> javaSqlDateTypeAdapter;
     if (datePattern != null && !"".equals(datePattern.trim())) {
-      dateTypeAdapter = DefaultDateTypeAdapter.DateType.DATE.createAdapter(datePattern);
-      timestampTypeAdapter = DefaultDateTypeAdapter.DateType.SQL_TIMESTAMP.createAdapter(datePattern);
-      javaSqlDateTypeAdapter = DefaultDateTypeAdapter.DateType.SQL_DATE.createAdapter(datePattern);
+      dateTypeAdapter = new DefaultDateTypeAdapter(Date.class, datePattern);
+      timestampTypeAdapter = (TypeAdapter) new DefaultDateTypeAdapter(Timestamp.class, datePattern);
+      javaSqlDateTypeAdapter = (TypeAdapter) new DefaultDateTypeAdapter(java.sql.Date.class, datePattern);
     } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {
-      dateTypeAdapter = DefaultDateTypeAdapter.DateType.DATE.createAdapter(dateStyle, timeStyle);
-      timestampTypeAdapter = DefaultDateTypeAdapter.DateType.SQL_TIMESTAMP.createAdapter(dateStyle, timeStyle);
-      javaSqlDateTypeAdapter = DefaultDateTypeAdapter.DateType.SQL_DATE.createAdapter(dateStyle, timeStyle);
+      dateTypeAdapter = new DefaultDateTypeAdapter(Date.class, dateStyle, timeStyle);
+      timestampTypeAdapter = (TypeAdapter) new DefaultDateTypeAdapter(Timestamp.class, dateStyle, timeStyle);
+      javaSqlDateTypeAdapter = (TypeAdapter) new DefaultDateTypeAdapter(java.sql.Date.class, dateStyle, timeStyle);
     } else {
       return;
     }
diff -ru /tmp/v1/gson/src/main/java/com/google/gson/internal/$Gson$Types.java /tmp/v2/gson/src/main/java/com/google/gson/internal/$Gson$Types.java
--- /tmp/v1/gson/src/main/java/com/google/gson/internal/$Gson$Types.java	2021-09-22 16:06:16.608584647 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/internal/$Gson$Types.java	2021-09-22 16:06:16.620584668 +0200
@@ -334,11 +334,11 @@
   }
 
   public static Type resolve(Type context, Class<?> contextRawType, Type toResolve) {
-    return resolve(context, contextRawType, toResolve, new HashSet<TypeVariable<?>>());
+    return resolve(context, contextRawType, toResolve, new HashSet<TypeVariable>());
   }
 
   private static Type resolve(Type context, Class<?> contextRawType, Type toResolve,
-                              Collection<TypeVariable<?>> visitedTypeVariables) {
+                              Collection<TypeVariable> visitedTypeVariables) {
     // this implementation is made a little more complicated in an attempt to avoid object-creation
     while (true) {
       if (toResolve instanceof TypeVariable) {
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java /tmp/v2/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java	2021-09-22 16:06:16.608584647 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java	2021-09-22 16:06:16.620584668 +0200
@@ -23,7 +23,6 @@
 import java.util.Locale;
 import java.util.TimeZone;
 
-import com.google.gson.DefaultDateTypeAdapter.DateType;
 import com.google.gson.internal.JavaVersion;
 
 import junit.framework.TestCase;
@@ -53,18 +52,18 @@
       String afterYearLongSep = JavaVersion.isJava9OrLater() ? " at " : " ";
       String utcFull = JavaVersion.isJava9OrLater() ? "Coordinated Universal Time" : "UTC";
       assertFormatted(String.format("Jan 1, 1970%s12:00:00 AM", afterYearSep),
-          DateType.DATE.createDefaultsAdapter());
-      assertFormatted("1/1/70", DateType.DATE.createAdapter(DateFormat.SHORT));
-      assertFormatted("Jan 1, 1970", DateType.DATE.createAdapter(DateFormat.MEDIUM));
-      assertFormatted("January 1, 1970", DateType.DATE.createAdapter(DateFormat.LONG));
+              new DefaultDateTypeAdapter(Date.class));
+      assertFormatted("1/1/70", new DefaultDateTypeAdapter(Date.class, DateFormat.SHORT));
+      assertFormatted("Jan 1, 1970", new DefaultDateTypeAdapter(Date.class, DateFormat.MEDIUM));
+      assertFormatted("January 1, 1970", new DefaultDateTypeAdapter(Date.class, DateFormat.LONG));
       assertFormatted(String.format("1/1/70%s12:00 AM", afterYearSep),
-          DateType.DATE.createAdapter(DateFormat.SHORT, DateFormat.SHORT));
+          new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));
       assertFormatted(String.format("Jan 1, 1970%s12:00:00 AM", afterYearSep),
-          DateType.DATE.createAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));
+          new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));
       assertFormatted(String.format("January 1, 1970%s12:00:00 AM UTC", afterYearLongSep),
-          DateType.DATE.createAdapter(DateFormat.LONG, DateFormat.LONG));
+          new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));
       assertFormatted(String.format("Thursday, January 1, 1970%s12:00:00 AM %s", afterYearLongSep, utcFull),
-          DateType.DATE.createAdapter(DateFormat.FULL, DateFormat.FULL));
+          new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));
     } finally {
       TimeZone.setDefault(defaultTimeZone);
       Locale.setDefault(defaultLocale);
@@ -79,21 +78,21 @@
     try {
       String afterYearSep = JavaVersion.isJava9OrLater() ? " à " : " ";
       assertParsed(String.format("1 janv. 1970%s00:00:00", afterYearSep),
-          DateType.DATE.createDefaultsAdapter());
-      assertParsed("01/01/70", DateType.DATE.createAdapter(DateFormat.SHORT));
-      assertParsed("1 janv. 1970", DateType.DATE.createAdapter(DateFormat.MEDIUM));
-      assertParsed("1 janvier 1970", DateType.DATE.createAdapter(DateFormat.LONG));
+              new DefaultDateTypeAdapter(Date.class));
+      assertParsed("01/01/70", new DefaultDateTypeAdapter(Date.class, DateFormat.SHORT));
+      assertParsed("1 janv. 1970", new DefaultDateTypeAdapter(Date.class, DateFormat.MEDIUM));
+      assertParsed("1 janvier 1970", new DefaultDateTypeAdapter(Date.class, DateFormat.LONG));
       assertParsed("01/01/70 00:00",
-          DateType.DATE.createAdapter(DateFormat.SHORT, DateFormat.SHORT));
+          new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));
       assertParsed(String.format("1 janv. 1970%s00:00:00", afterYearSep),
-          DateType.DATE.createAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));
+          new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));
       assertParsed(String.format("1 janvier 1970%s00:00:00 UTC", afterYearSep),
-          DateType.DATE.createAdapter(DateFormat.LONG, DateFormat.LONG));
+          new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));
       assertParsed(JavaVersion.isJava9OrLater() ? (JavaVersion.getMajorJavaVersion() <11 ?
                       "jeudi 1 janvier 1970 à 00:00:00 Coordinated Universal Time" :
                       "jeudi 1 janvier 1970 à 00:00:00 Temps universel coordonné") :
                       "jeudi 1 janvier 1970 00 h 00 UTC",
-          DateType.DATE.createAdapter(DateFormat.FULL, DateFormat.FULL));
+          new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));
     } finally {
       TimeZone.setDefault(defaultTimeZone);
       Locale.setDefault(defaultLocale);
@@ -106,18 +105,18 @@
     Locale defaultLocale = Locale.getDefault();
     Locale.setDefault(Locale.US);
     try {
-      assertParsed("Jan 1, 1970 0:00:00 AM", DateType.DATE.createDefaultsAdapter());
-      assertParsed("1/1/70", DateType.DATE.createAdapter(DateFormat.SHORT));
-      assertParsed("Jan 1, 1970", DateType.DATE.createAdapter(DateFormat.MEDIUM));
-      assertParsed("January 1, 1970", DateType.DATE.createAdapter(DateFormat.LONG));
+      assertParsed("Jan 1, 1970 0:00:00 AM", new DefaultDateTypeAdapter(Date.class));
+      assertParsed("1/1/70", new DefaultDateTypeAdapter(Date.class, DateFormat.SHORT));
+      assertParsed("Jan 1, 1970", new DefaultDateTypeAdapter(Date.class, DateFormat.MEDIUM));
+      assertParsed("January 1, 1970", new DefaultDateTypeAdapter(Date.class, DateFormat.LONG));
       assertParsed("1/1/70 0:00 AM",
-          DateType.DATE.createAdapter(DateFormat.SHORT, DateFormat.SHORT));
+          new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));
       assertParsed("Jan 1, 1970 0:00:00 AM",
-          DateType.DATE.createAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));
+          new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));
       assertParsed("January 1, 1970 0:00:00 AM UTC",
-          DateType.DATE.createAdapter(DateFormat.LONG, DateFormat.LONG));
+          new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));
       assertParsed("Thursday, January 1, 1970 0:00:00 AM UTC",
-          DateType.DATE.createAdapter(DateFormat.FULL, DateFormat.FULL));
+          new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));
     } finally {
       TimeZone.setDefault(defaultTimeZone);
       Locale.setDefault(defaultLocale);
@@ -132,8 +131,8 @@
     try {
       String afterYearSep = JavaVersion.isJava9OrLater() ? ", " : " ";
       assertFormatted(String.format("Dec 31, 1969%s4:00:00 PM", afterYearSep),
-          DateType.DATE.createDefaultsAdapter());
-      assertParsed("Dec 31, 1969 4:00:00 PM", DateType.DATE.createDefaultsAdapter());
+              new DefaultDateTypeAdapter(Date.class));
+      assertParsed("Dec 31, 1969 4:00:00 PM", new DefaultDateTypeAdapter(Date.class));
     } finally {
       TimeZone.setDefault(defaultTimeZone);
       Locale.setDefault(defaultLocale);
@@ -141,7 +140,7 @@
   }
 
   public void testDateDeserializationISO8601() throws Exception {
-    DefaultDateTypeAdapter<Date> adapter = DateType.DATE.createDefaultsAdapter();
+    DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter(Date.class);
     assertParsed("1970-01-01T00:00:00.000Z", adapter);
     assertParsed("1970-01-01T00:00Z", adapter);
     assertParsed("1970-01-01T00:00:00+00:00", adapter);
@@ -151,7 +150,7 @@
   
   public void testDateSerialization() throws Exception {
     int dateStyle = DateFormat.LONG;
-    DefaultDateTypeAdapter<Date> dateTypeAdapter = DateType.DATE.createAdapter(dateStyle);
+    DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(Date.class, dateStyle);
     DateFormat formatter = DateFormat.getDateInstance(dateStyle, Locale.US);
     Date currentDate = new Date();
 
@@ -161,7 +160,7 @@
 
   public void testDatePattern() throws Exception {
     String pattern = "yyyy-MM-dd";
-    DefaultDateTypeAdapter<Date> dateTypeAdapter = DateType.DATE.createAdapter(pattern);
+    DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(Date.class, pattern);
     DateFormat formatter = new SimpleDateFormat(pattern);
     Date currentDate = new Date();
 
@@ -169,32 +168,33 @@
     assertEquals(toLiteral(formatter.format(currentDate)), dateString);
   }
 
+  @SuppressWarnings("unused")
   public void testInvalidDatePattern() throws Exception {
     try {
-      DateType.DATE.createAdapter("I am a bad Date pattern....");
+      new DefaultDateTypeAdapter(Date.class, "I am a bad Date pattern....");
       fail("Invalid date pattern should fail.");
     } catch (IllegalArgumentException expected) { }
   }
 
   public void testNullValue() throws Exception {
-    DefaultDateTypeAdapter<Date> adapter = DateType.DATE.createDefaultsAdapter();
+    DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter(Date.class);
     assertNull(adapter.fromJson("null"));
     assertEquals("null", adapter.toJson(null));
   }
 
   public void testUnexpectedToken() throws Exception {
     try {
-      DefaultDateTypeAdapter<Date> adapter = DateType.DATE.createDefaultsAdapter();
+      DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter(Date.class);
       adapter.fromJson("{}");
       fail("Unexpected token should fail.");
     } catch (IllegalStateException expected) { }
   }
 
-  private void assertFormatted(String formatted, DefaultDateTypeAdapter<Date> adapter) {
+  private void assertFormatted(String formatted, DefaultDateTypeAdapter adapter) {
     assertEquals(toLiteral(formatted), adapter.toJson(new Date(0)));
   }
 
-  private void assertParsed(String date, DefaultDateTypeAdapter<Date> adapter) throws IOException {
+  private void assertParsed(String date, DefaultDateTypeAdapter adapter) throws IOException {
     assertEquals(date, new Date(0), adapter.fromJson(toLiteral(date)));
     assertEquals("ISO 8601", new Date(0), adapter.fromJson(toLiteral("1970-01-01T00:00:00Z")));
   }
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/functional/CollectionTest.java /tmp/v2/gson/src/test/java/com/google/gson/functional/CollectionTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/functional/CollectionTest.java	2021-09-22 16:06:16.608584647 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/functional/CollectionTest.java	2021-09-22 16:06:16.620584668 +0200
@@ -37,6 +37,7 @@
 import com.google.gson.JsonPrimitive;
 import com.google.gson.JsonSerializationContext;
 import com.google.gson.JsonSerializer;
+import com.google.gson.common.MoreAsserts;
 import com.google.gson.common.TestTypes.BagOfPrimitives;
 import com.google.gson.reflect.TypeToken;
 
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java /tmp/v2/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java	2021-09-22 16:06:16.612584654 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java	2021-09-22 16:06:16.624584675 +0200
@@ -172,7 +172,6 @@
     int numClasses;
   }
 
-  @SafeVarargs
   private static <T> List<T> createList(T ...items) {
     return Arrays.asList(items);
   }
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java /tmp/v2/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java	2021-09-22 16:06:16.612584654 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java	2021-09-22 16:06:16.624584675 +0200
@@ -36,7 +36,7 @@
 
   @SuppressWarnings("unused")
   private static class Foo1<A> {
-    public Foo2<? extends A> foo2;
+	public Foo2<? extends A> foo2;
   }
   @SuppressWarnings("unused")
   private static class Foo2<B> {
@@ -48,7 +48,6 @@
    */
 
   public void testRecursiveResolveSimple() {
-    @SuppressWarnings("rawtypes")
     TypeAdapter<Foo1> adapter = new Gson().getAdapter(Foo1.class);
     assertNotNull(adapter);
   }
@@ -63,7 +62,6 @@
   }
 
   public void testIssue440WeakReference() throws Exception {
-    @SuppressWarnings("rawtypes")
     TypeAdapter<WeakReference> adapter = new Gson().getAdapter(WeakReference.class);
     assertNotNull(adapter);
   }
@@ -107,13 +105,11 @@
   }
 
   public void testRecursiveTypeVariablesResolve1() throws Exception {
-    @SuppressWarnings("rawtypes")
     TypeAdapter<TestType> adapter = new Gson().getAdapter(TestType.class);
     assertNotNull(adapter);
   }
 
   public void testRecursiveTypeVariablesResolve12() throws Exception {
-    @SuppressWarnings("rawtypes")
     TypeAdapter<TestType2> adapter = new Gson().getAdapter(TestType2.class);
     assertNotNull(adapter);
   }
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java /tmp/v2/gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java	2021-09-22 16:06:16.612584654 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java	2021-09-22 16:06:16.624584675 +0200
@@ -280,7 +280,6 @@
     }
   }
 
-  @SafeVarargs
   private <T> void assertIterationOrder(Iterable<T> actual, T... expected) {
     ArrayList<T> actualList = new ArrayList<T>();
     for (T t : actual) {
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java /tmp/v2/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java	2021-09-22 16:06:16.612584654 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java	2021-09-22 16:06:16.624584675 +0200
@@ -140,7 +140,6 @@
     MoreAsserts.assertEqualsAndHashCode(map1, map2);
   }
 
-  @SafeVarargs
   private <T> void assertIterationOrder(Iterable<T> actual, T... expected) {
     ArrayList<T> actualList = new ArrayList<T>();
     for (T t : actual) {
