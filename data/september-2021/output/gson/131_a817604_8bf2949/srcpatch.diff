diff -ru /tmp/v1/gson/src/main/java/com/google/gson/JsonObject.java /tmp/v2/gson/src/main/java/com/google/gson/JsonObject.java
--- /tmp/v1/gson/src/main/java/com/google/gson/JsonObject.java	2021-09-30 21:15:43.467197650 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/JsonObject.java	2021-09-30 11:43:34.414619237 +0200
@@ -55,10 +55,7 @@
    * @param value the member object.
    */
   public void add(String property, JsonElement value) {
-    if (value == null) {
-      value = JsonNull.INSTANCE;
-    }
-    members.put(property, value);
+    members.put(property, value == null ? JsonNull.INSTANCE : value);
   }
 
   /**
@@ -80,7 +77,7 @@
    * @param value the string value associated with the member.
    */
   public void addProperty(String property, String value) {
-    add(property, createJsonElement(value));
+    add(property, value == null ? JsonNull.INSTANCE : new JsonPrimitive(value));
   }
 
   /**
@@ -91,7 +88,7 @@
    * @param value the number value associated with the member.
    */
   public void addProperty(String property, Number value) {
-    add(property, createJsonElement(value));
+    add(property, value == null ? JsonNull.INSTANCE : new JsonPrimitive(value));
   }
 
   /**
@@ -102,7 +99,7 @@
    * @param value the number value associated with the member.
    */
   public void addProperty(String property, Boolean value) {
-    add(property, createJsonElement(value));
+    add(property, value == null ? JsonNull.INSTANCE : new JsonPrimitive(value));
   }
 
   /**
@@ -113,17 +110,7 @@
    * @param value the number value associated with the member.
    */
   public void addProperty(String property, Character value) {
-    add(property, createJsonElement(value));
-  }
-
-  /**
-   * Creates the proper {@link JsonElement} object from the given {@code value} object.
-   *
-   * @param value the object to generate the {@link JsonElement} for
-   * @return a {@link JsonPrimitive} if the {@code value} is not null, otherwise a {@link JsonNull}
-   */
-  private JsonElement createJsonElement(Object value) {
-    return value == null ? JsonNull.INSTANCE : new JsonPrimitive(value);
+    add(property, value == null ? JsonNull.INSTANCE : new JsonPrimitive(value));
   }
 
   /**
diff -ru /tmp/v1/gson/src/main/java/com/google/gson/JsonPrimitive.java /tmp/v2/gson/src/main/java/com/google/gson/JsonPrimitive.java
--- /tmp/v1/gson/src/main/java/com/google/gson/JsonPrimitive.java	2021-09-30 21:15:43.467197650 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/JsonPrimitive.java	2021-09-30 21:09:46.706109000 +0200
@@ -16,10 +16,10 @@
 
 package com.google.gson;
 
+import com.google.gson.internal.$Gson$Preconditions;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 
-import com.google.gson.internal.$Gson$Preconditions;
 import com.google.gson.internal.LazilyParsedNumber;
 
 /**
@@ -32,11 +32,7 @@
  */
 public final class JsonPrimitive extends JsonElement {
 
-  private static final Class<?>[] PRIMITIVE_TYPES = { int.class, long.class, short.class,
-      float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class,
-      Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };
-
-  private Object value;
+  private final Object value;
 
   /**
    * Create a primitive containing a boolean value.
@@ -44,7 +40,7 @@
    * @param bool the value to create the primitive with.
    */
   public JsonPrimitive(Boolean bool) {
-    setValue(bool);
+    value = $Gson$Preconditions.checkNotNull(bool);
   }
 
   /**
@@ -53,7 +49,7 @@
    * @param number the value to create the primitive with.
    */
   public JsonPrimitive(Number number) {
-    setValue(number);
+    value = $Gson$Preconditions.checkNotNull(number);
   }
 
   /**
@@ -62,7 +58,7 @@
    * @param string the value to create the primitive with.
    */
   public JsonPrimitive(String string) {
-    setValue(string);
+    value = $Gson$Preconditions.checkNotNull(string);
   }
 
   /**
@@ -72,17 +68,9 @@
    * @param c the value to create the primitive with.
    */
   public JsonPrimitive(Character c) {
-    setValue(c);
-  }
-
-  /**
-   * Create a primitive using the specified Object. It must be an instance of {@link Number}, a
-   * Java primitive type, or a String.
-   *
-   * @param primitive the value to create the primitive with.
-   */
-  JsonPrimitive(Object primitive) {
-    setValue(primitive);
+    // convert characters to strings since in JSON, characters are represented as a single
+    // character string
+    value = $Gson$Preconditions.checkNotNull(c).toString();
   }
 
   /**
@@ -94,19 +82,6 @@
     return this;
   }
 
-  void setValue(Object primitive) {
-    if (primitive instanceof Character) {
-      // convert characters to strings since in JSON, characters are represented as a single
-      // character string
-      char c = ((Character) primitive).charValue();
-      this.value = String.valueOf(c);
-    } else {
-      $Gson$Preconditions.checkArgument(primitive instanceof Number
-              || isPrimitiveOrString(primitive));
-      this.value = primitive;
-    }
-  }
-
   /**
    * Check whether this primitive contains a boolean value.
    *
@@ -274,20 +249,6 @@
     return getAsString().charAt(0);
   }
 
-  private static boolean isPrimitiveOrString(Object target) {
-    if (target instanceof String) {
-      return true;
-    }
-
-    Class<?> classOfPrimitive = target.getClass();
-    for (Class<?> standardPrimitive : PRIMITIVE_TYPES) {
-      if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {
-        return true;
-      }
-    }
-    return false;
-  }
-
   @Override
   public int hashCode() {
     if (value == null) {
