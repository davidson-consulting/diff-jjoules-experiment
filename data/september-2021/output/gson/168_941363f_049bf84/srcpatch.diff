diff -ru /tmp/v1/gson/src/main/java/com/google/gson/internal/reflect/PreJava9ReflectionAccessor.java /tmp/v2/gson/src/main/java/com/google/gson/internal/reflect/PreJava9ReflectionAccessor.java
--- /tmp/v1/gson/src/main/java/com/google/gson/internal/reflect/PreJava9ReflectionAccessor.java	2021-10-01 00:04:55.410776403 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/internal/reflect/PreJava9ReflectionAccessor.java	2021-09-30 11:43:34.418619203 +0200
@@ -25,12 +25,9 @@
  */
 final class PreJava9ReflectionAccessor extends ReflectionAccessor {
 
-  /**
-   * {@inheritDoc}
-   */
+  /** {@inheritDoc} */
   @Override
   public void makeAccessible(AccessibleObject ao) {
     ao.setAccessible(true);
   }
-
 }
diff -ru /tmp/v1/gson/src/main/java/com/google/gson/internal/reflect/UnsafeReflectionAccessor.java /tmp/v2/gson/src/main/java/com/google/gson/internal/reflect/UnsafeReflectionAccessor.java
--- /tmp/v1/gson/src/main/java/com/google/gson/internal/reflect/UnsafeReflectionAccessor.java	2021-10-01 00:04:55.410776403 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/internal/reflect/UnsafeReflectionAccessor.java	2021-09-30 17:29:27.714043864 +0200
@@ -15,10 +15,11 @@
  */
 package com.google.gson.internal.reflect;
 
-import sun.misc.Unsafe;
-
 import java.lang.reflect.AccessibleObject;
 import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+
+import com.google.gson.JsonIOException;
 
 /**
  * An implementation of {@link ReflectionAccessor} based on {@link Unsafe}.
@@ -26,29 +27,51 @@
  * NOTE: This implementation is designed for Java 9. Although it should work with earlier Java releases, it is better to
  * use {@link PreJava9ReflectionAccessor} for them.
  */
+@SuppressWarnings({"unchecked", "rawtypes"})
 final class UnsafeReflectionAccessor extends ReflectionAccessor {
 
-  private final Unsafe theUnsafe = getUnsafeInstance();
+  private static Class unsafeClass;
+  private final Object theUnsafe = getUnsafeInstance();
   private final Field overrideField = getOverrideField();
 
-  /**
-   * {@inheritDoc}
-   */
+  /** {@inheritDoc} */
   @Override
   public void makeAccessible(AccessibleObject ao) {
+    boolean success = makeAccessibleWithUnsafe(ao);
+    if (!success) {
+      try {
+        // unsafe couldn't be found, so try using accessible anyway
+        ao.setAccessible(true);
+      } catch (SecurityException e) {
+        throw new JsonIOException("Gson couldn't modify fields for " + ao
+          + "\nand sun.misc.Unsafe not found.\nEither write a custom type adapter,"
+          + " or make fields accessible, or include sun.misc.Unsafe.", e);
+      }
+    }
+  }
+
+  // Visible for testing only
+  boolean makeAccessibleWithUnsafe(AccessibleObject ao) {
     if (theUnsafe != null && overrideField != null) {
-      long overrideOffset = theUnsafe.objectFieldOffset(overrideField);
-      theUnsafe.putBoolean(ao, overrideOffset, true);
+      try {
+        Method method = unsafeClass.getMethod("objectFieldOffset", Field.class);
+        long overrideOffset = (Long) method.invoke(theUnsafe, overrideField);  // long overrideOffset = theUnsafe.objectFieldOffset(overrideField);
+        Method putBooleanMethod = unsafeClass.getMethod("putBoolean",  Object.class, long.class, boolean.class);
+        putBooleanMethod.invoke(theUnsafe, ao, overrideOffset, true); // theUnsafe.putBoolean(ao, overrideOffset, true);
+        return true;
+      } catch (Exception ignored) { // do nothing
+      }
     }
+    return false;
   }
 
-  private static Unsafe getUnsafeInstance() {
+  private static Object getUnsafeInstance() {
     try {
-      Field unsafeField = Unsafe.class.getDeclaredField("theUnsafe");
+      unsafeClass = Class.forName("sun.misc.Unsafe");
+      Field unsafeField = unsafeClass.getDeclaredField("theUnsafe");
       unsafeField.setAccessible(true);
-      return (Unsafe) unsafeField.get(null);
+      return unsafeField.get(null);
     } catch (Exception e) {
-      e.printStackTrace();
       return null;
     }
   }
@@ -57,7 +80,6 @@
     try {
       return AccessibleObject.class.getDeclaredField("override");
     } catch (NoSuchFieldException e) {
-      e.printStackTrace();
       return null;
     }
   }
Only in /tmp/v2/gson/src/test/java/com/google/gson/internal: reflect
