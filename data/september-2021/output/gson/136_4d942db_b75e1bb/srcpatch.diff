diff -ru /tmp/v1/gson/src/main/java/com/google/gson/annotations/SerializedName.java /tmp/v2/gson/src/main/java/com/google/gson/annotations/SerializedName.java
--- /tmp/v1/gson/src/main/java/com/google/gson/annotations/SerializedName.java	2021-09-30 22:16:53.140655183 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/annotations/SerializedName.java	2021-09-30 18:31:50.070875251 +0200
@@ -28,7 +28,7 @@
  *
  * <p>This annotation will override any {@link com.google.gson.FieldNamingPolicy}, including
  * the default field naming policy, that may have been set on the {@link com.google.gson.Gson}
- * instance.  A different naming policy can set using the {@code GsonBuilder} class.  See
+ * instance. A different naming policy can set using the {@code GsonBuilder} class. See
  * {@link com.google.gson.GsonBuilder#setFieldNamingPolicy(com.google.gson.FieldNamingPolicy)}
  * for more information.</p>
  *
diff -ru /tmp/v1/gson/src/main/java/com/google/gson/annotations/Until.java /tmp/v2/gson/src/main/java/com/google/gson/annotations/Until.java
--- /tmp/v1/gson/src/main/java/com/google/gson/annotations/Until.java	2021-09-30 22:16:53.140655183 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/annotations/Until.java	2021-09-30 18:31:50.070875251 +0200
@@ -25,7 +25,7 @@
 /**
  * An annotation that indicates the version number until a member or a type should be present.
  * Basically, if Gson is created with a version number that exceeds the value stored in the
- * {@code Until} annotation then the field will be ignored from the JSON output.  This annotation
+ * {@code Until} annotation then the field will be ignored from the JSON output. This annotation
  * is useful to manage versioning of your JSON classes for a web-service.
  *
  * <p>
diff -ru /tmp/v1/gson/src/main/java/com/google/gson/ExclusionStrategy.java /tmp/v2/gson/src/main/java/com/google/gson/ExclusionStrategy.java
--- /tmp/v1/gson/src/main/java/com/google/gson/ExclusionStrategy.java	2021-09-30 22:16:53.140655183 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/ExclusionStrategy.java	2021-09-30 18:31:50.066875273 +0200
@@ -20,7 +20,7 @@
  * A strategy (or policy) definition that is used to decide whether or not a field or top-level
  * class should be serialized or deserialized as part of the JSON output/input. For serialization,
  * if the {@link #shouldSkipClass(Class)} method returns true then that class or field type
- * will not be part of the JSON output.  For deserialization, if {@link #shouldSkipClass(Class)}
+ * will not be part of the JSON output. For deserialization, if {@link #shouldSkipClass(Class)}
  * returns true, then it will not be set as part of the Java object structure.
  *
  * <p>The following are a few examples that shows how you can use this exclusion mechanism.
diff -ru /tmp/v1/gson/src/main/java/com/google/gson/FieldNamingStrategy.java /tmp/v2/gson/src/main/java/com/google/gson/FieldNamingStrategy.java
--- /tmp/v1/gson/src/main/java/com/google/gson/FieldNamingStrategy.java	2021-09-30 22:16:53.140655183 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/FieldNamingStrategy.java	2021-09-30 11:43:34.414619237 +0200
@@ -19,9 +19,9 @@
 import java.lang.reflect.Field;
 
 /**
- * A mechanism for providing custom field naming in Gson.  This allows the client code to translate
+ * A mechanism for providing custom field naming in Gson. This allows the client code to translate
  * field names into a particular convention that is not supported as a normal Java field
- * declaration rules.  For example, Java does not support "-" characters in a field name.
+ * declaration rules. For example, Java does not support "-" characters in a field name.
  *
  * @author Inderjeet Singh
  * @author Joel Leitch
diff -ru /tmp/v1/gson/src/main/java/com/google/gson/Gson.java /tmp/v2/gson/src/main/java/com/google/gson/Gson.java
--- /tmp/v1/gson/src/main/java/com/google/gson/Gson.java	2021-09-30 22:16:53.140655183 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/Gson.java	2021-09-30 21:15:43.471197613 +0200
@@ -80,7 +80,7 @@
  *
  * <p>If the object that your are serializing/deserializing is a {@code ParameterizedType}
  * (i.e. contains at least one type parameter and may be an array) then you must use the
- * {@link #toJson(Object, Type)} or {@link #fromJson(String, Type)} method.  Here is an
+ * {@link #toJson(Object, Type)} or {@link #fromJson(String, Type)} method. Here is an
  * example for serializing and deserializing a {@code ParameterizedType}:
  *
  * <pre>
diff -ru /tmp/v1/gson/src/main/java/com/google/gson/JsonParseException.java /tmp/v2/gson/src/main/java/com/google/gson/JsonParseException.java
--- /tmp/v1/gson/src/main/java/com/google/gson/JsonParseException.java	2021-09-30 22:16:53.140655183 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/JsonParseException.java	2021-09-30 11:43:34.414619237 +0200
@@ -18,12 +18,12 @@
 
 /**
  * This exception is raised if there is a serious issue that occurs during parsing of a Json
- * string.  One of the main usages for this class is for the Gson infrastructure.  If the incoming
+ * string. One of the main usages for this class is for the Gson infrastructure. If the incoming
  * Json is bad/malicious, an instance of this exception is raised.
  *
- * <p>This exception is a {@link RuntimeException} because it is exposed to the client.  Using a
+ * <p>This exception is a {@link RuntimeException} because it is exposed to the client. Using a
  * {@link RuntimeException} avoids bad coding practices on the client side where they catch the
- * exception and do nothing.  It is often the case that you want to blow up if there is a parsing
+ * exception and do nothing. It is often the case that you want to blow up if there is a parsing
  * error (i.e. often clients do not know how to recover from a {@link JsonParseException}.</p>
  *
  * @author Inderjeet Singh
diff -ru /tmp/v1/gson/src/main/java/com/google/gson/JsonStreamParser.java /tmp/v2/gson/src/main/java/com/google/gson/JsonStreamParser.java
--- /tmp/v1/gson/src/main/java/com/google/gson/JsonStreamParser.java	2021-09-30 22:16:53.140655183 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/JsonStreamParser.java	2021-09-30 17:05:56.550894896 +0200
@@ -33,7 +33,7 @@
  * 
  * <p>This class is conditionally thread-safe (see Item 70, Effective Java second edition). To
  * properly use this class across multiple threads, you will need to add some external
- * synchronization.  For example:
+ * synchronization. For example:
  * 
  * <pre>
  * JsonStreamParser parser = new JsonStreamParser("['first'] {'second':10} 'third'");
diff -ru /tmp/v1/gson/src/main/java/com/google/gson/LongSerializationPolicy.java /tmp/v2/gson/src/main/java/com/google/gson/LongSerializationPolicy.java
--- /tmp/v1/gson/src/main/java/com/google/gson/LongSerializationPolicy.java	2021-09-30 22:16:53.140655183 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/LongSerializationPolicy.java	2021-09-30 11:43:34.414619237 +0200
@@ -27,7 +27,7 @@
 public enum LongSerializationPolicy {
   /**
    * This is the "default" serialization policy that will output a {@code long} object as a JSON
-   * number.  For example, assume an object has a long field named "f" then the serialized output
+   * number. For example, assume an object has a long field named "f" then the serialized output
    * would be:
    * {@code {"f":123}}.
    */
@@ -38,7 +38,7 @@
   },
   
   /**
-   * Serializes a long value as a quoted string.  For example, assume an object has a long field 
+   * Serializes a long value as a quoted string. For example, assume an object has a long field 
    * named "f" then the serialized output would be:
    * {@code {"f":"123"}}.
    */
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java /tmp/v2/gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java	2021-09-30 22:16:53.140655183 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java	2021-09-30 22:13:58.825646807 +0200
@@ -31,7 +31,7 @@
 import java.lang.reflect.Type;
 
 /**
- * Functional Test exercising custom deserialization only.  When test applies to both
+ * Functional Test exercising custom deserialization only. When test applies to both
  * serialization and deserialization then add it to CustomTypeAdapterTest.
  *
  * @author Joel Leitch
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java /tmp/v2/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java	2021-09-30 22:16:53.140655183 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java	2021-09-30 22:13:58.825646807 +0200
@@ -87,20 +87,20 @@
 
   public void testClassSerialization() {
     try {
-      gson.toJson(String.class);  
+      gson.toJson(String.class);
     } catch (UnsupportedOperationException expected) {}
     // Override with a custom type adapter for class.
     gson = new GsonBuilder().registerTypeAdapter(Class.class, new MyClassTypeAdapter()).create();
-    assertEquals("\"java.lang.String\"", gson.toJson(String.class));  
+    assertEquals("\"java.lang.String\"", gson.toJson(String.class));
   }
 
   public void testClassDeserialization() {
     try {
-      gson.fromJson("String.class", String.class.getClass());  
+      gson.fromJson("String.class", String.class.getClass());
     } catch (UnsupportedOperationException expected) {}
     // Override with a custom type adapter for class.
     gson = new GsonBuilder().registerTypeAdapter(Class.class, new MyClassTypeAdapter()).create();
-    assertEquals(String.class, gson.fromJson("java.lang.String", Class.class));  
+    assertEquals(String.class, gson.fromJson("java.lang.String", Class.class));
   }
 
   public void testUrlSerialization() throws Exception {
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/functional/InheritanceTest.java /tmp/v2/gson/src/test/java/com/google/gson/functional/InheritanceTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/functional/InheritanceTest.java	2021-09-30 22:16:53.140655183 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/functional/InheritanceTest.java	2021-09-30 22:13:58.829646784 +0200
@@ -217,7 +217,7 @@
           return false;
         }
       }
-      return true;      
+      return true;
     }
     
     boolean setContains(float... values) {
@@ -235,7 +235,7 @@
           return false;
         }
       }
-      return true;      
+      return true;
     }
     
     public String getExpectedJson() {
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java /tmp/v2/gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java	2021-09-30 22:16:53.140655183 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java	2021-09-30 20:55:42.206103400 +0200
@@ -33,7 +33,7 @@
 import java.util.TreeSet;
 
 /**
- * Functional Test exercising custom serialization only.  When test applies to both
+ * Functional Test exercising custom serialization only. When test applies to both
  * serialization and deserialization then add it to CustomTypeAdapterTest.
  *
  * @author Inderjeet Singh
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java /tmp/v2/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java	2021-09-30 22:16:53.140655183 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java	2021-09-30 22:13:58.829646784 +0200
@@ -163,7 +163,7 @@
     assertFalse(target.bool2); // test the default value of a primitive boolean field per JVM spec
   }
 
-  public static class ClassWithInitializedMembers  {
+  public static class ClassWithInitializedMembers {
     // Using a mix of no-args constructor and field initializers
     // Also, some fields are intialized and some are not (so initialized per JVM spec)
     public static final String MY_STRING_DEFAULT = "string";
@@ -204,7 +204,7 @@
     Gson gson = new Gson();
     String json = "{value:null}";
     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class);
-    assertNull(obj.value);    
+    assertNull(obj.value);
   }
 
   public void testCustomTypeAdapterPassesNullSerialization() {
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java /tmp/v2/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java	2021-09-30 22:16:53.140655183 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java	2021-09-30 22:13:58.829646784 +0200
@@ -472,11 +472,11 @@
     @SuppressWarnings("unused")
     int q2 = 20;
   }
-  private interface Measurable<T> {    
+  private interface Measurable<T> {
   }
-  private interface Field<T> {    
+  private interface Field<T> {
   }
-  private interface Immutable {    
+  private interface Immutable {
   }
   
   public static final class Amount<Q extends Quantity> 
@@ -490,12 +490,12 @@
     Amount<MyQuantity> amount = new Amount<MyQuantity>();
     String json = gson.toJson(amount);
     assertTrue(json.contains("value"));
-    assertTrue(json.contains("30"));    
+    assertTrue(json.contains("30"));
   }
   
   public void testDeepParameterizedTypeDeserialization() {
     String json = "{value:30}";
-    Type type = new TypeToken<Amount<MyQuantity>>() {}.getType();    
+    Type type = new TypeToken<Amount<MyQuantity>>() {}.getType();
     Amount<MyQuantity> amount = gson.fromJson(json, type);
     assertEquals(30, amount.value);
   }
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/functional/VersioningTest.java /tmp/v2/gson/src/test/java/com/google/gson/functional/VersioningTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/functional/VersioningTest.java	2021-09-30 22:16:53.140655183 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/functional/VersioningTest.java	2021-09-30 22:13:58.829646784 +0200
@@ -88,7 +88,7 @@
   public void testIgnoreLaterVersionClassDeserialization() {
     Gson gson = builder.setVersion(1.0).create();
     String json = "{\"a\":3,\"b\":4,\"c\":5,\"d\":6}";
-    Version1_2 version1_2  = gson.fromJson(json, Version1_2.class);
+    Version1_2 version1_2 = gson.fromJson(json, Version1_2.class);
     // Since the class is versioned to be after 1.0, we expect null
     // This is the new behavior in Gson 2.0
     assertNull(version1_2);
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java /tmp/v2/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java	2021-09-30 22:16:53.140655183 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java	2021-09-30 20:55:42.210103381 +0200
@@ -45,14 +45,16 @@
   /**
    * Test simplest case of recursion.
    */
+
   public void testRecursiveResolveSimple() {
     TypeAdapter<Foo1> adapter = new Gson().getAdapter(Foo1.class);
     assertNotNull(adapter);
   }
 
-  //
-  // Real-world samples, found in Issues #603 and #440.
-  //
+  /**
+   * Real-world samples, found in Issues #603 and #440.
+   */
+
   public void testIssue603PrintStream() {
     TypeAdapter<PrintStream> adapter = new Gson().getAdapter(PrintStream.class);
     assertNotNull(adapter);
@@ -63,9 +65,9 @@
     assertNotNull(adapter);
   }
 
-  //
-  // Tests belows check the behaviour of the methods changed for the fix
-  //
+  /**
+   * Tests belows check the behaviour of the methods changed for the fix.
+   */
 
   public void testDoubleSupertype() {
     assertEquals($Gson$Types.supertypeOf(Number.class),
@@ -87,9 +89,9 @@
             $Gson$Types.subtypeOf($Gson$Types.supertypeOf(Number.class)));
   }
 
-  //
-  // tests for recursion while resolving type variables
-  //
+  /**
+   * Tests for recursion while resolving type variables.
+   */
 
   private static class TestType<X> {
     TestType<? super X> superType;
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/internal/UnsafeAllocatorInstantiationTest.java /tmp/v2/gson/src/test/java/com/google/gson/internal/UnsafeAllocatorInstantiationTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/internal/UnsafeAllocatorInstantiationTest.java	2021-09-30 22:16:53.140655183 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/internal/UnsafeAllocatorInstantiationTest.java	2021-09-30 11:43:34.426619137 +0200
@@ -33,7 +33,7 @@
   }
 
   /**
-   * Ensure that the {@link java.lang.UnsupportedOperationException} is thrown when  trying
+   * Ensure that the {@link java.lang.UnsupportedOperationException} is thrown when trying
    * to instantiate an interface
    */
   public void testInterfaceInstantiation() {
@@ -47,7 +47,7 @@
   }
 
   /**
-   * Ensure that the {@link java.lang.UnsupportedOperationException} is thrown when  trying
+   * Ensure that the {@link java.lang.UnsupportedOperationException} is thrown when trying
    * to instantiate an abstract class
    */
   public void testAbstractClassInstantiation() {
diff -ru /tmp/v1/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java /tmp/v2/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java
--- /tmp/v1/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java	2021-09-30 22:16:53.140655183 +0200
+++ /tmp/v2/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java	2021-09-30 11:43:34.426619137 +0200
@@ -50,11 +50,11 @@
     gson = new Gson();
   }
   
-  public void testDummy() {    
+  public void testDummy() {
     // This is here to prevent Junit for complaining when we disable all tests.
-  }  
+  }
 
-  public void disabled_testStringDeserialization() {    
+  public void disabled_testStringDeserialization() {
     StringBuilder sb = new StringBuilder(8096);
     sb.append("Error Yippie");
 
@@ -138,8 +138,8 @@
     }    
     sb.append(']');
     String json = sb.toString();
-    Type collectionType = new TypeToken<ArrayList<CollectionEntry>>(){}.getType();    
-    List<CollectionEntry> list = gson.fromJson(json, collectionType);       
+    Type collectionType = new TypeToken<ArrayList<CollectionEntry>>(){}.getType();
+    List<CollectionEntry> list = gson.fromJson(json, collectionType);
     assertEquals(count, list.size());
   }
 
@@ -203,7 +203,7 @@
     } 
     long t2 = System.currentTimeMillis(); 
     long avg = (t2 - t1) / NUM_ITERATIONS;
-    System.out.printf("Serialize classes avg time: %d ms\n", avg);     
+    System.out.printf("Serialize classes avg time: %d ms\n", avg);
   }
 
   public void disabled_testDeserializeClasses() {
@@ -215,7 +215,7 @@
     }
     long t2 = System.currentTimeMillis(); 
     long avg = (t2 - t1) / NUM_ITERATIONS;
-    System.out.printf("Deserialize classes avg time: %d ms\n", avg);     
+    System.out.printf("Deserialize classes avg time: %d ms\n", avg);
   }
   
   public void disable_testLargeObjectSerializationAndDeserialization() {
@@ -249,7 +249,7 @@
     } 
     long t2 = System.currentTimeMillis(); 
     long avg = (t2 - t1) / NUM_ITERATIONS;
-    System.out.printf("Serialize exposed classes avg time: %d ms\n", avg);     
+    System.out.printf("Serialize exposed classes avg time: %d ms\n", avg);
   }
 
   public void disabled_testDeserializeExposedClasses() {
@@ -261,7 +261,7 @@
     }
     long t2 = System.currentTimeMillis(); 
     long avg = (t2 - t1) / NUM_ITERATIONS;
-    System.out.printf("Deserialize exposed classes avg time: %d ms\n", avg);     
+    System.out.printf("Deserialize exposed classes avg time: %d ms\n", avg);
   }
 
   public void disabled_testLargeGsonMapRoundTrip() throws Exception {
@@ -343,4 +343,4 @@
       this.field = field; 
     } 
   }
-}
+}
\ No newline at end of file
