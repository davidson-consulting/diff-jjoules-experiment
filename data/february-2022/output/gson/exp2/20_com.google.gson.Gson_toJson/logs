WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.google.inject.internal.cglib.core.$ReflectUtils$1 (file:/usr/share/maven/lib/guice.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)
WARNING: Please consider reporting this to the maintainers of com.google.inject.internal.cglib.core.$ReflectUtils$1
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
[[1;34mINFO[m] Scanning for projects...
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m---------------------< [0;36mcom.google.code.gson:gson[0;1m >----------------------[m
[[1;34mINFO[m] [1mBuilding Gson 2.8.9-SNAPSHOT[m
[[1;34mINFO[m] [1m--------------------------------[ jar ]---------------------------------[m
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-clean-plugin:2.5:clean[m [1m(default-clean)[m @ [36mgson[0;1m ---[m
[[1;34mINFO[m] Deleting /tmp/v1/gson/target
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mdiff-jjoules-maven:0.0.1-SNAPSHOT:diff-jjoules[m [1m(default-cli)[m @ [36mgson[0;1m ---[m
[[1;34mINFO[m] Running on:
[[1;34mINFO[m] /tmp/v1/gson
[[1;34mINFO[m] /tmp/v2/gson/
[[1;34mINFO[m] Computing the diff with diff commnd line
[[1;34mINFO[m] The diff will be computed between:
[[1;34mINFO[m] /tmp/v1/gson/src and 
[[1;34mINFO[m] /tmp/v2/gson/src
[[1;34mINFO[m] Executing: diff -ru /tmp/v1/gson/src /tmp/v2/gson/src from /tmp/v1/gson/src
[[1;33mWARNING[m] Trying to lookup for maven home.
[[1;33mWARNING[m] This can fail, and thus lead to a crash of the application.
[[1;33mWARNING[m] You can set this value using the field mavenHome or defining the following property: MAVEN_HOME or M2_HOME
[[1;34mINFO[m] Run DiffJJoules - Configuration{pathToFirstVersion='/tmp/v1/gson/'
, pathToSecondVersion='/tmp/v2/gson/'
, junit4=true
, iterations=100
, output='/tmp/v1/gson//diff-jjoules'
, pathToRepositoryV1='/tmp/v1/'
, pathToRepositoryV2='/tmp/v2/'
, shouldMark=true
, shouldSuspect=false
, pathToReport='.github/workflows/template.md'
, wrapperEnum=MAVEN
, reportEnum=NONE
, measureEnergyConsumption=true
, diff='diff -ru /tmp/v1/gson/src/main/java/com/google/gson/Gson.java /tmp/v2/gson/src/main/java/com/google/gson/Gson.java
--- /tmp/v1/gson/src/main/java/com/google/gson/Gson.java	2022-04-20 11:46:53.217025541 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/Gson.java	2022-04-20 13:11:26.982549578 +0200
@@ -615,6 +615,7 @@
    * @return Json representation of {@code src}.
    */
   public String toJson(Object src) {
+    fr.davidson.tlpc.sensor.TLPCSensor.consume(20, fr.davidson.tlpc.sensor.IndicatorPerLabel.KEY_ENERGY_CONSUMPTION);
     if (src == null) {
       return toJson(JsonNull.INSTANCE);
     }
@@ -637,6 +638,7 @@
    * @return Json representation of {@code src}
    */
   public String toJson(Object src, Type typeOfSrc) {
+    fr.davidson.tlpc.sensor.TLPCSensor.consume(20, fr.davidson.tlpc.sensor.IndicatorPerLabel.KEY_ENERGY_CONSUMPTION);
     StringWriter writer = new StringWriter();
     toJson(src, typeOfSrc, writer);
     return writer.toString();
@@ -657,6 +659,7 @@
    * @since 1.2
    */
   public void toJson(Object src, Appendable writer) throws JsonIOException {
+    fr.davidson.tlpc.sensor.TLPCSensor.consume(20, fr.davidson.tlpc.sensor.IndicatorPerLabel.KEY_ENERGY_CONSUMPTION);
     if (src != null) {
       toJson(src, src.getClass(), writer);
     } else {
@@ -681,6 +684,7 @@
    * @since 1.2
    */
   public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException {
+    fr.davidson.tlpc.sensor.TLPCSensor.consume(20, fr.davidson.tlpc.sensor.IndicatorPerLabel.KEY_ENERGY_CONSUMPTION);
     try {
       JsonWriter jsonWriter = newJsonWriter(Streams.writerForAppendable(writer));
       toJson(src, typeOfSrc, jsonWriter);
@@ -696,6 +700,7 @@
    */
   @SuppressWarnings("unchecked")
   public void toJson(Object src, Type typeOfSrc, JsonWriter writer) throws JsonIOException {
+    fr.davidson.tlpc.sensor.TLPCSensor.consume(20, fr.davidson.tlpc.sensor.IndicatorPerLabel.KEY_ENERGY_CONSUMPTION);
     TypeAdapter<?> adapter = getAdapter(TypeToken.get(typeOfSrc));
     boolean oldLenient = writer.isLenient();
     writer.setLenient(true);
@@ -726,6 +731,7 @@
    * @since 1.4
    */
   public String toJson(JsonElement jsonElement) {
+    fr.davidson.tlpc.sensor.TLPCSensor.consume(20, fr.davidson.tlpc.sensor.IndicatorPerLabel.KEY_ENERGY_CONSUMPTION);
     StringWriter writer = new StringWriter();
     toJson(jsonElement, writer);
     return writer.toString();
@@ -740,6 +746,7 @@
    * @since 1.4
    */
   public void toJson(JsonElement jsonElement, Appendable writer) throws JsonIOException {
+    fr.davidson.tlpc.sensor.TLPCSensor.consume(20, fr.davidson.tlpc.sensor.IndicatorPerLabel.KEY_ENERGY_CONSUMPTION);
     try {
       JsonWriter jsonWriter = newJsonWriter(Streams.writerForAppendable(writer));
       toJson(jsonElement, jsonWriter);
@@ -777,6 +784,7 @@
    * @throws JsonIOException if there was a problem writing to the writer
    */
   public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOException {
+    fr.davidson.tlpc.sensor.TLPCSensor.consume(20, fr.davidson.tlpc.sensor.IndicatorPerLabel.KEY_ENERGY_CONSUMPTION);
     boolean oldLenient = writer.isLenient();
     writer.setLenient(true);
     boolean oldHtmlSafe = writer.isHtmlSafe();
'
, classpathV1=[/home/spino/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar, /home/spino/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar]
, classpathV2=[/home/spino/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar, /home/spino/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar]
, classpathV1AsString='/home/spino/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/home/spino/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar'
, classpathV2AsString='/home/spino/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/home/spino/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar'
, testsList=null
, dataV1=null
, dataV2=null
, deltas=null
, consideredTestsNames=null
, execLinesAdditions=null
, execLinesDeletions=null
, deltaOmega=null
, scorePerLineV1=null
, scorePerLineV2=null
, wrapper=fr.davidson.diff.jjoules.util.wrapper.maven.MavenWrapper@5e5af8e1
}
[[1;34mINFO[m] mvn -f /tmp/v1/gson/ clean test -DskipTests dependency:build-classpath --quiet -Dcobertura.skip=true -Dlicense.skip=true -Dfindbugs.skip=true -Danimal.sniffer.skip=true -Djacoco.skip=true -Dcheckstyle.skip=true -Dproguard.skip=true -Dmdep.outputFile=classpath -Djava.locale.providers=COMPAT,CLDR,SPI -DskipITs=true -Drat.skip=true -Denforcer.skip=true -Dgpg.skip=true
[WARN] Maven will be executed in interactive mode, but no input stream has been configured for this MavenInvoker instance.
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.google.inject.internal.cglib.core.$ReflectUtils$1 (file:/usr/share/maven/lib/guice.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)
WARNING: Please consider reporting this to the maintainers of com.google.inject.internal.cglib.core.$ReflectUtils$1
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
[[1;34mINFO[m] mvn -f /tmp/v2/gson/ clean test -DskipTests dependency:build-classpath --quiet -Dcobertura.skip=true -Dlicense.skip=true -Dfindbugs.skip=true -Danimal.sniffer.skip=true -Djacoco.skip=true -Dcheckstyle.skip=true -Dproguard.skip=true -Dmdep.outputFile=classpath -Djava.locale.providers=COMPAT,CLDR,SPI -DskipITs=true -Drat.skip=true -Denforcer.skip=true -Dgpg.skip=true
[WARN] Maven will be executed in interactive mode, but no input stream has been configured for this MavenInvoker instance.
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.google.inject.internal.cglib.core.$ReflectUtils$1 (file:/usr/share/maven/lib/guice.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)
WARNING: Please consider reporting this to the maintainers of com.google.inject.internal.cglib.core.$ReflectUtils$1
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
[[1;34mINFO[m] Run Selection
Parsing --sourceBinaries target/classes/ --testBinaries target/test-classes/ --class com.google.gson.CommentsTest:com.google.gson.DefaultInetAddressTypeAdapterTest:com.google.gson.DefaultMapJsonSerializerTest:com.google.gson.ExposeAnnotationExclusionStrategyTest:com.google.gson.FieldAttributesTest:com.google.gson.GenericArrayTypeTest:com.google.gson.GsonBuilderTest:com.google.gson.GsonTest:com.google.gson.GsonTypeAdapterTest:com.google.gson.InnerClassExclusionStrategyTest:com.google.gson.JavaSerializationTest:com.google.gson.JsonArrayTest:com.google.gson.JsonNullTest:com.google.gson.JsonObjectTest:com.google.gson.JsonParserTest:com.google.gson.JsonPrimitiveTest:com.google.gson.JsonStreamParserTest:com.google.gson.LongSerializationPolicyTest:com.google.gson.MixedStreamTest:com.google.gson.ObjectTypeAdapterTest:com.google.gson.OverrideCoreTypeAdaptersTest:com.google.gson.ParameterizedTypeTest:com.google.gson.VersionExclusionStrategyTest:com.google.gson.functional.ArrayTest:com.google.gson.functional.CircularReferenceTest:com.google.gson.functional.CollectionTest:com.google.gson.functional.ConcurrencyTest:com.google.gson.functional.CustomDeserializerTest:com.google.gson.functional.CustomSerializerTest:com.google.gson.functional.CustomTypeAdaptersTest:com.google.gson.functional.DefaultTypeAdaptersTest:com.google.gson.functional.DelegateTypeAdapterTest:com.google.gson.functional.EnumTest:com.google.gson.functional.EnumWithObfuscatedTest:com.google.gson.functional.EscapingTest:com.google.gson.functional.ExclusionStrategyFunctionalTest:com.google.gson.functional.ExposeFieldsTest:com.google.gson.functional.FieldExclusionTest:com.google.gson.functional.FieldNamingTest:com.google.gson.functional.GsonVersionDiagnosticsTest:com.google.gson.functional.InheritanceTest:com.google.gson.functional.InstanceCreatorTest:com.google.gson.functional.InterfaceTest:com.google.gson.functional.InternationalizationTest:com.google.gson.functional.JavaUtilConcurrentAtomicTest:com.google.gson.functional.JavaUtilTest:com.google.gson.functional.JsonAdapterAnnotationOnClassesTest:com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest:com.google.gson.functional.JsonAdapterSerializerDeserializerTest:com.google.gson.functional.JsonArrayTest:com.google.gson.functional.JsonParserTest:com.google.gson.functional.JsonTreeTest:com.google.gson.functional.LeniencyTest:com.google.gson.functional.MapAsArrayTypeAdapterTest:com.google.gson.functional.MapTest:com.google.gson.functional.MoreSpecificTypeSerializationTest:com.google.gson.functional.NamingPolicyTest:com.google.gson.functional.NullObjectAndFieldTest:com.google.gson.functional.ObjectTest:com.google.gson.functional.ParameterizedTypesTest:com.google.gson.functional.PrettyPrintingTest:com.google.gson.functional.PrimitiveCharacterTest:com.google.gson.functional.PrimitiveTest:com.google.gson.functional.PrintFormattingTest:com.google.gson.functional.RawSerializationTest:com.google.gson.functional.ReadersWritersTest:com.google.gson.functional.ReusedTypeVariablesFullyResolveTest:com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest:com.google.gson.functional.SecurityTest:com.google.gson.functional.SerializedNameTest:com.google.gson.functional.StreamingTypeAdaptersTest:com.google.gson.functional.StringTest:com.google.gson.functional.ThrowableFunctionalTest:com.google.gson.functional.TreeTypeAdaptersTest:com.google.gson.functional.TypeAdapterPrecedenceTest:com.google.gson.functional.TypeHierarchyAdapterTest:com.google.gson.functional.TypeVariableTest:com.google.gson.functional.UncategorizedTest:com.google.gson.functional.VersioningTest:com.google.gson.internal.GsonBuildConfigTest:com.google.gson.internal.GsonTypesTest:com.google.gson.internal.JavaVersionTest:com.google.gson.internal.LazilyParsedNumberTest:com.google.gson.internal.LinkedHashTreeMapTest:com.google.gson.internal.LinkedTreeMapTest:com.google.gson.internal.UnsafeAllocatorInstantiationTest:com.google.gson.internal.bind.DefaultDateTypeAdapterTest:com.google.gson.internal.bind.JsonElementReaderTest:com.google.gson.internal.bind.JsonTreeReaderTest:com.google.gson.internal.bind.JsonTreeWriterTest:com.google.gson.internal.bind.RecursiveTypesResolveTest:com.google.gson.internal.bind.util.ISO8601UtilsTest:com.google.gson.internal.reflect.UnsafeReflectionAccessorTest:com.google.gson.internal.sql.SqlTypesGsonTest:com.google.gson.internal.sql.SqlTypesSupportTest:com.google.gson.metrics.PerformanceTest:com.google.gson.reflect.TypeTokenTest:com.google.gson.regression.JsonAdapterNullSafeTest:com.google.gson.stream.JsonReaderPathTest:com.google.gson.stream.JsonReaderTest:com.google.gson.stream.JsonWriterTest   --coverage-detail DETAIL_COMPRESSED --nb-failing-load-class 5
java.lang.ClassNotFoundException: com.google.gson.functional.EnumWithObfuscatedTest
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)
	at eu.stamp_project.testrunner.runner.JUnit4Runner.lambda$run$0(JUnit4Runner.java:59)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:550)
	at java.base/java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:260)
	at java.base/java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:517)
	at eu.stamp_project.testrunner.runner.JUnit4Runner.run(JUnit4Runner.java:67)
	at eu.stamp_project.testrunner.runner.coverage.JUnit4OnlineJacocoRunner.executeCoveredTestPerTestMethod(JUnit4OnlineJacocoRunner.java:39)
	at eu.stamp_project.testrunner.runner.coverage.JacocoOnlineRunner.runCoveredTestResultPerTestMethod(JacocoOnlineRunner.java:57)
	at eu.stamp_project.testrunner.runner.coverage.JUnit4OnlineJacocoRunner.main(JUnit4OnlineJacocoRunner.java:59)
File saved to the following path: /tmp/v1/gson/target/CoveredTestResultPerTest.dat
Parsing --sourceBinaries target/classes/ --testBinaries target/test-classes/ --class com.google.gson.CommentsTest:com.google.gson.DefaultInetAddressTypeAdapterTest:com.google.gson.DefaultMapJsonSerializerTest:com.google.gson.ExposeAnnotationExclusionStrategyTest:com.google.gson.FieldAttributesTest:com.google.gson.GenericArrayTypeTest:com.google.gson.GsonBuilderTest:com.google.gson.GsonTest:com.google.gson.GsonTypeAdapterTest:com.google.gson.InnerClassExclusionStrategyTest:com.google.gson.JavaSerializationTest:com.google.gson.JsonArrayTest:com.google.gson.JsonNullTest:com.google.gson.JsonObjectTest:com.google.gson.JsonParserTest:com.google.gson.JsonPrimitiveTest:com.google.gson.JsonStreamParserTest:com.google.gson.LongSerializationPolicyTest:com.google.gson.MixedStreamTest:com.google.gson.ObjectTypeAdapterTest:com.google.gson.OverrideCoreTypeAdaptersTest:com.google.gson.ParameterizedTypeTest:com.google.gson.VersionExclusionStrategyTest:com.google.gson.functional.ArrayTest:com.google.gson.functional.CircularReferenceTest:com.google.gson.functional.CollectionTest:com.google.gson.functional.ConcurrencyTest:com.google.gson.functional.CustomDeserializerTest:com.google.gson.functional.CustomSerializerTest:com.google.gson.functional.CustomTypeAdaptersTest:com.google.gson.functional.DefaultTypeAdaptersTest:com.google.gson.functional.DelegateTypeAdapterTest:com.google.gson.functional.EnumTest:com.google.gson.functional.EnumWithObfuscatedTest:com.google.gson.functional.EscapingTest:com.google.gson.functional.ExclusionStrategyFunctionalTest:com.google.gson.functional.ExposeFieldsTest:com.google.gson.functional.FieldExclusionTest:com.google.gson.functional.FieldNamingTest:com.google.gson.functional.GsonVersionDiagnosticsTest:com.google.gson.functional.InheritanceTest:com.google.gson.functional.InstanceCreatorTest:com.google.gson.functional.InterfaceTest:com.google.gson.functional.InternationalizationTest:com.google.gson.functional.JavaUtilConcurrentAtomicTest:com.google.gson.functional.JavaUtilTest:com.google.gson.functional.JsonAdapterAnnotationOnClassesTest:com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest:com.google.gson.functional.JsonAdapterSerializerDeserializerTest:com.google.gson.functional.JsonArrayTest:com.google.gson.functional.JsonParserTest:com.google.gson.functional.JsonTreeTest:com.google.gson.functional.LeniencyTest:com.google.gson.functional.MapAsArrayTypeAdapterTest:com.google.gson.functional.MapTest:com.google.gson.functional.MoreSpecificTypeSerializationTest:com.google.gson.functional.NamingPolicyTest:com.google.gson.functional.NullObjectAndFieldTest:com.google.gson.functional.ObjectTest:com.google.gson.functional.ParameterizedTypesTest:com.google.gson.functional.PrettyPrintingTest:com.google.gson.functional.PrimitiveCharacterTest:com.google.gson.functional.PrimitiveTest:com.google.gson.functional.PrintFormattingTest:com.google.gson.functional.RawSerializationTest:com.google.gson.functional.ReadersWritersTest:com.google.gson.functional.ReusedTypeVariablesFullyResolveTest:com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest:com.google.gson.functional.SecurityTest:com.google.gson.functional.SerializedNameTest:com.google.gson.functional.StreamingTypeAdaptersTest:com.google.gson.functional.StringTest:com.google.gson.functional.ThrowableFunctionalTest:com.google.gson.functional.TreeTypeAdaptersTest:com.google.gson.functional.TypeAdapterPrecedenceTest:com.google.gson.functional.TypeHierarchyAdapterTest:com.google.gson.functional.TypeVariableTest:com.google.gson.functional.UncategorizedTest:com.google.gson.functional.VersioningTest:com.google.gson.internal.GsonBuildConfigTest:com.google.gson.internal.GsonTypesTest:com.google.gson.internal.JavaVersionTest:com.google.gson.internal.LazilyParsedNumberTest:com.google.gson.internal.LinkedHashTreeMapTest:com.google.gson.internal.LinkedTreeMapTest:com.google.gson.internal.UnsafeAllocatorInstantiationTest:com.google.gson.internal.bind.DefaultDateTypeAdapterTest:com.google.gson.internal.bind.JsonElementReaderTest:com.google.gson.internal.bind.JsonTreeReaderTest:com.google.gson.internal.bind.JsonTreeWriterTest:com.google.gson.internal.bind.RecursiveTypesResolveTest:com.google.gson.internal.bind.util.ISO8601UtilsTest:com.google.gson.internal.reflect.UnsafeReflectionAccessorTest:com.google.gson.internal.sql.SqlTypesGsonTest:com.google.gson.internal.sql.SqlTypesSupportTest:com.google.gson.metrics.PerformanceTest:com.google.gson.reflect.TypeTokenTest:com.google.gson.regression.JsonAdapterNullSafeTest:com.google.gson.stream.JsonReaderPathTest:com.google.gson.stream.JsonReaderTest:com.google.gson.stream.JsonWriterTest   --coverage-detail DETAIL_COMPRESSED --nb-failing-load-class 5
java.lang.ClassNotFoundException: com.google.gson.functional.EnumWithObfuscatedTest
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)
	at eu.stamp_project.testrunner.runner.JUnit4Runner.lambda$run$0(JUnit4Runner.java:59)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:550)
	at java.base/java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:260)
	at java.base/java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:517)
	at eu.stamp_project.testrunner.runner.JUnit4Runner.run(JUnit4Runner.java:67)
	at eu.stamp_project.testrunner.runner.coverage.JUnit4OnlineJacocoRunner.executeCoveredTestPerTestMethod(JUnit4OnlineJacocoRunner.java:39)
	at eu.stamp_project.testrunner.runner.coverage.JacocoOnlineRunner.runCoveredTestResultPerTestMethod(JacocoOnlineRunner.java:57)
	at eu.stamp_project.testrunner.runner.coverage.JUnit4OnlineJacocoRunner.main(JUnit4OnlineJacocoRunner.java:59)
