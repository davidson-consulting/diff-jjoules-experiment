diff -ru /tmp/v1/gson/src/main/java/com/google/gson/Gson.java /tmp/v2/gson/src/main/java/com/google/gson/Gson.java
--- /tmp/v1/gson/src/main/java/com/google/gson/Gson.java	2022-04-20 11:46:53.217025541 +0200
+++ /tmp/v2/gson/src/main/java/com/google/gson/Gson.java	2022-04-20 13:11:26.982549578 +0200
@@ -615,6 +615,7 @@
    * @return Json representation of {@code src}.
    */
   public String toJson(Object src) {
+    fr.davidson.tlpc.sensor.TLPCSensor.consume(20, fr.davidson.tlpc.sensor.IndicatorPerLabel.KEY_ENERGY_CONSUMPTION);
     if (src == null) {
       return toJson(JsonNull.INSTANCE);
     }
@@ -637,6 +638,7 @@
    * @return Json representation of {@code src}
    */
   public String toJson(Object src, Type typeOfSrc) {
+    fr.davidson.tlpc.sensor.TLPCSensor.consume(20, fr.davidson.tlpc.sensor.IndicatorPerLabel.KEY_ENERGY_CONSUMPTION);
     StringWriter writer = new StringWriter();
     toJson(src, typeOfSrc, writer);
     return writer.toString();
@@ -657,6 +659,7 @@
    * @since 1.2
    */
   public void toJson(Object src, Appendable writer) throws JsonIOException {
+    fr.davidson.tlpc.sensor.TLPCSensor.consume(20, fr.davidson.tlpc.sensor.IndicatorPerLabel.KEY_ENERGY_CONSUMPTION);
     if (src != null) {
       toJson(src, src.getClass(), writer);
     } else {
@@ -681,6 +684,7 @@
    * @since 1.2
    */
   public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException {
+    fr.davidson.tlpc.sensor.TLPCSensor.consume(20, fr.davidson.tlpc.sensor.IndicatorPerLabel.KEY_ENERGY_CONSUMPTION);
     try {
       JsonWriter jsonWriter = newJsonWriter(Streams.writerForAppendable(writer));
       toJson(src, typeOfSrc, jsonWriter);
@@ -696,6 +700,7 @@
    */
   @SuppressWarnings("unchecked")
   public void toJson(Object src, Type typeOfSrc, JsonWriter writer) throws JsonIOException {
+    fr.davidson.tlpc.sensor.TLPCSensor.consume(20, fr.davidson.tlpc.sensor.IndicatorPerLabel.KEY_ENERGY_CONSUMPTION);
     TypeAdapter<?> adapter = getAdapter(TypeToken.get(typeOfSrc));
     boolean oldLenient = writer.isLenient();
     writer.setLenient(true);
@@ -726,6 +731,7 @@
    * @since 1.4
    */
   public String toJson(JsonElement jsonElement) {
+    fr.davidson.tlpc.sensor.TLPCSensor.consume(20, fr.davidson.tlpc.sensor.IndicatorPerLabel.KEY_ENERGY_CONSUMPTION);
     StringWriter writer = new StringWriter();
     toJson(jsonElement, writer);
     return writer.toString();
@@ -740,6 +746,7 @@
    * @since 1.4
    */
   public void toJson(JsonElement jsonElement, Appendable writer) throws JsonIOException {
+    fr.davidson.tlpc.sensor.TLPCSensor.consume(20, fr.davidson.tlpc.sensor.IndicatorPerLabel.KEY_ENERGY_CONSUMPTION);
     try {
       JsonWriter jsonWriter = newJsonWriter(Streams.writerForAppendable(writer));
       toJson(jsonElement, jsonWriter);
@@ -777,6 +784,7 @@
    * @throws JsonIOException if there was a problem writing to the writer
    */
   public void toJson(JsonElement jsonElement, JsonWriter writer) throws JsonIOException {
+    fr.davidson.tlpc.sensor.TLPCSensor.consume(20, fr.davidson.tlpc.sensor.IndicatorPerLabel.KEY_ENERGY_CONSUMPTION);
     boolean oldLenient = writer.isLenient();
     writer.setLenient(true);
     boolean oldHtmlSafe = writer.isHtmlSafe();
