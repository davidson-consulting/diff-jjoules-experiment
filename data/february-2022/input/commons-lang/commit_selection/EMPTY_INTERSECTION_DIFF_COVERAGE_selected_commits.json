{
    "23": {
        "size": 13,
        "decision": "pass",
        "diff": "diff -ru src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java\n--- src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java\t2022-06-06 18:04:45.527771383 +0200\n+++ src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java\t2022-06-06 18:04:45.431770838 +0200\n@@ -1299,6 +1299,7 @@\n \n     private static final ConcurrentMap<TimeZoneDisplayKey, String> cTimeZoneDisplayCache =\n         new ConcurrentHashMap<>(7);\n+\n     /**\n      * <p>Gets the time zone display name, using a cache for performance.</p>\n      *\n@@ -1310,16 +1311,8 @@\n      */\n     static String getTimeZoneDisplay(final TimeZone tz, final boolean daylight, final int style, final Locale locale) {\n         final TimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);\n-        String value = cTimeZoneDisplayCache.get(key);\n-        if (value == null) {\n-            // This is a very slow call, so cache the results.\n-            value = tz.getDisplayName(daylight, style, locale);\n-            final String prior = cTimeZoneDisplayCache.putIfAbsent(key, value);\n-            if (prior != null) {\n-                value= prior;\n-            }\n-        }\n-        return value;\n+        // This is a very slow call, so cache the results.\n+        return cTimeZoneDisplayCache.computeIfAbsent(key, k -> tz.getDisplayName(daylight, style, locale));\n     }\n \n     /**\n",
        "sha1": "5648bc4",
        "sha2": "9dd8584",
        "config": "EMPTY_INTERSECTION_DIFF_COVERAGE"
    },
    "383": {
        "size": 6,
        "decision": "break",
        "diff": "diff -ru src/main/java/org/apache/commons/lang3/RegExUtils.java src/main/java/org/apache/commons/lang3/RegExUtils.java\n--- src/main/java/org/apache/commons/lang3/RegExUtils.java\t2022-06-06 18:04:49.479793829 +0200\n+++ src/main/java/org/apache/commons/lang3/RegExUtils.java\t2022-06-06 18:04:45.415770747 +0200\n@@ -256,7 +256,7 @@\n      * @see java.util.regex.Pattern\n      */\n     public static String replaceAll(final String text, final Pattern regex, final String replacement) {\n-        if (text == null || regex == null || replacement == null) {\n+        if (ObjectUtils.anyNull(text, regex, replacement)) {\n             return text;\n         }\n         return regex.matcher(text).replaceAll(replacement);\n@@ -310,7 +310,7 @@\n      * @see java.util.regex.Pattern#DOTALL\n      */\n     public static String replaceAll(final String text, final String regex, final String replacement) {\n-        if (text == null || regex == null || replacement == null) {\n+        if (ObjectUtils.anyNull(text, regex, replacement)) {\n             return text;\n         }\n         return text.replaceAll(regex, replacement);\n@@ -449,7 +449,7 @@\n      * @see Pattern#DOTALL\n      */\n     public static String replacePattern(final String text, final String regex, final String replacement) {\n-        if (text == null || regex == null || replacement == null) {\n+        if (ObjectUtils.anyNull(text, regex, replacement)) {\n             return text;\n         }\n         return Pattern.compile(regex, Pattern.DOTALL).matcher(text).replaceAll(replacement);\n",
        "sha1": "ea34486",
        "sha2": "615c1da",
        "config": "EMPTY_INTERSECTION_DIFF_COVERAGE"
    }
}