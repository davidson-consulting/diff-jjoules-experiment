{
    "88": {
        "size": 166,
        "decision": "pass",
        "diff": "diff -ru /tmp/v1/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java /tmp/v2/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java\n--- /tmp/v1/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java\t2022-06-06 15:02:49.941996688 +0200\n+++ /tmp/v2/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java\t2022-06-06 15:02:49.957996824 +0200\n@@ -41,11 +41,52 @@\n  * @author Inderjeet Singh\n  * @author Joel Leitch\n  */\n-final class DefaultDateTypeAdapter extends TypeAdapter<Date> {\n-\n+final class DefaultDateTypeAdapter<T extends Date> extends TypeAdapter<T> {\n   private static final String SIMPLE_NAME = \"DefaultDateTypeAdapter\";\n \n-  private final Class<? extends Date> dateType;\n+  static abstract class DateType<T extends Date> {\n+    private DateType() {\n+    }\n+\n+    public static final DateType<Date> DATE = new DateType<Date>() {\n+      @Override\n+      protected Date deserialize(Date date) {\n+        return date;\n+      }\n+    };\n+    public static final DateType<java.sql.Date> SQL_DATE = new DateType<java.sql.Date>() {\n+      @Override\n+      protected java.sql.Date deserialize(Date date) {\n+        return new java.sql.Date(date.getTime());\n+      }\n+    };\n+    public static final DateType<Timestamp> SQL_TIMESTAMP = new DateType<Timestamp>() {\n+      @Override\n+      protected Timestamp deserialize(Date date) {\n+        return new Timestamp(date.getTime());\n+      }\n+    };\n+\n+    protected abstract T deserialize(Date date);\n+\n+    public DefaultDateTypeAdapter<T> createAdapter(String datePattern) {\n+      return new DefaultDateTypeAdapter<T>(this, datePattern);\n+    }\n+\n+    public DefaultDateTypeAdapter<T> createAdapter(int style) {\n+      return new DefaultDateTypeAdapter<T>(this, style);\n+    }\n+\n+    public DefaultDateTypeAdapter<T> createAdapter(int dateStyle, int timeStyle) {\n+      return new DefaultDateTypeAdapter<T>(this, dateStyle, timeStyle);\n+    }\n+\n+    public DefaultDateTypeAdapter<T> createDefaultsAdapter() {\n+      return new DefaultDateTypeAdapter<T>(this, DateFormat.DEFAULT, DateFormat.DEFAULT);\n+    }\n+  }\n+\n+  private final DateType<T> dateType;\n \n   /**\n    * List of 1 or more different date formats used for de-serialization attempts.\n@@ -53,18 +94,7 @@\n    */\n   private final List<DateFormat> dateFormats = new ArrayList<DateFormat>();\n \n-  DefaultDateTypeAdapter(Class<? extends Date> dateType) {\n-    this.dateType = verifyDateType(dateType);\n-    dateFormats.add(DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US));\n-    if (!Locale.getDefault().equals(Locale.US)) {\n-      dateFormats.add(DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT));\n-    }\n-    if (JavaVersion.isJava9OrLater()) {\n-      dateFormats.add(PreJava9DateFormatProvider.getUSDateTimeFormat(DateFormat.DEFAULT, DateFormat.DEFAULT));\n-    }\n-  }\n-\n-  DefaultDateTypeAdapter(Class<? extends Date> dateType, String datePattern) {\n+  private DefaultDateTypeAdapter(DateType<T> dateType, String datePattern) {\n     this.dateType = verifyDateType(dateType);\n     dateFormats.add(new SimpleDateFormat(datePattern, Locale.US));\n     if (!Locale.getDefault().equals(Locale.US)) {\n@@ -72,7 +102,7 @@\n     }\n   }\n \n-  DefaultDateTypeAdapter(Class<? extends Date> dateType, int style) {\n+  private DefaultDateTypeAdapter(DateType<T> dateType, int style) {\n     this.dateType = verifyDateType(dateType);\n     dateFormats.add(DateFormat.getDateInstance(style, Locale.US));\n     if (!Locale.getDefault().equals(Locale.US)) {\n@@ -83,11 +113,7 @@\n     }\n   }\n \n-  public DefaultDateTypeAdapter(int dateStyle, int timeStyle) {\n-    this(Date.class, dateStyle, timeStyle);\n-  }\n-\n-  public DefaultDateTypeAdapter(Class<? extends Date> dateType, int dateStyle, int timeStyle) {\n+  private DefaultDateTypeAdapter(DateType<T> dateType, int dateStyle, int timeStyle) {\n     this.dateType = verifyDateType(dateType);\n     dateFormats.add(DateFormat.getDateTimeInstance(dateStyle, timeStyle, Locale.US));\n     if (!Locale.getDefault().equals(Locale.US)) {\n@@ -98,9 +124,9 @@\n     }\n   }\n \n-  private static Class<? extends Date> verifyDateType(Class<? extends Date> dateType) {\n-    if ( dateType != Date.class && dateType != java.sql.Date.class && dateType != Timestamp.class ) {\n-      throw new IllegalArgumentException(\"Date type must be one of \" + Date.class + \", \" + Timestamp.class + \", or \" + java.sql.Date.class + \" but was \" + dateType);\n+  private static <T extends Date> DateType<T> verifyDateType(DateType<T> dateType) {\n+    if (dateType == null) {\n+      throw new NullPointerException(\"dateType == null\");\n     }\n     return dateType;\n   }\n@@ -120,22 +146,13 @@\n   }\n \n   @Override\n-  public Date read(JsonReader in) throws IOException {\n+  public T read(JsonReader in) throws IOException {\n     if (in.peek() == JsonToken.NULL) {\n       in.nextNull();\n       return null;\n     }\n     Date date = deserializeToDate(in.nextString());\n-    if (dateType == Date.class) {\n-      return date;\n-    } else if (dateType == Timestamp.class) {\n-      return new Timestamp(date.getTime());\n-    } else if (dateType == java.sql.Date.class) {\n-      return new java.sql.Date(date.getTime());\n-    } else {\n-      // This must never happen: dateType is guarded in the primary constructor\n-      throw new AssertionError();\n-    }\n+    return dateType.deserialize(date);\n   }\n \n   private Date deserializeToDate(String s) {\ndiff -ru /tmp/v1/gson/src/main/java/com/google/gson/GsonBuilder.java /tmp/v2/gson/src/main/java/com/google/gson/GsonBuilder.java\n--- /tmp/v1/gson/src/main/java/com/google/gson/GsonBuilder.java\t2022-06-06 15:02:49.945996721 +0200\n+++ /tmp/v2/gson/src/main/java/com/google/gson/GsonBuilder.java\t2022-06-06 15:02:49.957996824 +0200\n@@ -602,20 +602,19 @@\n         this.factories, this.hierarchyFactories, factories);\n   }\n \n-  @SuppressWarnings(\"unchecked\")\n   private void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle,\n       List<TypeAdapterFactory> factories) {\n-    DefaultDateTypeAdapter dateTypeAdapter;\n+    DefaultDateTypeAdapter<Date> dateTypeAdapter;\n     TypeAdapter<Timestamp> timestampTypeAdapter;\n     TypeAdapter<java.sql.Date> javaSqlDateTypeAdapter;\n     if (datePattern != null && !\"\".equals(datePattern.trim())) {\n-      dateTypeAdapter = new DefaultDateTypeAdapter(Date.class, datePattern);\n-      timestampTypeAdapter = (TypeAdapter) new DefaultDateTypeAdapter(Timestamp.class, datePattern);\n-      javaSqlDateTypeAdapter = (TypeAdapter) new DefaultDateTypeAdapter(java.sql.Date.class, datePattern);\n+      dateTypeAdapter = DefaultDateTypeAdapter.DateType.DATE.createAdapter(datePattern);\n+      timestampTypeAdapter = DefaultDateTypeAdapter.DateType.SQL_TIMESTAMP.createAdapter(datePattern);\n+      javaSqlDateTypeAdapter = DefaultDateTypeAdapter.DateType.SQL_DATE.createAdapter(datePattern);\n     } else if (dateStyle != DateFormat.DEFAULT && timeStyle != DateFormat.DEFAULT) {\n-      dateTypeAdapter = new DefaultDateTypeAdapter(Date.class, dateStyle, timeStyle);\n-      timestampTypeAdapter = (TypeAdapter) new DefaultDateTypeAdapter(Timestamp.class, dateStyle, timeStyle);\n-      javaSqlDateTypeAdapter = (TypeAdapter) new DefaultDateTypeAdapter(java.sql.Date.class, dateStyle, timeStyle);\n+      dateTypeAdapter = DefaultDateTypeAdapter.DateType.DATE.createAdapter(dateStyle, timeStyle);\n+      timestampTypeAdapter = DefaultDateTypeAdapter.DateType.SQL_TIMESTAMP.createAdapter(dateStyle, timeStyle);\n+      javaSqlDateTypeAdapter = DefaultDateTypeAdapter.DateType.SQL_DATE.createAdapter(dateStyle, timeStyle);\n     } else {\n       return;\n     }\ndiff -ru /tmp/v1/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java /tmp/v2/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java\n--- /tmp/v1/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java\t2022-06-06 15:02:49.945996721 +0200\n+++ /tmp/v2/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java\t2022-06-06 15:02:49.957996824 +0200\n@@ -23,6 +23,7 @@\n import java.util.Locale;\n import java.util.TimeZone;\n \n+import com.google.gson.DefaultDateTypeAdapter.DateType;\n import com.google.gson.internal.JavaVersion;\n \n import junit.framework.TestCase;\n@@ -52,18 +53,18 @@\n       String afterYearLongSep = JavaVersion.isJava9OrLater() ? \" at \" : \" \";\n       String utcFull = JavaVersion.isJava9OrLater() ? \"Coordinated Universal Time\" : \"UTC\";\n       assertFormatted(String.format(\"Jan 1, 1970%s12:00:00 AM\", afterYearSep),\n-              new DefaultDateTypeAdapter(Date.class));\n-      assertFormatted(\"1/1/70\", new DefaultDateTypeAdapter(Date.class, DateFormat.SHORT));\n-      assertFormatted(\"Jan 1, 1970\", new DefaultDateTypeAdapter(Date.class, DateFormat.MEDIUM));\n-      assertFormatted(\"January 1, 1970\", new DefaultDateTypeAdapter(Date.class, DateFormat.LONG));\n+          DateType.DATE.createDefaultsAdapter());\n+      assertFormatted(\"1/1/70\", DateType.DATE.createAdapter(DateFormat.SHORT));\n+      assertFormatted(\"Jan 1, 1970\", DateType.DATE.createAdapter(DateFormat.MEDIUM));\n+      assertFormatted(\"January 1, 1970\", DateType.DATE.createAdapter(DateFormat.LONG));\n       assertFormatted(String.format(\"1/1/70%s12:00 AM\", afterYearSep),\n-          new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));\n+          DateType.DATE.createAdapter(DateFormat.SHORT, DateFormat.SHORT));\n       assertFormatted(String.format(\"Jan 1, 1970%s12:00:00 AM\", afterYearSep),\n-          new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));\n+          DateType.DATE.createAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));\n       assertFormatted(String.format(\"January 1, 1970%s12:00:00 AM UTC\", afterYearLongSep),\n-          new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));\n+          DateType.DATE.createAdapter(DateFormat.LONG, DateFormat.LONG));\n       assertFormatted(String.format(\"Thursday, January 1, 1970%s12:00:00 AM %s\", afterYearLongSep, utcFull),\n-          new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));\n+          DateType.DATE.createAdapter(DateFormat.FULL, DateFormat.FULL));\n     } finally {\n       TimeZone.setDefault(defaultTimeZone);\n       Locale.setDefault(defaultLocale);\n@@ -78,21 +79,21 @@\n     try {\n       String afterYearSep = JavaVersion.isJava9OrLater() ? \" \u00e0 \" : \" \";\n       assertParsed(String.format(\"1 janv. 1970%s00:00:00\", afterYearSep),\n-              new DefaultDateTypeAdapter(Date.class));\n-      assertParsed(\"01/01/70\", new DefaultDateTypeAdapter(Date.class, DateFormat.SHORT));\n-      assertParsed(\"1 janv. 1970\", new DefaultDateTypeAdapter(Date.class, DateFormat.MEDIUM));\n-      assertParsed(\"1 janvier 1970\", new DefaultDateTypeAdapter(Date.class, DateFormat.LONG));\n+          DateType.DATE.createDefaultsAdapter());\n+      assertParsed(\"01/01/70\", DateType.DATE.createAdapter(DateFormat.SHORT));\n+      assertParsed(\"1 janv. 1970\", DateType.DATE.createAdapter(DateFormat.MEDIUM));\n+      assertParsed(\"1 janvier 1970\", DateType.DATE.createAdapter(DateFormat.LONG));\n       assertParsed(\"01/01/70 00:00\",\n-          new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));\n+          DateType.DATE.createAdapter(DateFormat.SHORT, DateFormat.SHORT));\n       assertParsed(String.format(\"1 janv. 1970%s00:00:00\", afterYearSep),\n-          new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));\n+          DateType.DATE.createAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));\n       assertParsed(String.format(\"1 janvier 1970%s00:00:00 UTC\", afterYearSep),\n-          new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));\n+          DateType.DATE.createAdapter(DateFormat.LONG, DateFormat.LONG));\n       assertParsed(JavaVersion.isJava9OrLater() ? (JavaVersion.getMajorJavaVersion() <11 ?\n                       \"jeudi 1 janvier 1970 \u00e0 00:00:00 Coordinated Universal Time\" :\n                       \"jeudi 1 janvier 1970 \u00e0 00:00:00 Temps universel coordonn\u00e9\") :\n                       \"jeudi 1 janvier 1970 00 h 00 UTC\",\n-          new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));\n+          DateType.DATE.createAdapter(DateFormat.FULL, DateFormat.FULL));\n     } finally {\n       TimeZone.setDefault(defaultTimeZone);\n       Locale.setDefault(defaultLocale);\n@@ -105,18 +106,18 @@\n     Locale defaultLocale = Locale.getDefault();\n     Locale.setDefault(Locale.US);\n     try {\n-      assertParsed(\"Jan 1, 1970 0:00:00 AM\", new DefaultDateTypeAdapter(Date.class));\n-      assertParsed(\"1/1/70\", new DefaultDateTypeAdapter(Date.class, DateFormat.SHORT));\n-      assertParsed(\"Jan 1, 1970\", new DefaultDateTypeAdapter(Date.class, DateFormat.MEDIUM));\n-      assertParsed(\"January 1, 1970\", new DefaultDateTypeAdapter(Date.class, DateFormat.LONG));\n+      assertParsed(\"Jan 1, 1970 0:00:00 AM\", DateType.DATE.createDefaultsAdapter());\n+      assertParsed(\"1/1/70\", DateType.DATE.createAdapter(DateFormat.SHORT));\n+      assertParsed(\"Jan 1, 1970\", DateType.DATE.createAdapter(DateFormat.MEDIUM));\n+      assertParsed(\"January 1, 1970\", DateType.DATE.createAdapter(DateFormat.LONG));\n       assertParsed(\"1/1/70 0:00 AM\",\n-          new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));\n+          DateType.DATE.createAdapter(DateFormat.SHORT, DateFormat.SHORT));\n       assertParsed(\"Jan 1, 1970 0:00:00 AM\",\n-          new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));\n+          DateType.DATE.createAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));\n       assertParsed(\"January 1, 1970 0:00:00 AM UTC\",\n-          new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));\n+          DateType.DATE.createAdapter(DateFormat.LONG, DateFormat.LONG));\n       assertParsed(\"Thursday, January 1, 1970 0:00:00 AM UTC\",\n-          new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));\n+          DateType.DATE.createAdapter(DateFormat.FULL, DateFormat.FULL));\n     } finally {\n       TimeZone.setDefault(defaultTimeZone);\n       Locale.setDefault(defaultLocale);\n@@ -131,8 +132,8 @@\n     try {\n       String afterYearSep = JavaVersion.isJava9OrLater() ? \", \" : \" \";\n       assertFormatted(String.format(\"Dec 31, 1969%s4:00:00 PM\", afterYearSep),\n-              new DefaultDateTypeAdapter(Date.class));\n-      assertParsed(\"Dec 31, 1969 4:00:00 PM\", new DefaultDateTypeAdapter(Date.class));\n+          DateType.DATE.createDefaultsAdapter());\n+      assertParsed(\"Dec 31, 1969 4:00:00 PM\", DateType.DATE.createDefaultsAdapter());\n     } finally {\n       TimeZone.setDefault(defaultTimeZone);\n       Locale.setDefault(defaultLocale);\n@@ -140,7 +141,7 @@\n   }\n \n   public void testDateDeserializationISO8601() throws Exception {\n-    DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter(Date.class);\n+    DefaultDateTypeAdapter<Date> adapter = DateType.DATE.createDefaultsAdapter();\n     assertParsed(\"1970-01-01T00:00:00.000Z\", adapter);\n     assertParsed(\"1970-01-01T00:00Z\", adapter);\n     assertParsed(\"1970-01-01T00:00:00+00:00\", adapter);\n@@ -150,7 +151,7 @@\n   \n   public void testDateSerialization() throws Exception {\n     int dateStyle = DateFormat.LONG;\n-    DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(Date.class, dateStyle);\n+    DefaultDateTypeAdapter<Date> dateTypeAdapter = DateType.DATE.createAdapter(dateStyle);\n     DateFormat formatter = DateFormat.getDateInstance(dateStyle, Locale.US);\n     Date currentDate = new Date();\n \n@@ -160,7 +161,7 @@\n \n   public void testDatePattern() throws Exception {\n     String pattern = \"yyyy-MM-dd\";\n-    DefaultDateTypeAdapter dateTypeAdapter = new DefaultDateTypeAdapter(Date.class, pattern);\n+    DefaultDateTypeAdapter<Date> dateTypeAdapter = DateType.DATE.createAdapter(pattern);\n     DateFormat formatter = new SimpleDateFormat(pattern);\n     Date currentDate = new Date();\n \n@@ -168,33 +169,32 @@\n     assertEquals(toLiteral(formatter.format(currentDate)), dateString);\n   }\n \n-  @SuppressWarnings(\"unused\")\n   public void testInvalidDatePattern() throws Exception {\n     try {\n-      new DefaultDateTypeAdapter(Date.class, \"I am a bad Date pattern....\");\n+      DateType.DATE.createAdapter(\"I am a bad Date pattern....\");\n       fail(\"Invalid date pattern should fail.\");\n     } catch (IllegalArgumentException expected) { }\n   }\n \n   public void testNullValue() throws Exception {\n-    DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter(Date.class);\n+    DefaultDateTypeAdapter<Date> adapter = DateType.DATE.createDefaultsAdapter();\n     assertNull(adapter.fromJson(\"null\"));\n     assertEquals(\"null\", adapter.toJson(null));\n   }\n \n   public void testUnexpectedToken() throws Exception {\n     try {\n-      DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter(Date.class);\n+      DefaultDateTypeAdapter<Date> adapter = DateType.DATE.createDefaultsAdapter();\n       adapter.fromJson(\"{}\");\n       fail(\"Unexpected token should fail.\");\n     } catch (IllegalStateException expected) { }\n   }\n \n-  private void assertFormatted(String formatted, DefaultDateTypeAdapter adapter) {\n+  private void assertFormatted(String formatted, DefaultDateTypeAdapter<Date> adapter) {\n     assertEquals(toLiteral(formatted), adapter.toJson(new Date(0)));\n   }\n \n-  private void assertParsed(String date, DefaultDateTypeAdapter adapter) throws IOException {\n+  private void assertParsed(String date, DefaultDateTypeAdapter<Date> adapter) throws IOException {\n     assertEquals(date, new Date(0), adapter.fromJson(toLiteral(date)));\n     assertEquals(\"ISO 8601\", new Date(0), adapter.fromJson(toLiteral(\"1970-01-01T00:00:00Z\")));\n   }\ndiff -ru /tmp/v1/gson/src/test/java/com/google/gson/internal/bind/util/ISO8601UtilsTest.java /tmp/v2/gson/src/test/java/com/google/gson/internal/bind/util/ISO8601UtilsTest.java\n--- /tmp/v1/gson/src/test/java/com/google/gson/internal/bind/util/ISO8601UtilsTest.java\t2022-06-06 15:02:49.945996721 +0200\n+++ /tmp/v2/gson/src/test/java/com/google/gson/internal/bind/util/ISO8601UtilsTest.java\t2022-06-06 15:02:49.749995048 +0200\n@@ -15,25 +15,9 @@\n     @Rule\n     public final ExpectedException exception = ExpectedException.none();\n \n-    private static TimeZone utcTimeZone() {\n-        return TimeZone.getTimeZone(\"UTC\");\n-    }\n-\n-    private static GregorianCalendar createUtcCalendar() {\n-        TimeZone utc = utcTimeZone();\n-        GregorianCalendar calendar = new GregorianCalendar(utc);\n-        // Calendar was created with current time, must clear it\n-        calendar.clear();\n-        return calendar;\n-    }\n-\n     @Test\n     public void testDateFormatString() {\n-        GregorianCalendar calendar = new GregorianCalendar(utcTimeZone(), Locale.US);\n-        // Calendar was created with current time, must clear it\n-        calendar.clear();\n-        calendar.set(2018, Calendar.JUNE, 25);\n-        Date date = calendar.getTime();\n+        Date date = new GregorianCalendar(2018, Calendar.JUNE, 25).getTime();\n         String dateStr = ISO8601Utils.format(date);\n         String expectedDate = \"2018-06-25\";\n         assertEquals(expectedDate, dateStr.substring(0, expectedDate.length()));\n@@ -67,28 +51,51 @@\n \n     @Test\n     public void testDateParseWithTimezone() throws ParseException {\n-        String dateStr = \"2018-06-25T00:00:00-03:00\";\n-        Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0));\n-        GregorianCalendar calendar = createUtcCalendar();\n-        calendar.set(2018, Calendar.JUNE, 25, 3, 0);\n-        Date expectedDate = calendar.getTime();\n-        assertEquals(expectedDate, date);\n+        TimeZone defaultTimeZone = TimeZone.getDefault();\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n+        Locale defaultLocale = Locale.getDefault();\n+        Locale.setDefault(Locale.US);\n+        try {\n+            String dateStr = \"2018-06-25T00:00:00-03:00\";\n+            Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0));\n+            Date expectedDate = new GregorianCalendar(2018, Calendar.JUNE, 25, 3, 0).getTime();\n+            assertEquals(expectedDate, date);\n+        } finally {\n+            TimeZone.setDefault(defaultTimeZone);\n+            Locale.setDefault(defaultLocale);\n+        }\n     }\n \n     @Test\n     public void testDateParseSpecialTimezone() throws ParseException {\n-        String dateStr = \"2018-06-25T00:02:00-02:58\";\n-        Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0));\n-        GregorianCalendar calendar = createUtcCalendar();\n-        calendar.set(2018, Calendar.JUNE, 25, 3, 0);\n-        Date expectedDate = calendar.getTime();\n-        assertEquals(expectedDate, date);\n+        TimeZone defaultTimeZone = TimeZone.getDefault();\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n+        Locale defaultLocale = Locale.getDefault();\n+        Locale.setDefault(Locale.US);\n+        try {\n+            String dateStr = \"2018-06-25T00:02:00-02:58\";\n+            Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0));\n+            Date expectedDate = new GregorianCalendar(2018, Calendar.JUNE, 25, 3, 0).getTime();\n+            assertEquals(expectedDate, date);\n+        } finally {\n+            TimeZone.setDefault(defaultTimeZone);\n+            Locale.setDefault(defaultLocale);\n+        }\n     }\n \n     @Test\n     public void testDateParseInvalidTime() throws ParseException {\n-        String dateStr = \"2018-06-25T61:60:62-03:00\";\n-        exception.expect(ParseException.class);\n-        ISO8601Utils.parse(dateStr, new ParsePosition(0));\n+        TimeZone defaultTimeZone = TimeZone.getDefault();\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n+        Locale defaultLocale = Locale.getDefault();\n+        Locale.setDefault(Locale.US);\n+        try {\n+            String dateStr = \"2018-06-25T61:60:62-03:00\";\n+            exception.expect(ParseException.class);\n+            ISO8601Utils.parse(dateStr, new ParsePosition(0));\n+        } finally {\n+            TimeZone.setDefault(defaultTimeZone);\n+            Locale.setDefault(defaultLocale);\n+        }\n     }\n }\n",
        "sha1": "9171715",
        "sha2": "541252a"
    },
    "91": {
        "size": 4,
        "decision": "break",
        "diff": "diff -ru /tmp/v1/gson/src/main/java/com/google/gson/internal/bind/JsonTreeWriter.java /tmp/v2/gson/src/main/java/com/google/gson/internal/bind/JsonTreeWriter.java\n--- /tmp/v1/gson/src/main/java/com/google/gson/internal/bind/JsonTreeWriter.java\t2022-06-06 15:02:49.997997165 +0200\n+++ /tmp/v2/gson/src/main/java/com/google/gson/internal/bind/JsonTreeWriter.java\t2022-06-06 15:02:49.349991634 +0200\n@@ -130,6 +130,9 @@\n   }\n \n   @Override public JsonWriter name(String name) throws IOException {\n+    if (name == null) {\n+      throw new NullPointerException(\"name == null\");\n+    }\n     if (stack.isEmpty() || pendingName != null) {\n       throw new IllegalStateException();\n     }\n",
        "sha1": "fa94721",
        "sha2": "55acc23",
        "config": "STUDENTS_T_TEST_AGGREGATE_0.20"
    }
}