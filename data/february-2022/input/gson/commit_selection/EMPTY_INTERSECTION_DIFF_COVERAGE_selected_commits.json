{
    "183": {
        "size": 10,
        "decision": "pass",
        "diff": "diff -ru /tmp/v1/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java /tmp/v2/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java\n--- /tmp/v1/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java\t2022-06-06 15:02:48.193981764 +0200\n+++ /tmp/v2/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java\t2022-06-06 15:02:46.805969912 +0200\n@@ -28,6 +28,7 @@\n import com.google.gson.internal.Excluder;\n import com.google.gson.internal.ObjectConstructor;\n import com.google.gson.internal.Primitives;\n+import com.google.gson.internal.reflect.ReflectionAccessor;\n import com.google.gson.reflect.TypeToken;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonToken;\n@@ -49,6 +50,7 @@\n   private final FieldNamingStrategy fieldNamingPolicy;\n   private final Excluder excluder;\n   private final JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory;\n+  private final ReflectionAccessor accessor = ReflectionAccessor.getInstance();\n \n   public ReflectiveTypeAdapterFactory(ConstructorConstructor constructorConstructor,\n       FieldNamingStrategy fieldNamingPolicy, Excluder excluder,\n@@ -154,7 +156,7 @@\n         if (!serialize && !deserialize) {\n           continue;\n         }\n-        field.setAccessible(true);\n+        accessor.makeAccessible(field);\n         Type fieldType = $Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n         List<String> fieldNames = getFieldNames(field);\n         BoundField previous = null;\ndiff -ru /tmp/v1/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java /tmp/v2/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java\n--- /tmp/v1/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java\t2022-06-06 15:02:48.193981764 +0200\n+++ /tmp/v2/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java\t2022-06-06 15:02:46.805969912 +0200\n@@ -40,6 +40,7 @@\n \n import com.google.gson.InstanceCreator;\n import com.google.gson.JsonIOException;\n+import com.google.gson.internal.reflect.ReflectionAccessor;\n import com.google.gson.reflect.TypeToken;\n \n /**\n@@ -47,6 +48,7 @@\n  */\n public final class ConstructorConstructor {\n   private final Map<Type, InstanceCreator<?>> instanceCreators;\n+  private final ReflectionAccessor accessor = ReflectionAccessor.getInstance();\n \n   public ConstructorConstructor(Map<Type, InstanceCreator<?>> instanceCreators) {\n     this.instanceCreators = instanceCreators;\n@@ -98,7 +100,7 @@\n     try {\n       final Constructor<? super T> constructor = rawType.getDeclaredConstructor();\n       if (!constructor.isAccessible()) {\n-        constructor.setAccessible(true);\n+        accessor.makeAccessible(constructor);\n       }\n       return new ObjectConstructor<T>() {\n         @SuppressWarnings(\"unchecked\") // T is the same raw type as is requested\nOnly in /tmp/v2/gson/src/main/java/com/google/gson/internal: reflect\ndiff -ru /tmp/v1/gson/src/main/java/com/google/gson/reflect/package-info.java /tmp/v2/gson/src/main/java/com/google/gson/reflect/package-info.java\n--- /tmp/v1/gson/src/main/java/com/google/gson/reflect/package-info.java\t2022-06-06 15:02:48.193981764 +0200\n+++ /tmp/v2/gson/src/main/java/com/google/gson/reflect/package-info.java\t2022-06-06 15:02:46.805969912 +0200\n@@ -1,6 +1,6 @@\n /**\n  * This package provides utility classes for finding type information for generic types.\n- *  \n+ *\n  * @author Inderjeet Singh, Joel Leitch\n  */\n package com.google.gson.reflect;\n\\ No newline at end of file\n",
        "sha1": "fb7ab06",
        "sha2": "8445689",
        "config": "EMPTY_INTERSECTION_DIFF_COVERAGE"
    },
    "212": {
        "size": 6,
        "decision": "break",
        "diff": "diff -ru /tmp/v1/gson/src/main/java/com/google/gson/GsonBuilder.java /tmp/v2/gson/src/main/java/com/google/gson/GsonBuilder.java\n--- /tmp/v1/gson/src/main/java/com/google/gson/GsonBuilder.java\t2022-06-06 15:02:48.405983575 +0200\n+++ /tmp/v2/gson/src/main/java/com/google/gson/GsonBuilder.java\t2022-06-06 15:02:48.373983301 +0200\n@@ -562,8 +562,11 @@\n     List<TypeAdapterFactory> factories = new ArrayList<TypeAdapterFactory>(this.factories.size() + this.hierarchyFactories.size() + 3);\n     factories.addAll(this.factories);\n     Collections.reverse(factories);\n-    Collections.reverse(this.hierarchyFactories);\n-    factories.addAll(this.hierarchyFactories);\n+\n+    List<TypeAdapterFactory> hierarchyFactories = new ArrayList<TypeAdapterFactory>(this.hierarchyFactories);\n+    Collections.reverse(hierarchyFactories);\n+    factories.addAll(hierarchyFactories);\n+\n     addTypeAdaptersForDate(datePattern, dateStyle, timeStyle, factories);\n \n     return new Gson(excluder, fieldNamingPolicy, instanceCreators,\n",
        "sha1": "afcb381",
        "sha2": "d9cc7bc",
        "config": "EMPTY_INTERSECTION_DIFF_COVERAGE"
    }
}