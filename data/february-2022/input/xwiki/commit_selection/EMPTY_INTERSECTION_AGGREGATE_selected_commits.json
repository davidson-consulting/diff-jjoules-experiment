{
    "2896": {
        "size": 23,
        "decision": "pass",
        "diff": "diff -ru /tmp/v1/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api//src/main/java/org/xwiki/extension/ExtensionRewriter.java /tmp/v2/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api//src/main/java/org/xwiki/extension/ExtensionRewriter.java\n--- /tmp/v1/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api//src/main/java/org/xwiki/extension/ExtensionRewriter.java\t2022-06-06 22:30:07.800458348 +0200\n+++ /tmp/v2/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api//src/main/java/org/xwiki/extension/ExtensionRewriter.java\t2022-06-06 22:30:04.332438920 +0200\n@@ -19,18 +19,20 @@\n  */\n package org.xwiki.extension;\n \n+import java.io.Serializable;\n+\n import org.xwiki.stability.Unstable;\n \n /**\n  * Interface used to allow external service modify manipulated extensions (change allowed namespaces, dependencies,\n  * etc.).\n  * \n- * @version $Id: a887fdb49e14463e77de55b76fc8182354b3f60b $\n+ * @version $Id: 8800a9b5e8aa5a4796ab47a2a0dc39944d30bfbd $\n  * @since 8.4.2\n  * @since 9.0RC1\n  */\n @Unstable\n-public interface ExtensionRewriter\n+public interface ExtensionRewriter extends Serializable\n {\n     /**\n      * @param extension the extension to filter\ndiff -ru /tmp/v1/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api//src/main/java/org/xwiki/extension/job/AbstractExtensionRequest.java /tmp/v2/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api//src/main/java/org/xwiki/extension/job/AbstractExtensionRequest.java\n--- /tmp/v1/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api//src/main/java/org/xwiki/extension/job/AbstractExtensionRequest.java\t2022-06-06 22:30:07.800458348 +0200\n+++ /tmp/v2/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api//src/main/java/org/xwiki/extension/job/AbstractExtensionRequest.java\t2022-06-06 22:30:04.332438920 +0200\n@@ -34,7 +34,7 @@\n /**\n  * Base class for extension manipulation related {@link Request} implementations.\n  *\n- * @version $Id: 8f7d84fe626d341e0ffa3763a39b416dcf0dad26 $\n+ * @version $Id: b59dff3038ee6a7ab6c1f7f50d11f0f65b4081b1 $\n  * @since 4.0M1\n  */\n public abstract class AbstractExtensionRequest extends AbstractRequest implements ExtensionRequest\n@@ -65,12 +65,15 @@\n     public static final String PROPERTY_UNINSTALLALLOWED = \"uninstallAllowed\";\n \n     /**\n+     * @see #getRewriter()\n+     */\n+    public static final String PROPERTY_REWRITER = \"rewriter\";\n+\n+    /**\n      * Serialization identifier.\n      */\n     private static final long serialVersionUID = 1L;\n \n-    private transient ExtensionRewriter rewriter;\n-\n     /**\n      * Default constructor.\n      */\n@@ -91,10 +94,6 @@\n         if (extensions == null) {\n             setProperty(PROPERTY_EXTENSIONS, new ArrayList<ExtensionId>());\n         }\n-\n-        if (request instanceof ExtensionRequest) {\n-            this.rewriter = ((ExtensionRequest) request).getRewriter();\n-        }\n     }\n \n     @Override\n@@ -182,14 +181,14 @@\n     @Unstable\n     public void setRewriter(ExtensionRewriter rewriter)\n     {\n-        this.rewriter = rewriter;\n+        setProperty(PROPERTY_REWRITER, rewriter);\n     }\n \n     @Override\n     @Transient\n     public ExtensionRewriter getRewriter()\n     {\n-        return this.rewriter;\n+        return getProperty(PROPERTY_REWRITER);\n     }\n \n     @Override\n",
        "sha1": "6ffadb2",
        "sha2": "a564692",
        "config": "EMPTY_INTERSECTION_AGGREGATE"
    },
    "2885": {
        "size": 52,
        "decision": "break",
        "diff": "diff -ru /tmp/v1/xwiki-commons-core/xwiki-commons-job//src/main/java/org/xwiki/job/internal/DefaultJobStatusStore.java /tmp/v2/xwiki-commons-core/xwiki-commons-job//src/main/java/org/xwiki/job/internal/DefaultJobStatusStore.java\n--- /tmp/v1/xwiki-commons-core/xwiki-commons-job//src/main/java/org/xwiki/job/internal/DefaultJobStatusStore.java\t2022-06-06 22:30:07.344455793 +0200\n+++ /tmp/v2/xwiki-commons-core/xwiki-commons-job//src/main/java/org/xwiki/job/internal/DefaultJobStatusStore.java\t2022-06-06 22:30:07.368455927 +0200\n@@ -35,6 +35,7 @@\n import org.apache.commons.configuration2.PropertiesConfiguration;\n import org.apache.commons.configuration2.builder.FileBasedConfigurationBuilder;\n import org.apache.commons.configuration2.builder.fluent.Parameters;\n+import org.apache.commons.configuration2.builder.fluent.PropertiesBuilderParameters;\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.concurrent.BasicThreadFactory;\n@@ -55,7 +56,7 @@\n /**\n  * Default implementation of {@link JobStatusStorage}.\n  *\n- * @version $Id: 343bb988b418e7658093a2f0af75b47a93bd4bd3 $\n+ * @version $Id: 790af08fa2c9b472f55c762c77e24e6f756b1ac3 $\n  * @since 6.1M2\n  */\n @Component\n@@ -141,7 +142,17 @@\n             this.serializer = new JobStatusSerializer();\n \n             // Check if the store need to be upgraded\n-            FileBasedConfigurationBuilder<PropertiesConfiguration> builder = getStoreProperties();\n+            File folder = this.configuration.getStorage();\n+            File file = new File(folder, INDEX_FILE);\n+\n+            PropertiesBuilderParameters parameters = new Parameters().properties();\n+            if (file.exists()) {\n+                new Parameters().properties().setFile(file);\n+            }\n+\n+            FileBasedConfigurationBuilder<PropertiesConfiguration> builder =\n+                new FileBasedConfigurationBuilder<PropertiesConfiguration>(PropertiesConfiguration.class)\n+                    .configure(parameters);\n             PropertiesConfiguration properties = builder.getConfiguration();\n             int version = properties.getInt(INDEX_FILE_VERSION, 0);\n             if (VERSION > version) {\n@@ -149,7 +160,7 @@\n \n                 // Update version\n                 properties.setProperty(INDEX_FILE_VERSION, VERSION);\n-                builder.save();\n+                builder.getFileHandler().save(file);\n             }\n         } catch (Exception e) {\n             this.logger.error(\"Failed to load jobs\", e);\n@@ -294,14 +305,6 @@\n         return folder;\n     }\n \n-    private FileBasedConfigurationBuilder<PropertiesConfiguration> getStoreProperties()\n-    {\n-        File folder = this.configuration.getStorage();\n-\n-        return new FileBasedConfigurationBuilder<PropertiesConfiguration>(PropertiesConfiguration.class)\n-            .configure(new Parameters().properties().setFile(new File(folder, INDEX_FILE)));\n-    }\n-\n     /**\n      * @param status the job status to save\n      * @throws IOException when falling to store the provided status\ndiff -ru /tmp/v1/xwiki-commons-core/xwiki-commons-job//src/test/java/org/xwiki/job/internal/DefaultJobStatusStoreTest.java /tmp/v2/xwiki-commons-core/xwiki-commons-job//src/test/java/org/xwiki/job/internal/DefaultJobStatusStoreTest.java\n--- /tmp/v1/xwiki-commons-core/xwiki-commons-job//src/test/java/org/xwiki/job/internal/DefaultJobStatusStoreTest.java\t2022-06-06 22:30:07.344455793 +0200\n+++ /tmp/v2/xwiki-commons-core/xwiki-commons-job//src/test/java/org/xwiki/job/internal/DefaultJobStatusStoreTest.java\t2022-06-06 22:30:04.132437799 +0200\n@@ -24,7 +24,6 @@\n import java.util.List;\n \n import org.apache.commons.io.FileUtils;\n-import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n@@ -38,7 +37,10 @@\n import org.xwiki.job.event.status.JobStatus;\n import org.xwiki.test.mockito.MockitoComponentMockingRule;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verifyNoMoreInteractions;\n@@ -47,7 +49,7 @@\n /**\n  * Unit tests for {@link DefaultJobStatusStore}.\n  *\n- * @version $Id: fc70525ced397028dbe5c32ab7578f82415a3cfd $\n+ * @version $Id: 9fda6b63277349bfc8db6a08f98c7285d7353702 $\n  */\n public class DefaultJobStatusStoreTest\n {\n@@ -76,11 +78,11 @@\n     {\n         JobStatus jobStatus = this.componentManager.getComponentUnderTest().getJobStatus((List<String>) null);\n \n-        Assert.assertNotNull(jobStatus);\n-        Assert.assertNull(jobStatus.getRequest().getId());\n-        Assert.assertEquals(JobStatus.State.FINISHED, jobStatus.getState());\n+        assertNotNull(jobStatus);\n+        assertNull(jobStatus.getRequest().getId());\n+        assertEquals(JobStatus.State.FINISHED, jobStatus.getState());\n \n-        Assert.assertSame(jobStatus, this.componentManager.getComponentUnderTest().getJobStatus((List<String>) null));\n+        assertSame(jobStatus, this.componentManager.getComponentUnderTest().getJobStatus((List<String>) null));\n     }\n \n     @Test\n@@ -88,12 +90,11 @@\n     {\n         JobStatus jobStatus = this.componentManager.getComponentUnderTest().getJobStatus(Arrays.asList(\"id1\", \"id2\"));\n \n-        Assert.assertNotNull(jobStatus);\n-        Assert.assertEquals(Arrays.asList(\"id1\", \"id2\"), jobStatus.getRequest().getId());\n-        Assert.assertEquals(JobStatus.State.FINISHED, jobStatus.getState());\n+        assertNotNull(jobStatus);\n+        assertEquals(Arrays.asList(\"id1\", \"id2\"), jobStatus.getRequest().getId());\n+        assertEquals(JobStatus.State.FINISHED, jobStatus.getState());\n \n-        Assert.assertSame(jobStatus,\n-            this.componentManager.getComponentUnderTest().getJobStatus(Arrays.asList(\"id1\", \"id2\")));\n+        assertSame(jobStatus, this.componentManager.getComponentUnderTest().getJobStatus(Arrays.asList(\"id1\", \"id2\")));\n     }\n \n     @Test\n@@ -102,9 +103,9 @@\n         JobStatus jobStatus =\n             this.componentManager.getComponentUnderTest().getJobStatus(Arrays.asList(\"id1\", \"id2\", \"id3\"));\n \n-        Assert.assertNotNull(jobStatus);\n-        Assert.assertEquals(Arrays.asList(\"id1\", \"id2\", \"id3\"), jobStatus.getRequest().getId());\n-        Assert.assertEquals(JobStatus.State.FINISHED, jobStatus.getState());\n+        assertNotNull(jobStatus);\n+        assertEquals(Arrays.asList(\"id1\", \"id2\", \"id3\"), jobStatus.getRequest().getId());\n+        assertEquals(JobStatus.State.FINISHED, jobStatus.getState());\n     }\n \n     @Test\n@@ -113,7 +114,8 @@\n         JobStatus jobStatus =\n             this.componentManager.getComponentUnderTest().getJobStatus(Arrays.asList(\"invalidlogargument\"));\n \n-        Assert.assertEquals(3, jobStatus.getLog().size());\n+        assertNotNull(jobStatus);\n+        assertEquals(3, jobStatus.getLog().size());\n     }\n \n     @Test\n@@ -139,15 +141,15 @@\n \n         JobStatus jobStatus = this.componentManager.getComponentUnderTest().getJobStatus(id);\n \n-        Assert.assertNotNull(jobStatus);\n-        Assert.assertNull(jobStatus.getRequest().getId());\n-        Assert.assertEquals(JobStatus.State.FINISHED, jobStatus.getState());\n+        assertNotNull(jobStatus);\n+        assertNull(jobStatus.getRequest().getId());\n+        assertEquals(JobStatus.State.FINISHED, jobStatus.getState());\n \n-        Assert.assertSame(jobStatus, this.componentManager.getComponentUnderTest().getJobStatus(id));\n+        assertSame(jobStatus, this.componentManager.getComponentUnderTest().getJobStatus(id));\n \n         this.componentManager.getComponentUnderTest().remove(id);\n \n-        Assert.assertSame(null, this.componentManager.getComponentUnderTest().getJobStatus(id));\n+        assertSame(null, this.componentManager.getComponentUnderTest().getJobStatus(id));\n     }\n \n     @Test\n@@ -161,6 +163,6 @@\n \n         this.componentManager.getComponentUnderTest().store(jobStatus);\n \n-        Assert.assertSame(jobStatus, this.componentManager.getComponentUnderTest().getJobStatus(id));\n+        assertSame(jobStatus, this.componentManager.getComponentUnderTest().getJobStatus(id));\n     }\n }\n",
        "sha1": "6287cb5",
        "sha2": "7ee5210",
        "config": "EMPTY_INTERSECTION_AGGREGATE"
    }
}