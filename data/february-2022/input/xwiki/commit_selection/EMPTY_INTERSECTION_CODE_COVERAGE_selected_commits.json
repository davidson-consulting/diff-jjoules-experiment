{
    "2896": {
        "size": 23,
        "decision": "pass",
        "diff": "diff -ru /tmp/v1/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api//src/main/java/org/xwiki/extension/ExtensionRewriter.java /tmp/v2/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api//src/main/java/org/xwiki/extension/ExtensionRewriter.java\n--- /tmp/v1/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api//src/main/java/org/xwiki/extension/ExtensionRewriter.java\t2022-06-06 22:30:15.156499556 +0200\n+++ /tmp/v2/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api//src/main/java/org/xwiki/extension/ExtensionRewriter.java\t2022-06-06 22:30:11.808480800 +0200\n@@ -19,18 +19,20 @@\n  */\n package org.xwiki.extension;\n \n+import java.io.Serializable;\n+\n import org.xwiki.stability.Unstable;\n \n /**\n  * Interface used to allow external service modify manipulated extensions (change allowed namespaces, dependencies,\n  * etc.).\n  * \n- * @version $Id: a887fdb49e14463e77de55b76fc8182354b3f60b $\n+ * @version $Id: 8800a9b5e8aa5a4796ab47a2a0dc39944d30bfbd $\n  * @since 8.4.2\n  * @since 9.0RC1\n  */\n @Unstable\n-public interface ExtensionRewriter\n+public interface ExtensionRewriter extends Serializable\n {\n     /**\n      * @param extension the extension to filter\ndiff -ru /tmp/v1/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api//src/main/java/org/xwiki/extension/job/AbstractExtensionRequest.java /tmp/v2/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api//src/main/java/org/xwiki/extension/job/AbstractExtensionRequest.java\n--- /tmp/v1/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api//src/main/java/org/xwiki/extension/job/AbstractExtensionRequest.java\t2022-06-06 22:30:15.156499556 +0200\n+++ /tmp/v2/xwiki-commons-core/xwiki-commons-extension/xwiki-commons-extension-api//src/main/java/org/xwiki/extension/job/AbstractExtensionRequest.java\t2022-06-06 22:30:11.808480800 +0200\n@@ -34,7 +34,7 @@\n /**\n  * Base class for extension manipulation related {@link Request} implementations.\n  *\n- * @version $Id: 8f7d84fe626d341e0ffa3763a39b416dcf0dad26 $\n+ * @version $Id: b59dff3038ee6a7ab6c1f7f50d11f0f65b4081b1 $\n  * @since 4.0M1\n  */\n public abstract class AbstractExtensionRequest extends AbstractRequest implements ExtensionRequest\n@@ -65,12 +65,15 @@\n     public static final String PROPERTY_UNINSTALLALLOWED = \"uninstallAllowed\";\n \n     /**\n+     * @see #getRewriter()\n+     */\n+    public static final String PROPERTY_REWRITER = \"rewriter\";\n+\n+    /**\n      * Serialization identifier.\n      */\n     private static final long serialVersionUID = 1L;\n \n-    private transient ExtensionRewriter rewriter;\n-\n     /**\n      * Default constructor.\n      */\n@@ -91,10 +94,6 @@\n         if (extensions == null) {\n             setProperty(PROPERTY_EXTENSIONS, new ArrayList<ExtensionId>());\n         }\n-\n-        if (request instanceof ExtensionRequest) {\n-            this.rewriter = ((ExtensionRequest) request).getRewriter();\n-        }\n     }\n \n     @Override\n@@ -182,14 +181,14 @@\n     @Unstable\n     public void setRewriter(ExtensionRewriter rewriter)\n     {\n-        this.rewriter = rewriter;\n+        setProperty(PROPERTY_REWRITER, rewriter);\n     }\n \n     @Override\n     @Transient\n     public ExtensionRewriter getRewriter()\n     {\n-        return this.rewriter;\n+        return getProperty(PROPERTY_REWRITER);\n     }\n \n     @Override\n",
        "sha1": "6ffadb2",
        "sha2": "a564692",
        "config": "EMPTY_INTERSECTION_CODE_COVERAGE"
    },
    "105": {
        "size": 234,
        "decision": "break",
        "diff": "diff -ru /tmp/v1/xwiki-commons-core/xwiki-commons-xml//src/main/java/org/xwiki/xml/html/HTMLCleanerConfiguration.java /tmp/v2/xwiki-commons-core/xwiki-commons-xml//src/main/java/org/xwiki/xml/html/HTMLCleanerConfiguration.java\n--- /tmp/v1/xwiki-commons-core/xwiki-commons-xml//src/main/java/org/xwiki/xml/html/HTMLCleanerConfiguration.java\t2022-06-06 22:30:09.476467736 +0200\n+++ /tmp/v2/xwiki-commons-core/xwiki-commons-xml//src/main/java/org/xwiki/xml/html/HTMLCleanerConfiguration.java\t2022-06-06 22:30:09.512467938 +0200\n@@ -22,13 +22,14 @@\n import java.util.List;\n import java.util.Map;\n \n+import org.xwiki.stability.Unstable;\n import org.xwiki.xml.html.filter.HTMLFilter;\n \n /**\n  * Represents a configuration for the {@link HTMLCleaner} and allows to configure the cleaning parameters and cleaning\n  * filters to apply.\n  *\n- * @version $Id: 34addd60a0d8db944882b11527b9bb67236d2ef8 $\n+ * @version $Id: 5d43a81689503ad9180bf10584a0ed7c6d25c184 $\n  * @since 1.8.1\n  */\n public interface HTMLCleanerConfiguration\n@@ -55,6 +56,13 @@\n     String TRANSLATE_SPECIAL_ENTITIES = \"translateSpecialEntities\";\n \n     /**\n+     * The HTML (major) version. Should be \"5\" for HTML5 and \"4\" otherwise for the default implementation.\n+     * @since 14.0RC1\n+     */\n+    @Unstable\n+    String HTML_VERSION = \"htmlVersion\";\n+\n+    /**\n      * @return the ordered list of filters to use for cleaning the HTML content\n      */\n     List<HTMLFilter> getFilters();\ndiff -ru /tmp/v1/xwiki-commons-core/xwiki-commons-xml//src/main/java/org/xwiki/xml/html/HTMLConstants.java /tmp/v2/xwiki-commons-core/xwiki-commons-xml//src/main/java/org/xwiki/xml/html/HTMLConstants.java\n--- /tmp/v1/xwiki-commons-core/xwiki-commons-xml//src/main/java/org/xwiki/xml/html/HTMLConstants.java\t2022-06-06 22:30:09.476467736 +0200\n+++ /tmp/v2/xwiki-commons-core/xwiki-commons-xml//src/main/java/org/xwiki/xml/html/HTMLConstants.java\t2022-06-06 22:30:09.512467938 +0200\n@@ -22,7 +22,7 @@\n /**\n  * HTML Constants.\n  *\n- * @version $Id: 208c24c5bd7dfa20c13aced9e8a729c7f480c0fe $\n+ * @version $Id: 73287b2aeba500fb88df45e3ba2282f933252011 $\n  * @since 1.6M2\n  */\n public interface HTMLConstants\n@@ -176,6 +176,12 @@\n     String TAG_STRONG = \"strong\";\n \n     /**\n+     * HTML &lt;tt&gt; tag name.\n+     * @since 14.0RC1\n+     */\n+    String TAG_TT = \"tt\";\n+\n+    /**\n      * HTML &lt;p&gt; tag name.\n      */\n     String TAG_P = \"p\";\n@@ -301,6 +307,84 @@\n     String TAG_DL = \"dl\";\n \n     /**\n+     * HTML &lt;article&gt; tag.\n+     * @since 14.0RC1\n+     */\n+    String TAG_ARTICLE = \"article\";\n+\n+    /**\n+     * HTML &lt;aside&gt; tag.\n+     * @since 14.0RC1\n+     */\n+    String TAG_ASIDE = \"aside\";\n+\n+    /**\n+     * HTML &lt;details&gt; tag.\n+     * @since 14.0RC1\n+     */\n+    String TAG_DETAILS = \"details\";\n+\n+    /**\n+     * HTML &lt;figure&gt; tag.\n+     * @since 14.0RC1\n+     */\n+    String TAG_FIGURE = \"figure\";\n+\n+    /**\n+     * HTML &lt;figcaption&gt; tag.\n+     * @since 14.0RC1\n+     */\n+    String TAG_FIGCAPTION = \"figcaption\";\n+\n+    /**\n+     * HTML &lt;footer&gt; tag.\n+     * @since 14.0RC1\n+     */\n+    String TAG_FOOTER = \"footer\";\n+\n+    /**\n+     * HTML &lt;header&gt; tag.\n+     * @since 14.0RC1\n+     */\n+    String TAG_HEADER = \"header\";\n+\n+    /**\n+     * HTML &lt;hgroup&gt; tag.\n+     * @since 14.0RC1\n+     */\n+    String TAG_HGROUP = \"hgroup\";\n+\n+    /**\n+     * HTML &lt;main&gt; tag.\n+     * @since 14.0RC1\n+     */\n+    String TAG_MAIN = \"main\";\n+\n+    /**\n+     * HTML &lt;menu&gt; tag.\n+     * @since 14.0RC1\n+     */\n+    String TAG_MENU = \"menu\";\n+\n+    /**\n+     * HTML &lt;nav&gt; tag.\n+     * @since 14.0RC1\n+     */\n+    String TAG_NAV = \"nav\";\n+\n+    /**\n+     * HTML &lt;section&gt; tag.\n+     * @since 14.0RC1\n+     */\n+    String TAG_SECTION = \"section\";\n+\n+    /**\n+     * HTML &lt;template&gt; tag.\n+     * @since 14.0RC1\n+     */\n+    String TAG_TEMPLATE = \"template\";\n+\n+    /**\n      * HTML id attribute name.\n      */\n     String ATTRIBUTE_ID = \"id\";\ndiff -ru /tmp/v1/xwiki-commons-core/xwiki-commons-xml//src/main/java/org/xwiki/xml/internal/html/DefaultHTMLCleaner.java /tmp/v2/xwiki-commons-core/xwiki-commons-xml//src/main/java/org/xwiki/xml/internal/html/DefaultHTMLCleaner.java\n--- /tmp/v1/xwiki-commons-core/xwiki-commons-xml//src/main/java/org/xwiki/xml/internal/html/DefaultHTMLCleaner.java\t2022-06-06 22:30:09.476467736 +0200\n+++ /tmp/v2/xwiki-commons-core/xwiki-commons-xml//src/main/java/org/xwiki/xml/internal/html/DefaultHTMLCleaner.java\t2022-06-06 22:30:09.512467938 +0200\n@@ -35,6 +35,7 @@\n import org.htmlcleaner.HtmlCleaner;\n import org.htmlcleaner.TagNode;\n import org.htmlcleaner.TagTransformation;\n+import org.htmlcleaner.TrimAttributeTagTransformation;\n import org.htmlcleaner.XWikiDOMSerializer;\n import org.w3c.dom.Document;\n import org.xwiki.component.annotation.Component;\n@@ -49,7 +50,7 @@\n  * Default implementation for {@link org.xwiki.xml.html.HTMLCleaner} using the <a href=\"HTML Cleaner\n  * framework>http://htmlcleaner.sourceforge.net/</a>.\n  *\n- * @version $Id: 9e931ec9aad775acf4a3b6185316a5688e641e35 $\n+ * @version $Id: aedb0bd9ba2e144e3c54b758ebe81d3cb6306b81 $\n  * @since 1.6M1\n  */\n @Component\n@@ -160,8 +161,13 @@\n             // Replace by the following when fixed:\n             //   result = new DomSerializer(cleanerProperties, false).createDOM(cleanedNode);\n \n-            cleanedNode.setDocType(new DoctypeToken(\"html\", \"PUBLIC\", \"-//W3C//DTD XHTML 1.0 Strict//EN\",\n-                \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"));\n+            if (getHTMLVersion(configuration) == 5) {\n+                cleanedNode.setDocType(new DoctypeToken(HTMLConstants.TAG_HTML, null, null, null));\n+            } else {\n+                cleanedNode.setDocType(\n+                    new DoctypeToken(HTMLConstants.TAG_HTML, \"PUBLIC\", \"-//W3C//DTD XHTML 1.0 Strict//EN\",\n+                        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"));\n+            }\n             result =\n                 new XWikiDOMSerializer(cleanerProperties).createDOM(getAvailableDocumentBuilder(), cleanedNode);\n         } catch (ParserConfigurationException ex) {\n@@ -232,9 +238,7 @@\n         defaultProperties.setTransResCharsToNCR(useCharacterReferences);\n \n         // By default, we are cleaning XHTML 1.0 code, not HTML 5.\n-        // Note: Tests are broken if we don't set the version 4, meaning that supporting HTML5 requires some work.\n-        // TODO: handle HTML5 correctly (see: https://jira.xwiki.org/browse/XCOMMONS-901)\n-        defaultProperties.setHtmlVersion(4);\n+        defaultProperties.setHtmlVersion(getHTMLVersion(configuration));\n \n         // We trim values by default for all attributes but the input value attribute.\n         // The only way to currently do that is to switch off this flag, and to create a dedicated TagTransformation.\n@@ -283,6 +287,16 @@\n         tt.addAttributeTransformation(HTMLConstants.ATTRIBUTE_STYLE, \"text-align:center\");\n         defaultTransformations.addTransformation(tt);\n \n+        if (getHTMLVersion(configuration) == 5) {\n+            // Font tags are removed before the filters are applied in HTML5, we thus need a transformation here.\n+            defaultTransformations.addTransformation(new FontTagTransformation());\n+\n+            tt = new TrimAttributeTagTransformation(HTMLConstants.TAG_TT,\n+                HTMLConstants.TAG_SPAN);\n+            tt.addAttributeTransformation(HTMLConstants.ATTRIBUTE_CLASS, \"${class} monospace\");\n+            defaultTransformations.addTransformation(tt);\n+        }\n+\n         String restricted = configuration.getParameters().get(HTMLCleanerConfiguration.RESTRICTED);\n         if (\"true\".equalsIgnoreCase(restricted)) {\n \n@@ -295,4 +309,19 @@\n \n         return defaultTransformations;\n     }\n+\n+    /**\n+     * @param configuration The configuration to parse.\n+     * @return The HTML version specified in the configuration.\n+     * @since 14.0RC1\n+     */\n+    private int getHTMLVersion(HTMLCleanerConfiguration configuration)\n+    {\n+        String param = configuration.getParameters().get(HTMLCleanerConfiguration.HTML_VERSION);\n+        int htmlVersion = 4;\n+        if (\"5\".equals(param)) {\n+            htmlVersion = 5;\n+        }\n+        return htmlVersion;\n+    }\n }\ndiff -ru /tmp/v1/xwiki-commons-core/xwiki-commons-xml//src/main/java/org/xwiki/xml/internal/html/filter/BodyFilter.java /tmp/v2/xwiki-commons-core/xwiki-commons-xml//src/main/java/org/xwiki/xml/internal/html/filter/BodyFilter.java\n--- /tmp/v1/xwiki-commons-core/xwiki-commons-xml//src/main/java/org/xwiki/xml/internal/html/filter/BodyFilter.java\t2022-06-06 22:30:09.480467758 +0200\n+++ /tmp/v2/xwiki-commons-core/xwiki-commons-xml//src/main/java/org/xwiki/xml/internal/html/filter/BodyFilter.java\t2022-06-06 22:30:08.832464128 +0200\n@@ -38,7 +38,7 @@\n  * Wraps direct children of the Body tag with paragraphs. For example {@code a <table>...</table> b <p>c</p> d} is\n  * transformed into {@code <p>a </p><table>...</table><p> b </p><p>c</p><p> d</p>}.\n  *\n- * @version $Id: 8d16caf9356c0751e9549798a6a9cf076941c5cd $\n+ * @version $Id: 485e42ebdb757d84dd20f452f66b3fa6670fc6ce $\n  * @since 1.8RC3\n  */\n @Component\n@@ -55,11 +55,18 @@\n      * \"P | %heading; | %list; | %preformatted; | DL | DIV | NOSCRIPT |\n      * BLOCKQUOTE | FORM | HR | TABLE | FIELDSET | ADDRESS\">\n      * }</pre>\n+     *\n+     * We also use this list for HTML5 where in theory everything is allowed, but we instead only allow flow content\n+     * that is not also phrasing content except for {@code <ins>} and {@code <del>} that were already allowed in HTML\n+     * 4 and {@code <template>} which is not rendered and thus no extra paragraph should be created for it.\n      */\n     private static final List<String> ALLOWED_BODY_TAGS = Arrays.asList(HTMLConstants.TAG_ADDRESS,\n-        HTMLConstants.TAG_BLOCKQUOTE, HTMLConstants.TAG_DEL, HTMLConstants.TAG_DIV, HTMLConstants.TAG_FIELDSET,\n-        HTMLConstants.TAG_FORM, HTMLConstants.TAG_HR, HTMLConstants.TAG_INS, HTMLConstants.TAG_NOSCRIPT,\n-        HTMLConstants.TAG_P, HTMLConstants.TAG_PRE, HTMLConstants.TAG_SCRIPT, HTMLConstants.TAG_TABLE,\n+        HTMLConstants.TAG_ARTICLE, HTMLConstants.TAG_ASIDE, HTMLConstants.TAG_BLOCKQUOTE, HTMLConstants.TAG_DEL,\n+        HTMLConstants.TAG_DETAILS, HTMLConstants.TAG_DIV, HTMLConstants.TAG_FIELDSET, HTMLConstants.TAG_FIGURE,\n+        HTMLConstants.TAG_FOOTER, HTMLConstants.TAG_FORM, HTMLConstants.TAG_HEADER, HTMLConstants.TAG_HGROUP,\n+        HTMLConstants.TAG_HR, HTMLConstants.TAG_INS, HTMLConstants.TAG_MAIN, HTMLConstants.TAG_MENU,\n+        HTMLConstants.TAG_NAV, HTMLConstants.TAG_NOSCRIPT, HTMLConstants.TAG_P, HTMLConstants.TAG_PRE,\n+        HTMLConstants.TAG_SCRIPT, HTMLConstants.TAG_SECTION, HTMLConstants.TAG_TABLE, HTMLConstants.TAG_TEMPLATE,\n         HTMLConstants.TAG_H1, HTMLConstants.TAG_H2, HTMLConstants.TAG_H3, HTMLConstants.TAG_H4, HTMLConstants.TAG_H5,\n         HTMLConstants.TAG_H6, HTMLConstants.TAG_DL, HTMLConstants.TAG_OL, HTMLConstants.TAG_UL);\n \ndiff -ru /tmp/v1/xwiki-commons-core/xwiki-commons-xml//src/main/java/org/xwiki/xml/internal/html/filter/FontFilter.java /tmp/v2/xwiki-commons-core/xwiki-commons-xml//src/main/java/org/xwiki/xml/internal/html/filter/FontFilter.java\n--- /tmp/v1/xwiki-commons-core/xwiki-commons-xml//src/main/java/org/xwiki/xml/internal/html/filter/FontFilter.java\t2022-06-06 22:30:09.480467758 +0200\n+++ /tmp/v2/xwiki-commons-core/xwiki-commons-xml//src/main/java/org/xwiki/xml/internal/html/filter/FontFilter.java\t2022-06-06 22:30:09.376467176 +0200\n@@ -19,22 +19,26 @@\n  */\n package org.xwiki.xml.internal.html.filter;\n \n-import java.util.HashMap;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n import javax.inject.Named;\n import javax.inject.Singleton;\n \n+import org.apache.xerces.util.DOMUtil;\n+import org.w3c.dom.Attr;\n import org.w3c.dom.Document;\n import org.w3c.dom.Element;\n import org.xwiki.component.annotation.Component;\n import org.xwiki.xml.html.filter.AbstractHTMLFilter;\n+import org.xwiki.xml.internal.html.FontTagTransformation;\n \n /**\n  * Replaces invalid &lt;font&gt; tags with equivalent &lt;span&gt; tags using inline css rules.\n  *\n- * @version $Id: af23f719003de35153026d7f15ffd9fcc43b943d $\n+ * @version $Id: 36a492c56ac816dbdccdb5c36d8eaab79c0d0897 $\n  * @since 1.8RC2\n  */\n @Component\n@@ -43,28 +47,6 @@\n public class FontFilter extends AbstractHTMLFilter\n {\n     /**\n-     * A map holding the translation from 'size' attribute of html font tag to 'font-size' css property.\n-     */\n-    private static final Map<String, String> FONT_SIZE_MAP;\n-\n-    static {\n-        FONT_SIZE_MAP = new HashMap<>();\n-        FONT_SIZE_MAP.put(\"1\", \"0.6em\");\n-        FONT_SIZE_MAP.put(\"2\", \"0.8em\");\n-        FONT_SIZE_MAP.put(\"3\", \"1.0em\");\n-        FONT_SIZE_MAP.put(\"4\", \"1.2em\");\n-        FONT_SIZE_MAP.put(\"5\", \"1.4em\");\n-        FONT_SIZE_MAP.put(\"6\", \"1.6em\");\n-        FONT_SIZE_MAP.put(\"7\", \"1.8em\");\n-        FONT_SIZE_MAP.put(\"-3\", \"0.4em\");\n-        FONT_SIZE_MAP.put(\"-2\", FONT_SIZE_MAP.get(\"1\"));\n-        FONT_SIZE_MAP.put(\"-1\", FONT_SIZE_MAP.get(\"2\"));\n-        FONT_SIZE_MAP.put(\"+1\", FONT_SIZE_MAP.get(\"4\"));\n-        FONT_SIZE_MAP.put(\"+2\", FONT_SIZE_MAP.get(\"5\"));\n-        FONT_SIZE_MAP.put(\"+3\", FONT_SIZE_MAP.get(\"6\"));\n-    }\n-\n-    /**\n      * {@inheritDoc}\n      *\n      * <p>The {@link FontFilter} does not use any cleaningParameters passed in.</p>\n@@ -76,25 +58,13 @@\n         for (Element fontTag : fontTags) {\n             Element span = document.createElement(TAG_SPAN);\n             moveChildren(fontTag, span);\n-            StringBuilder builder = new StringBuilder();\n-            if (fontTag.hasAttribute(ATTRIBUTE_FONTCOLOR)) {\n-                builder.append(String.format(\"color:%s;\", fontTag.getAttribute(ATTRIBUTE_FONTCOLOR)));\n-            }\n-            if (fontTag.hasAttribute(ATTRIBUTE_FONTFACE)) {\n-                builder.append(String.format(\"font-family:%s;\", fontTag.getAttribute(ATTRIBUTE_FONTFACE)));\n-            }\n-            if (fontTag.hasAttribute(ATTRIBUTE_FONTSIZE)) {\n-                String fontSize = fontTag.getAttribute(ATTRIBUTE_FONTSIZE);\n-                String fontSizeCss = FONT_SIZE_MAP.get(fontSize);\n-                fontSizeCss = (fontSizeCss != null) ? fontSizeCss : fontSize;\n-                builder.append(String.format(\"font-size:%s;\", fontSizeCss));\n-            }\n-            if (fontTag.hasAttribute(ATTRIBUTE_STYLE) && fontTag.getAttribute(ATTRIBUTE_STYLE).trim().length() == 0) {\n-                builder.append(fontTag.getAttribute(ATTRIBUTE_STYLE));\n-            }\n-            if (builder.length() > 0) {\n-                span.setAttribute(ATTRIBUTE_STYLE, builder.toString());\n-            }\n+\n+            Map<String, String> attributes =\n+                Arrays.stream(DOMUtil.getAttrs(fontTag)).collect(Collectors.toMap(Attr::getName,\n+                Attr::getValue));\n+\n+            (new FontTagTransformation()).applyTagTransformations(attributes).forEach(span::setAttribute);\n+\n             fontTag.getParentNode().insertBefore(span, fontTag);\n             fontTag.getParentNode().removeChild(fontTag);\n         }\nOnly in /tmp/v2/xwiki-commons-core/xwiki-commons-xml//src/main/java/org/xwiki/xml/internal/html: FontTagTransformation.java\ndiff -ru /tmp/v1/xwiki-commons-core/xwiki-commons-xml//src/test/java/org/xwiki/xml/internal/html/DefaultHTMLCleanerTest.java /tmp/v2/xwiki-commons-core/xwiki-commons-xml//src/test/java/org/xwiki/xml/internal/html/DefaultHTMLCleanerTest.java\n--- /tmp/v1/xwiki-commons-core/xwiki-commons-xml//src/test/java/org/xwiki/xml/internal/html/DefaultHTMLCleanerTest.java\t2022-06-06 22:30:09.480467758 +0200\n+++ /tmp/v2/xwiki-commons-core/xwiki-commons-xml//src/test/java/org/xwiki/xml/internal/html/DefaultHTMLCleanerTest.java\t2022-06-06 22:30:09.512467938 +0200\n@@ -30,6 +30,7 @@\n import org.htmlcleaner.DomSerializer;\n import org.htmlcleaner.HtmlCleaner;\n import org.htmlcleaner.TagNode;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n import org.w3c.dom.Document;\n@@ -55,7 +56,7 @@\n /**\n  * Unit tests for {@link DefaultHTMLCleaner}.\n  *\n- * @version $Id: 241828847dc879a344bea6a9b6b25426676d3823 $\n+ * @version $Id: 2da4e33a129c7a13367fde52ac7917464fed8708 $\n  * @since 1.6M1\n  */\n @ComponentTest\n@@ -83,7 +84,44 @@\n     private static final String FOOTER = \"</body></html>\\n\";\n \n     @InjectMockComponents\n-    private DefaultHTMLCleaner cleaner;\n+    protected DefaultHTMLCleaner cleaner;\n+\n+    protected HTMLCleanerConfiguration cleanerConfiguration;\n+\n+    /**\n+     * @return The expected XHTML 1.0 header.\n+     */\n+    public String getHeader()\n+    {\n+        return HEADER;\n+    }\n+\n+    /**\n+     * @return The expected full XHTML 1.0 header up to &lt;body&gt;.\n+     */\n+    public String getHeaderFull()\n+    {\n+        return HEADER_FULL;\n+    }\n+\n+    /**\n+     * Cleans using the cleaner configuration {@link DefaultHTMLCleanerTest#cleanerConfiguration}.\n+     *\n+     * Ensures that always the correct configuration is used and allows executing the same tests for HTML 4 and HTML 5.\n+     *\n+     * @param originalHtmlContent The content to clean as string.\n+     * @return The cleaned document.\n+     */\n+    protected Document clean(String originalHtmlContent)\n+    {\n+        return this.cleaner.clean(new StringReader(originalHtmlContent), cleanerConfiguration);\n+    }\n+\n+    @BeforeEach\n+    void setUpCleaner()\n+    {\n+        this.cleanerConfiguration = this.cleaner.getDefaultConfiguration();\n+    }\n \n     @Test\n     void elementExpansion()\n@@ -248,12 +286,11 @@\n     @Test\n     void explicitFilterList()\n     {\n-        HTMLCleanerConfiguration configuration = this.cleaner.getDefaultConfiguration();\n-        configuration.setFilters(Collections.emptyList());\n-        String result = HTMLUtils.toString(this.cleaner.clean(new StringReader(\"something\"), configuration));\n+        this.cleanerConfiguration.setFilters(Collections.emptyList());\n+        String result = HTMLUtils.toString(clean(\"something\"));\n         // Note that if the default Body filter had been executed the result would have been:\n         // <p>something</p>.\n-        assertEquals(HEADER_FULL + \"something\" + FOOTER, result);\n+        assertEquals(getHeaderFull() + \"something\" + FOOTER, result);\n     }\n \n     /**\n@@ -262,28 +299,26 @@\n     @Test\n     void restrictedHtml()\n     {\n-        HTMLCleanerConfiguration configuration = this.cleaner.getDefaultConfiguration();\n-        Map<String, String> parameters = new HashMap<>();\n-        parameters.putAll(configuration.getParameters());\n+        Map<String, String> parameters = new HashMap<>(this.cleanerConfiguration.getParameters());\n         parameters.put(\"restricted\", \"true\");\n-        configuration.setParameters(parameters);\n-        Document document = this.cleaner.clean(new StringReader(\"<script>alert(\\\"foo\\\")</script>\"), configuration);\n+        this.cleanerConfiguration.setParameters(parameters);\n+        Document document = clean(\"<script>alert(\\\"foo\\\")</script>\");\n \n         String textContent =\n             document.getElementsByTagName(\"pre\").item(0).getTextContent();\n         assertEquals(\"alert(\\\"foo\\\")\", textContent);\n \n         String result = HTMLUtils.toString(document);\n-        assertEquals(HEADER_FULL + \"<pre>alert(\\\"foo\\\")</pre>\" + FOOTER, result);\n+        assertEquals(getHeaderFull() + \"<pre>alert(\\\"foo\\\")</pre>\" + FOOTER, result);\n \n-        document = this.cleaner.clean(new StringReader(\"<style>p {color:white;}</style>\"), configuration);\n+        document = clean(\"<style>p {color:white;}</style>\");\n \n         textContent =\n             document.getElementsByTagName(\"pre\").item(0).getTextContent();\n         assertEquals(\"p {color:white;}\", textContent);\n \n         result = HTMLUtils.toString(document);\n-        assertEquals(HEADER_FULL + \"<pre>p {color:white;}</pre>\" + FOOTER, result);\n+        assertEquals(getHeaderFull() + \"<pre>p {color:white;}</pre>\" + FOOTER, result);\n     }\n \n     /**\n@@ -292,7 +327,7 @@\n     @Test\n     void fullXHTMLHeader()\n     {\n-        assertHTML(\"<p>test</p>\", HEADER_FULL + \"<p>test</p>\" + FOOTER);\n+        assertHTML(\"<p>test</p>\", getHeaderFull() + \"<p>test</p>\" + FOOTER);\n     }\n \n     /**\n@@ -303,12 +338,11 @@\n     {\n         String actual = \"<p id=\\\"x\\\">1</p><p id=\\\"xy\\\">2</p><p id=\\\"x\\\">3</p>\";\n         String expected = \"<p id=\\\"x\\\">1</p><p id=\\\"xy\\\">2</p><p id=\\\"x0\\\">3</p>\";\n-        HTMLCleanerConfiguration config = this.cleaner.getDefaultConfiguration();\n-        List<HTMLFilter> filters = new ArrayList<>(config.getFilters());\n+        List<HTMLFilter> filters = new ArrayList<>(this.cleanerConfiguration.getFilters());\n         filters.add(componentManager.getInstance(HTMLFilter.class, \"uniqueId\"));\n-        config.setFilters(filters);\n-        assertEquals(HEADER_FULL + expected + FOOTER,\n-            HTMLUtils.toString(this.cleaner.clean(new StringReader(actual), config)));\n+        this.cleanerConfiguration.setFilters(filters);\n+        assertEquals(getHeaderFull() + expected + FOOTER,\n+            HTMLUtils.toString(clean(actual)));\n     }\n \n     /**\n@@ -322,7 +356,7 @@\n             \"<p>before</p>\\n\" + \"<p><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" version=\\\"1.1\\\">\\n\"\n                 + \"<circle cx=\\\"100\\\" cy=\\\"50\\\" fill=\\\"red\\\" r=\\\"40\\\" stroke=\\\"black\\\" stroke-width=\\\"2\\\"></circle>\\n\"\n                 + \"</svg></p>\\n\" + \"<p>after</p>\\n\";\n-        assertHTML(input, HEADER_FULL + input + FOOTER);\n+        assertHTML(input, getHeaderFull() + input + FOOTER);\n     }\n \n     /**\n@@ -348,8 +382,8 @@\n                 + \"        <title>SVG Title Demo example</title>\\n\"\n                 + \"        <rect height=\\\"50\\\" style=\\\"fill:none; stroke:blue; stroke-width:1px\\\" width=\\\"200\\\" x=\\\"10\\\" \"\n                 + \"y=\\\"10\\\"></rect>\\n\" + \"      </g>\\n\" + \"    </svg>\\n\" + \"    <p>after</p>\\n\";\n-        assertEquals(HEADER + input + FOOTER,\n-            HTMLUtils.toString(this.cleaner.clean(new StringReader(input))));\n+        assertEquals(getHeader() + input + FOOTER,\n+            HTMLUtils.toString(clean(input)));\n     }\n \n     /**\n@@ -362,14 +396,15 @@\n         String input = \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"><head></head><body>\";\n \n         // Default\n-        assertEquals(HEADER + input + FOOTER,\n-            HTMLUtils.toString(this.cleaner.clean(new StringReader(input))));\n+        assertEquals(getHeader() + input + FOOTER,\n+            HTMLUtils.toString(clean(input)));\n \n         // Configured for namespace awareness being false\n-        HTMLCleanerConfiguration config = this.cleaner.getDefaultConfiguration();\n-        config.setParameters(Collections.singletonMap(HTMLCleanerConfiguration.NAMESPACES_AWARE, \"false\"));\n-        assertEquals(HEADER + \"<html><head></head><body>\" + FOOTER,\n-            HTMLUtils.toString(this.cleaner.clean(new StringReader(input), config)));\n+        Map<String, String> parameters = new HashMap<>(this.cleanerConfiguration.getParameters());\n+        parameters.put(HTMLCleanerConfiguration.NAMESPACES_AWARE, \"false\");\n+        this.cleanerConfiguration.setParameters(parameters);\n+        assertEquals(getHeader() + \"<html><head></head><body>\" + FOOTER,\n+            HTMLUtils.toString(clean(input)));\n     }\n \n     /**\n@@ -379,14 +414,14 @@\n     void cleanEmptyDIV()\n     {\n         String input = \"<div id=\\\"y\\\"></div><div id=\\\"z\\\">something</div>\";\n-        assertHTML(input, HEADER_FULL + input + FOOTER);\n+        assertHTML(input, getHeaderFull() + input + FOOTER);\n     }\n \n     @Test\n     void verifyLegendTagNotStripped()\n     {\n         String input = \"<fieldset><legend>test</legend><div>content</div></fieldset>\";\n-        assertHTML(input, HEADER_FULL + input + FOOTER);\n+        assertHTML(input, getHeaderFull() + input + FOOTER);\n     }\n \n     @Test\n@@ -421,22 +456,22 @@\n     @Test\n     void verifyEntitiesAreNotBroken()\n     {\n-        Document document = this.cleaner.clean(new StringReader(\"<p>&Eacute;</p>\"));\n+        Document document = clean(\"<p>&Eacute;</p>\");\n         String content = document.getElementsByTagName(\"p\").item(0).getTextContent();\n         assertEquals(\"\u00c9\", content);\n         assertHTML(\"<p>\u00c9</p>\", \"&Eacute;\");\n \n-        document = this.cleaner.clean(new StringReader(\"<p>&frac14;</p>\"));\n+        document = clean(\"<p>&frac14;</p>\");\n         content = document.getElementsByTagName(\"p\").item(0).getTextContent();\n         assertEquals(\"\u00bc\", content);\n         assertHTML(\"<p>\u00bc</p>\", \"&frac14;\");\n \n-        document = this.cleaner.clean(new StringReader(\"<p>&f!rac14;</p>\"));\n+        document = clean(\"<p>&f!rac14;</p>\");\n         content = document.getElementsByTagName(\"p\").item(0).getTextContent();\n         assertEquals(\"&f!rac14;\", content);\n         assertHTML(\"<p>&amp;f!rac14;</p>\", \"&f!rac14;\");\n \n-        document = this.cleaner.clean(new StringReader(\"<p>&frac12;</p>\"));\n+        document = clean(\"<p>&frac12;</p>\");\n         content = document.getElementsByTagName(\"p\").item(0).getTextContent();\n         assertEquals(\"\u00bd\", content);\n         assertHTML(\"<p>\u00bd</p>\", \"&frac12;\");\n@@ -447,16 +482,16 @@\n     {\n         String content = \"<p>1&gt;2&amp;3&nbsp;4&frac12;5\u00f6\u00fc\u00e4\u0103\u00e2\u00ee\u0219</p>\";\n         String expectedContent = \"1>2&3\u00a04\u00bd5\u00f6\u00fc\u00e4\u0103\u00e2\u00ee\u0219\";\n-        Document document = this.cleaner.clean(new StringReader(content));\n+        Document document = clean(content);\n         String obtainedContent = document.getElementsByTagName(\"p\").item(0).getTextContent();\n         assertEquals(expectedContent, obtainedContent);\n         assertHTML(\"<p>1&gt;2&amp;3\u00a04\u00bd5\u00f6\u00fc\u00e4\u0103\u00e2\u00ee\u0219</p>\", content);\n \n-        HTMLCleanerConfiguration htmlCleanerConfiguration = new DefaultHTMLCleanerConfiguration();\n-        htmlCleanerConfiguration\n-            .setParameters(Collections.singletonMap(HTMLCleanerConfiguration.TRANSLATE_SPECIAL_ENTITIES, \"true\"));\n+        Map<String, String> parameters = new HashMap<>(this.cleanerConfiguration.getParameters());\n+        parameters.put(HTMLCleanerConfiguration.TRANSLATE_SPECIAL_ENTITIES, \"true\");\n+        this.cleanerConfiguration.setParameters(parameters);\n         assertHTML(\"<p>1&amp;gt;2&amp;amp;3\u00a04\u00bd5\u00f6\u00fc\u00e4\u0103\u00e2\u00ee\u0219</p>\",\n-            \"<p>1&gt;2&amp;3&nbsp;4&frac12;5\u00f6\u00fc\u00e4\u0103\u00e2\u00ee\u0219</p>\", htmlCleanerConfiguration);\n+            \"<p>1&gt;2&amp;3&nbsp;4&frac12;5\u00f6\u00fc\u00e4\u0103\u00e2\u00ee\u0219</p>\");\n     }\n \n     @Test\n@@ -500,14 +535,14 @@\n         // Note: single quotes are not escaped since they're valid chars in attribute values that are surrounded by\n         // quotes. And HTMLCleaner will convert single quoted attributes into double-quoted ones.\n         String htmlInput = \"<div foo=\\\"aaa&quot;bbb&amp;ccc&gt;ddd&lt;eee&apos;fff\\\">content</div>\";\n-        Document document = this.cleaner.clean(new StringReader(htmlInput));\n+        Document document = clean(htmlInput);\n \n         String textContent =\n             document.getElementsByTagName(\"div\").item(0).getAttributes().getNamedItem(\"foo\").getTextContent();\n         assertEquals(\"aaa\\\"bbb&ccc>ddd<eee'fff\", textContent);\n \n         htmlInput = \"<div foo='aaa&quot;bbb&amp;ccc&gt;ddd&lt;eee&apos;fff'>content</div>\";\n-        document = this.cleaner.clean(new StringReader(htmlInput));\n+        document = clean(htmlInput);\n \n         textContent =\n             document.getElementsByTagName(\"div\").item(0).getAttributes().getNamedItem(\"foo\").getTextContent();\n@@ -523,7 +558,7 @@\n     void controlCharacters() throws Exception\n     {\n         String htmlInput = \"<p>\\u0008</p>\";\n-        Document document = this.cleaner.clean(new StringReader(htmlInput));\n+        Document document = clean(htmlInput);\n \n         String textContent =\n             document.getElementsByTagName(\"p\").item(0).getTextContent();\n@@ -531,7 +566,7 @@\n         assertHTML(\" \", \"\\u0008\");\n \n         htmlInput = \"<p>&#8;</p>\";\n-        document = this.cleaner.clean(new StringReader(htmlInput));\n+        document = clean(htmlInput);\n \n         // HtmlCleaner currently doesn't handle properly unicode characters: asking it to recognize them\n         // involves that all entities will be escaped during the parsing and that's not what we want. So we\n@@ -543,7 +578,7 @@\n         assertHTML(\"<p>&#8;</p>\", \"&#8;\");\n \n         htmlInput = \"<p foo=\\\"&#8;\\\">content</p>\";\n-        document = this.cleaner.clean(new StringReader(htmlInput));\n+        document = clean(htmlInput);\n \n         // HtmlCleaner currently doesn't handle properly unicode characters: asking it to recognize them\n         // involves that all entities will be escaped during the parsing and that's not what we want. So we\n@@ -554,36 +589,36 @@\n         assertHTML(\"<p foo=\\\"&#8;\\\">content</p>\", \"<p foo=\\\"&#8;\\\">content</p>\");\n     }\n \n-    private void assertHTML(String expected, String actual)\n+    @Test\n+    void ttElement()\n     {\n-        Document documentValue = this.cleaner.clean(new StringReader(actual));\n-        assertEquals(HEADER_FULL + expected + FOOTER, HTMLUtils.toString(documentValue));\n+        assertHTML(\"<p><tt>Monospace Text</tt></p>\", \"<tt>Monospace Text</tt>\");\n     }\n \n-    private void assertHTML(String expected, String actual, HTMLCleanerConfiguration configuration)\n+    protected void assertHTML(String expected, String actual)\n     {\n-        assertEquals(HEADER_FULL + expected + FOOTER,\n-            HTMLUtils.toString(this.cleaner.clean(new StringReader(actual), configuration)));\n+        Document documentValue = clean(actual);\n+        assertEquals(getHeaderFull() + expected + FOOTER, HTMLUtils.toString(documentValue));\n     }\n \n     private void assertHTMLWithHeadContent(String expected, String actual)\n     {\n-        assertEquals(HEADER + \"<html><head>\" + expected + \"</head><body>\" + FOOTER,\n-            HTMLUtils.toString(this.cleaner.clean(new StringReader(actual))));\n+        assertEquals(getHeader() + \"<html><head>\" + expected + \"</head><body>\" + FOOTER,\n+            HTMLUtils.toString(clean(actual)));\n     }\n \n     @Test\n     void transformedDOMContent()\n     {\n         String htmlInput = \"<img src=\\\"http://host.com/a.gif?a=foo&b=bar\\\" />\";\n-        Document document = this.cleaner.clean(new StringReader(htmlInput));\n+        Document document = clean(htmlInput);\n \n         String textContent =\n             document.getElementsByTagName(\"img\").item(0).getAttributes().getNamedItem(\"src\").getTextContent();\n         assertEquals(\"http://host.com/a.gif?a=foo&b=bar\", textContent);\n \n         htmlInput = \"<img src=\\\"http://host.com/a.gif?a=foo&amp;b=bar\\\" />\";\n-        document = this.cleaner.clean(new StringReader(htmlInput));\n+        document = clean(htmlInput);\n \n         textContent =\n             document.getElementsByTagName(\"img\").item(0).getAttributes().getNamedItem(\"src\").getTextContent();\n@@ -611,7 +646,7 @@\n         assertEquals(\"&quot;\", nodeList.item(0).getTextContent());\n         assertEquals(\"&quot;\", nodeList.item(0).getAttributes().getNamedItem(\"foo\").getTextContent());\n \n-        document = this.cleaner.clean(new StringReader(\"<div foo=\\\"&amp;quot;\\\">&amp;quot;</div>\"));\n+        document = clean(\"<div foo=\\\"&amp;quot;\\\">&amp;quot;</div>\");\n         nodeList = document.getElementsByTagName(\"div\");\n         assertEquals(1, nodeList.getLength());\n         assertEquals(\"&quot;\", nodeList.item(0).getTextContent());\n@@ -671,7 +706,7 @@\n     public void followingEncodedEntitiesAreProperlyKept()\n     {\n         String content = \"<p><textarea>&#123;&#123;velocity}}machin&#123;&#123;/velocity}}</textarea></p>\";\n-        Document document = this.cleaner.clean(new StringReader(content));\n+        Document document = clean(content);\n         String textareaContent = document.getElementsByTagName(\"textarea\").item(0).getTextContent();\n         assertEquals(\"&#123;&#123;velocity}}machin&#123;&#123;/velocity}}\", textareaContent);\n \nOnly in /tmp/v2/xwiki-commons-core/xwiki-commons-xml//src/test/java/org/xwiki/xml/internal/html: HTML5HTMLCleanerTest.java\n",
        "sha1": "d4fb407",
        "sha2": "945360a"
    }
}