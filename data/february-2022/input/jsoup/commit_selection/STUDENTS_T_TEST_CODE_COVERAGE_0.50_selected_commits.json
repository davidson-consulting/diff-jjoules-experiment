{
    "92": {
        "size": 18,
        "decision": "pass",
        "diff": "diff -ru src/main/java/org/jsoup/parser/HtmlTreeBuilder.java src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n--- src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\t2022-06-06 15:05:58.531586757 +0200\n+++ src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\t2022-06-06 15:05:58.487586390 +0200\n@@ -443,7 +443,10 @@\n     void resetInsertionMode() {\n         // https://html.spec.whatwg.org/multipage/parsing.html#the-insertion-mode\n         boolean last = false;\n-        for (int pos = stack.size() -1; pos >= 0; pos--) {\n+        final int bottom = stack.size() - 1;\n+        final int upper = bottom >= maxQueueDepth ? bottom - maxQueueDepth : 0;\n+\n+        for (int pos = bottom; pos >= upper; pos--) {\n             Element node = stack.get(pos);\n             if (pos == 0) {\n                 last = true;\ndiff -ru src/test/java/org/jsoup/integration/FuzzFixesTest.java src/test/java/org/jsoup/integration/FuzzFixesTest.java\n--- src/test/java/org/jsoup/integration/FuzzFixesTest.java\t2022-06-06 15:05:58.531586757 +0200\n+++ src/test/java/org/jsoup/integration/FuzzFixesTest.java\t2022-06-06 15:05:58.431585923 +0200\n@@ -171,4 +171,14 @@\n         Document docXml = Jsoup.parse(new FileInputStream(in), \"UTF-8\", \"https://example.com\", Parser.xmlParser());\n         assertNotNull(docXml);\n     }\n+\n+    @Test\n+    public void parseTimeout1606() throws IOException {\n+        // https://github.com/jhy/jsoup/issues/1606\n+        // Timesink when closing missing empty tag (in XML comment processed as HTML) when thousands deep\n+        File in = ParseTest.getFile(\"/fuzztests/1606.html.gz\");\n+\n+        Document docXml = Jsoup.parse(new FileInputStream(in), \"UTF-8\", \"https://example.com\", Parser.xmlParser());\n+        assertNotNull(docXml);\n+    }\n }\nOnly in src/test/resources/fuzztests: 1606.html.gz\n",
        "sha1": "b4f4f2c",
        "sha2": "436d119"
    },
    "30": {
        "size": 8,
        "decision": "break",
        "diff": "diff -ru src/main/java/org/jsoup/nodes/Element.java src/main/java/org/jsoup/nodes/Element.java\n--- src/main/java/org/jsoup/nodes/Element.java\t2022-06-06 15:05:57.083574682 +0200\n+++ src/main/java/org/jsoup/nodes/Element.java\t2022-06-06 15:05:56.779572146 +0200\n@@ -258,7 +258,7 @@\n         return attributes().dataset();\n     }\n \n-    @Override\n+    @Override @Nullable\n     public final Element parent() {\n         return (Element) parentNode;\n     }\ndiff -ru src/main/java/org/jsoup/parser/HtmlTreeBuilder.java src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n--- src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\t2022-06-06 15:05:57.083574682 +0200\n+++ src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\t2022-06-06 15:05:57.055574448 +0200\n@@ -138,13 +138,13 @@\n \n             // setup form element to nearest form on context (up ancestor chain). ensures form controls are associated\n             // with form correctly\n-            Elements contextChain = context.parents();\n-            contextChain.add(0, context);\n-            for (Element parent: contextChain) {\n-                if (parent instanceof FormElement) {\n-                    formElement = (FormElement) parent;\n+            Element formSearch = context;\n+            while (formSearch != null) {\n+                if (formSearch instanceof FormElement) {\n+                    formElement = (FormElement) formSearch;\n                     break;\n                 }\n+                formSearch = formSearch.parent();\n             }\n         }\n \n",
        "sha1": "aaafac1",
        "sha2": "cc2363e"
    }
}