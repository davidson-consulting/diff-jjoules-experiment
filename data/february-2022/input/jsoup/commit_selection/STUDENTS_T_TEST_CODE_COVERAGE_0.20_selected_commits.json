{
    "48": {
        "size": 63,
        "decision": "pass",
        "diff": "diff -ru src/main/java/org/jsoup/helper/W3CDom.java src/main/java/org/jsoup/helper/W3CDom.java\n--- src/main/java/org/jsoup/helper/W3CDom.java\t2022-06-06 15:05:54.959556965 +0200\n+++ src/main/java/org/jsoup/helper/W3CDom.java\t2022-06-06 15:05:54.735555097 +0200\n@@ -3,7 +3,6 @@\n import org.jsoup.internal.StringUtil;\n import org.jsoup.nodes.Attribute;\n import org.jsoup.nodes.Attributes;\n-import org.jsoup.select.Elements;\n import org.jsoup.select.NodeTraversor;\n import org.jsoup.select.NodeVisitor;\n import org.jsoup.select.Selector;\n@@ -33,7 +32,9 @@\n import javax.xml.xpath.XPathFactory;\n import javax.xml.xpath.XPathFactoryConfigurationException;\n import java.io.StringWriter;\n+import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n import java.util.Stack;\n@@ -244,16 +245,19 @@\n         return nodeList;\n     }\n \n-    public Elements sourceElements(NodeList nodeList) {\n-        Elements els = new Elements();\n+    public <T extends org.jsoup.nodes.Node> List<T> sourceNodes(NodeList nodeList, Class<T> nodeType) {\n+        Validate.notNull(nodeList);\n+        Validate.notNull(nodeType);\n+        List<T> nodes = new ArrayList<>(nodeList.getLength());\n+\n         for (int i = 0; i < nodeList.getLength(); i++) {\n             org.w3c.dom.Node node = nodeList.item(i);\n             Object source = node.getUserData(W3CDom.SourceProperty);\n-            if (source instanceof org.jsoup.nodes.Element)\n-                els.add((org.jsoup.nodes.Element) source);\n+            if (nodeType.isInstance(source))\n+                nodes.add(nodeType.cast(source));\n         }\n \n-        return els;\n+        return nodes;\n     }\n \n     /**\ndiff -ru src/main/java/org/jsoup/nodes/Attributes.java src/main/java/org/jsoup/nodes/Attributes.java\n--- src/main/java/org/jsoup/nodes/Attributes.java\t2022-06-06 15:05:54.959556965 +0200\n+++ src/main/java/org/jsoup/nodes/Attributes.java\t2022-06-06 15:05:54.735555097 +0200\n@@ -25,7 +25,7 @@\n  * Attributes are treated as a map: there can be only one value associated with an attribute key/name.\n  * </p>\n  * <p>\n- * Attribute name and value comparisons are  generally <b>case sensitive</b>. By default for HTML, attribute names are\n+ * Attribute name and value comparisons are generally <b>case sensitive</b>. By default for HTML, attribute names are\n  * normalized to lower-case on parsing. That means you should use lower-case strings when referring to attributes by\n  * name.\n  * </p>\ndiff -ru src/main/java/org/jsoup/nodes/Element.java src/main/java/org/jsoup/nodes/Element.java\n--- src/main/java/org/jsoup/nodes/Element.java\t2022-06-06 15:05:54.959556965 +0200\n+++ src/main/java/org/jsoup/nodes/Element.java\t2022-06-06 15:05:54.915556598 +0200\n@@ -520,11 +520,27 @@\n      </li>\n      </ol>\n \n-     @param xpath XML path expression\n+     @param xpath XPath expression\n      @return matching elements, or an empty list if none match.\n      */\n     public Elements selectXpath(String xpath) {\n-        return NodeUtils.selectXpath(xpath, this);\n+        return new Elements(NodeUtils.selectXpath(xpath, this, Element.class));\n+    }\n+\n+    /**\n+     <b>Beta:</b> find Nodes that match the supplied XPath expression.\n+     <p>For example, to select TextNodes under {@code p} elements: </p>\n+     <pre>List&lt;TextNode&gt; textNodes = doc.selectXpath(\"//body//p//text()\", TextNode.class);</pre>\n+     <p>Note that in the jsoup DOM, Attribute objects are not Nodes. To directly select attribute values, do something\n+     like:</p>\n+     <pre>List&lt;String&gt; hrefs = doc.selectXpath(\"//a\").eachAttr(\"href\");</pre>\n+     @param xpath XPath expression\n+     @param nodeType the jsoup node type to return\n+     @see #selectXpath(String)\n+     @return a list of matching nodes\n+     */\n+    public <T extends Node> List<T> selectXpath(String xpath, Class<T> nodeType) {\n+        return NodeUtils.selectXpath(xpath, this, nodeType);\n     }\n \n     /**\ndiff -ru src/main/java/org/jsoup/nodes/NodeUtils.java src/main/java/org/jsoup/nodes/NodeUtils.java\n--- src/main/java/org/jsoup/nodes/NodeUtils.java\t2022-06-06 15:05:54.959556965 +0200\n+++ src/main/java/org/jsoup/nodes/NodeUtils.java\t2022-06-06 15:05:53.935548423 +0200\n@@ -7,6 +7,8 @@\n import org.jsoup.select.Elements;\n import org.w3c.dom.NodeList;\n \n+import java.util.List;\n+\n /**\n  * Internal helpers for Nodes, to keep the actual node APIs relatively clean. A jsoup internal class, so don't use it as\n  * there is no contract API).\n@@ -35,13 +37,14 @@\n      stashed them during conversion). This process could potentially be optimized by transpiling the compiled xpath\n      expression to a jsoup Evaluator when there's 1:1 support, thus saving the W3C document conversion stage.\n      */\n-    static Elements selectXpath(String xpath, Element el) {\n+    static <T extends Node> List<T> selectXpath(String xpath, Element el, Class<T> nodeType) {\n         Validate.notEmpty(xpath);\n         Validate.notNull(el);\n+        Validate.notNull(nodeType);\n \n         W3CDom w3c = new W3CDom();\n         org.w3c.dom.Document wDoc = w3c.fromJsoup(el);\n         NodeList nodeList = w3c.selectXpath(xpath, wDoc);\n-        return w3c.sourceElements(nodeList);\n+        return w3c.sourceNodes(nodeList, nodeType);\n     }\n }\ndiff -ru src/test/java/org/jsoup/select/XpathTest.java src/test/java/org/jsoup/select/XpathTest.java\n--- src/test/java/org/jsoup/select/XpathTest.java\t2022-06-06 15:05:54.959556965 +0200\n+++ src/test/java/org/jsoup/select/XpathTest.java\t2022-06-06 15:05:53.935548423 +0200\n@@ -1,8 +1,11 @@\n package org.jsoup.select;\n \n import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Attribute;\n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.Element;\n+import org.jsoup.nodes.Node;\n+import org.jsoup.nodes.TextNode;\n import org.jsoup.parser.Parser;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.params.ParameterizedTest;\n@@ -15,6 +18,7 @@\n import javax.xml.xpath.XPathFunctionResolver;\n import javax.xml.xpath.XPathVariableResolver;\n \n+import java.util.List;\n import java.util.stream.Stream;\n \n import static org.jsoup.helper.W3CDom.XPathFactoryProperty;\n@@ -115,6 +119,33 @@\n         );\n     }\n \n+    @Test void canSelectTextNodes() {\n+        String html = \"<div><p>One<p><a>Two</a><p>Three and some more\";\n+        Document doc = Jsoup.parse(html);\n+\n+        //  as text nodes:\n+        List<TextNode> text = doc.selectXpath(\"//body//p//text()\", TextNode.class);\n+        assertEquals(3, text.size());\n+        assertEquals(\"One\", text.get(0).text());\n+        assertEquals(\"Two\", text.get(1).text());\n+        assertEquals(\"Three and some more\", text.get(2).text());\n+\n+        //  as just nodes:\n+        List<Node> nodes = doc.selectXpath(\"//body//p//text()\", Node.class);\n+        assertEquals(3, nodes.size());\n+        assertEquals(\"One\", nodes.get(0).outerHtml());\n+        assertEquals(\"Two\", nodes.get(1).outerHtml());\n+        assertEquals(\"Three and some more\", nodes.get(2).outerHtml());\n+    }\n+\n+    @Test void selectByAttribute() {\n+        Document doc = Jsoup.parse(\"<p><a href='/foo'>Foo</a><a href='/bar'>Bar</a><a>None</a>\");\n+        List<String> hrefs = doc.selectXpath(\"//a[@href]\").eachAttr(\"href\");\n+        assertEquals(2, hrefs.size());\n+        assertEquals(\"/foo\", hrefs.get(0));\n+        assertEquals(\"/bar\", hrefs.get(1));\n+    }\n+\n     @Test\n     public void canSupplyAlternateFactoryImpl() {\n         // previously we had a test to load Saxon and do an XPath 2.0 query. But we know Saxon works and so that's\n",
        "sha1": "ec4bedf",
        "sha2": "2bf377f"
    },
    "26": {
        "size": 2,
        "decision": "break",
        "diff": "diff -ru src/main/java/org/jsoup/parser/HtmlTreeBuilder.java src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n--- src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\t2022-06-06 15:05:54.195550592 +0200\n+++ src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\t2022-06-06 15:05:54.159550292 +0200\n@@ -478,7 +478,7 @@\n \n         LOOP: for (int pos = bottom; pos >= upper; pos--) {\n             Element node = stack.get(pos);\n-            if (pos == 0) {\n+            if (pos == upper) {\n                 last = true;\n                 if (fragmentParsing)\n                     node = contextElement;\nOnly in src/test/resources/fuzztests: 1642.html.gz\n",
        "sha1": "2b22ef8",
        "sha2": "011e83f",
        "config": "STUDENTS_T_TEST_CODE_COVERAGE_0.20"
    }
}