{
    "30": {
        "size": 8,
        "decision": "pass",
        "diff": "diff -ru src/main/java/org/jsoup/nodes/Element.java src/main/java/org/jsoup/nodes/Element.java\n--- src/main/java/org/jsoup/nodes/Element.java\t2022-06-06 15:06:13.163708677 +0200\n+++ src/main/java/org/jsoup/nodes/Element.java\t2022-06-06 15:06:12.887706380 +0200\n@@ -258,7 +258,7 @@\n         return attributes().dataset();\n     }\n \n-    @Override\n+    @Override @Nullable\n     public final Element parent() {\n         return (Element) parentNode;\n     }\ndiff -ru src/main/java/org/jsoup/parser/HtmlTreeBuilder.java src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n--- src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\t2022-06-06 15:06:13.163708677 +0200\n+++ src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\t2022-06-06 15:06:13.131708411 +0200\n@@ -138,13 +138,13 @@\n \n             // setup form element to nearest form on context (up ancestor chain). ensures form controls are associated\n             // with form correctly\n-            Elements contextChain = context.parents();\n-            contextChain.add(0, context);\n-            for (Element parent: contextChain) {\n-                if (parent instanceof FormElement) {\n-                    formElement = (FormElement) parent;\n+            Element formSearch = context;\n+            while (formSearch != null) {\n+                if (formSearch instanceof FormElement) {\n+                    formElement = (FormElement) formSearch;\n                     break;\n                 }\n+                formSearch = formSearch.parent();\n             }\n         }\n \n",
        "sha1": "aaafac1",
        "sha2": "cc2363e"
    },
    "90": {
        "size": 27,
        "decision": "break",
        "diff": "diff -ru src/main/java/org/jsoup/parser/HtmlTreeBuilder.java src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n--- src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\t2022-06-06 15:06:14.583720500 +0200\n+++ src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\t2022-06-06 15:06:14.603720666 +0200\n@@ -274,9 +274,7 @@\n \n     void insert(Token.Character characterToken) {\n         final Node node;\n-        Element el = currentElement();\n-        if (el == null)\n-            el = doc; // allows for whitespace to be inserted into the doc root object (not on the stack)\n+        Element el = currentElement(); // will be doc if no current element; allows for whitespace to be inserted into the doc root object (not on the stack)\n         final String tagName = el.normalName();\n         final String data = characterToken.getData();\n \n@@ -604,7 +602,7 @@\n      process, then the UA must perform the above steps as if that element was not in the above list.\n      */\n     void generateImpliedEndTags(String excludeTag) {\n-        while ((excludeTag != null && !currentElement().normalName().equals(excludeTag)) &&\n+        while ((excludeTag != null && !currentElementIs(excludeTag)) &&\n                 inSorted(currentElement().normalName(), TagSearchEndTags))\n             pop();\n     }\ndiff -ru src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n--- src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\t2022-06-06 15:06:14.583720500 +0200\n+++ src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\t2022-06-06 15:06:14.603720666 +0200\n@@ -774,7 +774,7 @@\n                 Element node = stack.get(pos);\n                 if (node.normalName().equals(name)) {\n                     tb.generateImpliedEndTags(name);\n-                    if (!name.equals(tb.currentElement().normalName()))\n+                    if (!tb.currentElementIs(name))\n                         tb.error(this);\n                     tb.popStackToClose(name);\n                     break;\n@@ -1000,7 +1000,6 @@\n                 }\n                 return true; // todo: as above todo\n             } else if (t.isEOF()) {\n-                Element el = tb.currentElement();\n                 if (tb.currentElementIs(\"html\"))\n                     tb.error(this);\n                 return true; // stops parsing\ndiff -ru src/main/java/org/jsoup/parser/TreeBuilder.java src/main/java/org/jsoup/parser/TreeBuilder.java\n--- src/main/java/org/jsoup/parser/TreeBuilder.java\t2022-06-06 15:06:14.583720500 +0200\n+++ src/main/java/org/jsoup/parser/TreeBuilder.java\t2022-06-06 15:06:14.183717170 +0200\n@@ -110,9 +110,14 @@\n     }\n \n \n-    @Nullable protected Element currentElement() {\n+    /**\n+     Get the current element (last on the stack). If all items have been removed, returns the document instead\n+     (which might not actually be on the stack; use stack.size() == 0 to test if required.\n+     @return the last element on the stack, if any; or the root document\n+     */\n+    protected Element currentElement() {\n         int size = stack.size();\n-        return size > 0 ? stack.get(size-1) : null;\n+        return size > 0 ? stack.get(size-1) : doc;\n     }\n \n     /**\n@@ -121,6 +126,8 @@\n      @return true if there is a current element on the stack, and its name equals the supplied\n      */\n     protected boolean currentElementIs(String normalName) {\n+        if (stack.size() == 0)\n+            return false;\n         Element current = currentElement();\n         return current != null && current.normalName().equals(normalName);\n     }\ndiff -ru src/test/java/org/jsoup/parser/HtmlParserTest.java src/test/java/org/jsoup/parser/HtmlParserTest.java\n--- src/test/java/org/jsoup/parser/HtmlParserTest.java\t2022-06-06 15:06:14.583720500 +0200\n+++ src/test/java/org/jsoup/parser/HtmlParserTest.java\t2022-06-06 15:06:14.603720666 +0200\n@@ -1431,4 +1431,13 @@\n         element.html(\"<tr><td>One</td></tr>\");\n         assertEquals(\"<tr>\\n <tr>\\n  <td>One</td>\\n </tr>\\n</tr>\", element.outerHtml());\n     }\n+\n+    @Test public void parseFragmentOnCreatedDocument() {\n+        String bareFragment = \"<h2>text</h2>\";\n+        List<Node> nodes = new Document(\"\").parser().parseFragmentInput(bareFragment, new Element(\"p\"), \"\");\n+        assertEquals(1, nodes.size());\n+        Node node = nodes.get(0);\n+        assertEquals(\"h2\", node.nodeName());\n+        assertEquals(\"<p><h2>text</h2></p>\", node.parent().outerHtml());\n+    }\n }\n",
        "sha1": "26d3c14",
        "sha2": "dd2536b"
    }
}