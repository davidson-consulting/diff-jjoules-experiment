{
    "78": {
        "size": 20,
        "decision": "pass",
        "diff": "diff -ru /tmp/v1/compiler/src/main/java/com/github/mustachejava/reflect/ReflectionObjectHandler.java /tmp/v2/compiler/src/main/java/com/github/mustachejava/reflect/ReflectionObjectHandler.java\n--- /tmp/v1/compiler/src/main/java/com/github/mustachejava/reflect/ReflectionObjectHandler.java\t2022-06-06 18:29:02.935410126 +0200\n+++ /tmp/v2/compiler/src/main/java/com/github/mustachejava/reflect/ReflectionObjectHandler.java\t2022-06-06 18:29:02.727408739 +0200\n@@ -1,13 +1,5 @@\n package com.github.mustachejava.reflect;\n \n-import static java.util.Collections.*;\n-\n-import java.lang.reflect.AccessibleObject;\n-import java.lang.reflect.Method;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-\n import com.github.mustachejava.Binding;\n import com.github.mustachejava.Code;\n import com.github.mustachejava.ObjectHandler;\n@@ -21,6 +13,14 @@\n import com.github.mustachejava.util.GuardException;\n import com.github.mustachejava.util.Wrapper;\n \n+import java.lang.reflect.AccessibleObject;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static java.util.Collections.singletonList;\n+\n /**\n  * Lookup objects using reflection and execute them the same way.\n  *\n@@ -80,15 +80,16 @@\n         // This is used for lookups but otherwise always succeeds\n         guards.add(createDotGuard(i, scope, lookup));\n         List<Guard> wrapperGuard = new ArrayList<>(1);\n-        wrapperGuard.add(createClassGuard(0, scope));\n+        // We need to coerce this scope as it is checked post coercion\n+        wrapperGuard.add(createClassGuard(0, coerce(scope)));\n         wrapper = findWrapper(0, null, wrapperGuard, scope, lookup);\n         if (wrappers == null) wrappers = new ArrayList<>();\n         if (wrapper != null) {\n           // We need to dig into a scope when dot notation shows up\n           wrappers.add(wrapper);\n           try {\n-            // Pull out the next level\n-            scope = coerce(wrapper.call(ObjectHandler.makeList(scope)));\n+            // Pull out the next level from the coerced scope\n+            scope = coerce(wrapper.call(ObjectHandler.makeList(coerce(scope))));\n           } catch (GuardException e) {\n             throw new AssertionError(e);\n           }\n@@ -105,7 +106,7 @@\n         }\n       }\n       if (wrappers != null) {\n-        guards.add(createWrappedGuard(i, wrappers, singletonList((Guard) createClassGuard(0, scope))));\n+        guards.add(createWrappedGuard(i, wrappers, singletonList(new ClassGuard(0, scope))));\n       }\n       Wrapper[] foundWrappers = wrappers == null ? null : wrappers.toArray(new Wrapper[wrappers.size()]);\n       wrapper = findWrapper(i, foundWrappers, guards, scope, subname);\n",
        "sha1": "21534af",
        "sha2": "81cc33f"
    },
    "171": {
        "size": 5,
        "decision": "break",
        "diff": "diff -ru /tmp/v1/compiler/src/main/java/com/github/mustachejava/codes/DefaultCode.java /tmp/v2/compiler/src/main/java/com/github/mustachejava/codes/DefaultCode.java\n--- /tmp/v1/compiler/src/main/java/com/github/mustachejava/codes/DefaultCode.java\t2022-06-06 18:29:04.311419298 +0200\n+++ /tmp/v2/compiler/src/main/java/com/github/mustachejava/codes/DefaultCode.java\t2022-06-06 18:29:04.323419378 +0200\n@@ -192,10 +192,16 @@\n     writer.write(tc.endChars());\n   }\n \n+  private char[] appendedChars;\n+  \n   protected Writer appendText(Writer writer) {\n     if (appended != null) {\n       try {\n-        writer.write(appended);\n+        // Avoid allocations at runtime\n+        if (appendedChars == null) {\n+          appendedChars = appended.toCharArray();\n+        }\n+        writer.write(appendedChars);\n       } catch (IOException e) {\n         throw new MustacheException(e);\n       }\n",
        "sha1": "ff58856",
        "sha2": "909fc58"
    }
}