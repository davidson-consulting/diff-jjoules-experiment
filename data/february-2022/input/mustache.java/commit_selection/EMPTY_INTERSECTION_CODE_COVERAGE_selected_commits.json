{
    "56": {
        "size": 39,
        "decision": "pass",
        "diff": "diff -ru /tmp/v1/compiler/src/main/java/com/github/mustachejava/util/HtmlEscaper.java /tmp/v2/compiler/src/main/java/com/github/mustachejava/util/HtmlEscaper.java\n--- /tmp/v1/compiler/src/main/java/com/github/mustachejava/util/HtmlEscaper.java\t2022-06-06 18:28:37.555240664 +0200\n+++ /tmp/v2/compiler/src/main/java/com/github/mustachejava/util/HtmlEscaper.java\t2022-06-06 18:28:37.279238819 +0200\n@@ -10,7 +10,7 @@\n  */\n public class HtmlEscaper {\n \n-  private static char[][] LT_96 = new char[97][];\n+  private static char[][] ESC = new char[97][];\n \n   static {\n     char[] AMP = \"&amp;\".toCharArray();\n@@ -20,34 +20,34 @@\n     char[] SQ = \"&#39;\".toCharArray();\n     char[] BQ = \"&#96;\".toCharArray();\n     char[] EQ = \"&#61;\".toCharArray();\n-    for (int c = 0; c < LT_96.length; c++) {\n+    for (int c = 0; c < ESC.length; c++) {\n       if (c <= 13) {\n-        LT_96[c] = (\"&#\" + c + \";\").toCharArray();\n+        ESC[c] = (\"&#\" + c + \";\").toCharArray();\n       } else {\n         switch (c) {\n           case '&':\n-            LT_96[c] = AMP;\n+            ESC[c] = AMP;\n             break;\n           case '<':\n-            LT_96[c] = LT;\n+            ESC[c] = LT;\n             break;\n           case '>':\n-            LT_96[c] = GT;\n+            ESC[c] = GT;\n             break;\n           case '\"':\n-            LT_96[c] = DQ;\n+            ESC[c] = DQ;\n             break;\n           case '\\'':\n-            LT_96[c] = SQ;\n+            ESC[c] = SQ;\n             break;\n           case '=':\n-            LT_96[c] = EQ;\n+            ESC[c] = EQ;\n             break;\n           case '`':\n-            LT_96[c] = BQ;\n+            ESC[c] = BQ;\n             break;\n           default:\n-            LT_96[c] = new char[]{(char) c};\n+            ESC[c] = null;\n             break;\n         }\n       }\n@@ -56,17 +56,26 @@\n \n   public static void escape(String value, Writer writer) {\n     try {\n-      int length = value.length();\n+      char[] chars = value.toCharArray();\n+      int length = chars.length;\n+      int start = 0;\n       for (int i = 0; i < length; i++) {\n-        char c = value.charAt(i);\n-        if (c <= 96) {\n-          writer.write(LT_96[c]);\n-        } else {\n-          writer.write(c);\n+        char c = chars[i];\n+        char[] escaped;\n+        // We only possibly escape chars in the range 0-96\n+        if (c <= 96 && (escaped = ESC[c]) != null) {\n+          // Write from the last replacement to before this one\n+          if (i > start) writer.write(chars, start, i - start);\n+          // Write the replacement\n+          writer.write(escaped);\n+          // Move the pointer to the position after replacement\n+          start = i + 1;\n         }\n       }\n+      writer.write(chars, start, length - start);\n     } catch (IOException e) {\n       throw new MustacheException(\"Failed to encode value: \" + value, e);\n     }\n   }\n+\n }\n",
        "sha1": "baa3841",
        "sha2": "2edf8de",
        "config": "EMPTY_INTERSECTION_CODE_COVERAGE"
    },
    "173": {
        "size": 91,
        "decision": "break",
        "diff": "diff -ru /tmp/v1/compiler/src/main/java/com/github/mustachejava/DefaultMustacheFactory.java /tmp/v2/compiler/src/main/java/com/github/mustachejava/DefaultMustacheFactory.java\n--- /tmp/v1/compiler/src/main/java/com/github/mustachejava/DefaultMustacheFactory.java\t2022-06-06 18:28:39.251252006 +0200\n+++ /tmp/v2/compiler/src/main/java/com/github/mustachejava/DefaultMustacheFactory.java\t2022-06-06 18:28:39.079250856 +0200\n@@ -112,7 +112,7 @@\n \n   @Override\n   public void encode(String value, Writer writer) {\n-    escape(value, writer, true);\n+    escape(value, writer);\n   }\n \n   @Override\ndiff -ru /tmp/v1/compiler/src/main/java/com/github/mustachejava/util/HtmlEscaper.java /tmp/v2/compiler/src/main/java/com/github/mustachejava/util/HtmlEscaper.java\n--- /tmp/v1/compiler/src/main/java/com/github/mustachejava/util/HtmlEscaper.java\t2022-06-06 18:28:39.251252006 +0200\n+++ /tmp/v2/compiler/src/main/java/com/github/mustachejava/util/HtmlEscaper.java\t2022-06-06 18:28:38.923249812 +0200\n@@ -9,96 +9,55 @@\n  * Escapes user data that you wish to include in HTML pages.\n  */\n public class HtmlEscaper {\n-  public static void escape(String value, Writer writer, boolean escapeEscaped) {\n+\n+  private static char[] AMP = \"&amp;\".toCharArray();\n+  private static char[] LT = \"&lt;\".toCharArray();\n+  private static char[] GT = \"&gt;\".toCharArray();\n+  private static char[] DQ = \"&quot;\".toCharArray();\n+  private static char[] SQ = \"&#39;\".toCharArray();\n+  private static char[][] LT_13 = new char[14][];\n+\n+  static {\n+    for (int i = 0; i < LT_13.length; i++) {\n+      LT_13[i] = (\"&#\" + String.valueOf(i) + \";\").toCharArray();\n+    }\n+  }\n+\n+  public static void escape(String value, Writer writer) {\n     try {\n-      int position = 0;\n       int length = value.length();\n       for (int i = 0; i < length; i++) {\n         char c = value.charAt(i);\n         if (c <= 13) {\n-          writer.append(value, position, i);\n-          writer.append(\"&#\");\n-          writer.append(String.valueOf((int)c));\n-          writer.append(\";\");\n-          position = i + 1;\n-        } else {\n+          writer.write(LT_13[c]);\n+        } else if (c >= 34 && c <= 62) {\n+          // Experiment with usign an array lookup here failed\n           switch (c) {\n             case '&':\n-              // If we match an entity or char ref then keep it\n-              // as is in the text. Otherwise, replace it.\n-              if (!escapeEscaped && matchesEntityRef(i + 1, length, value)) {\n-                // If we are at the beginning we can just keep going\n-                if (position != 0) {\n-                  position = append(value, writer, position, i, \"&\");\n-                }\n-              } else {\n-                position = append(value, writer, position, i, \"&amp;\");\n-              }\n+              writer.write(AMP);\n               break;\n             case '<':\n-              position = append(value, writer, position, i, \"&lt;\");\n+              writer.write(LT);\n               break;\n             case '>':\n-              position = append(value, writer, position, i, \"&gt;\");\n+              writer.write(GT);\n               break;\n             case '\"':\n-              position = append(value, writer, position, i, \"&quot;\");\n+              writer.write(DQ);\n               break;\n             case '\\'':\n-              position = append(value, writer, position, i, \"&#39;\");\n+              writer.write(SQ);\n+              break;\n+            default:\n+              writer.write(c);\n               break;\n           }\n+        } else {\n+          writer.write(c);\n         }\n       }\n-      writer.append(value, position, length);\n     } catch (IOException e) {\n       throw new MustacheException(\"Failed to encode value: \" + value);\n     }\n   }\n-\n-  private static int append(String value, Writer writer, int position, int i, String replace) throws IOException {\n-    // Append the clean text\n-    writer.append(value, position, i);\n-    // Append the encoded value\n-    writer.append(replace);\n-    // and advance the position past it\n-    return i + 1;\n-  }\n-\n-  // Matches all HTML named and character entity references\n-  private static boolean matchesEntityRef(int position, int length, String value) {\n-    for (int i = position; i < length; i++) {\n-      char c = value.charAt(i);\n-      switch (c) {\n-        case ';':\n-          // End of the entity\n-          return i != position;\n-        case '#':\n-          // Switch to char reference\n-          return i == position && matchesCharRef(i + 1, length, value);\n-        default:\n-          // Letters can be at the start\n-          if (c >= 'a' && c <= 'z') continue;\n-          if (c >= 'A' && c <= 'Z') continue;\n-          if (i != position) {\n-            // Can only appear in the middle\n-            if (c >= '0' && c <= '9') continue;\n-          }\n-          return false;\n-      }\n-    }\n-    // Didn't find ending ;\n-    return false;\n-  }\n-\n-  private static boolean matchesCharRef(int position, int length, String value) {\n-    for (int i = position; i < length; i++) {\n-      char c = value.charAt(i);\n-      if (c == ';') {\n-        return i != position;\n-      } else if ((c >= '0' && c <= '9') || c == 'x' || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F')) {\n-      } else return false;\n-    }\n-    return false;\n-  }\n }\ndiff -ru /tmp/v1/compiler/src/test/java/com/github/mustachejava/util/HtmlEscaperTest.java /tmp/v2/compiler/src/test/java/com/github/mustachejava/util/HtmlEscaperTest.java\n--- /tmp/v1/compiler/src/test/java/com/github/mustachejava/util/HtmlEscaperTest.java\t2022-06-06 18:28:39.251252006 +0200\n+++ /tmp/v2/compiler/src/test/java/com/github/mustachejava/util/HtmlEscaperTest.java\t2022-06-06 18:28:38.923249812 +0200\n@@ -10,72 +10,62 @@\n   public void testEscape() throws Exception {\n     {\n       StringWriter sw = new StringWriter();\n-      escape(\"Hello, world!\", sw, true);\n+      escape(\"Hello, world!\", sw);\n       assertEquals(\"Hello, world!\", sw.toString());\n     }\n     {\n       StringWriter sw = new StringWriter();\n-      escape(\"Hello & world!\", sw, true);\n+      escape(\"Hello & world!\", sw);\n       assertEquals(\"Hello &amp; world!\", sw.toString());\n     }\n     {\n       StringWriter sw = new StringWriter();\n-      escape(\"Hello &amp; world!\", sw, false);\n-      assertEquals(\"Hello &amp; world!\", sw.toString());\n-    }\n-    {\n-      StringWriter sw = new StringWriter();\n-      escape(\"Hello &amp; world!\", sw, true);\n+      escape(\"Hello &amp; world!\", sw);\n       assertEquals(\"Hello &amp;amp; world!\", sw.toString());\n     }\n     {\n       StringWriter sw = new StringWriter();\n-      escape(\"Hello &amp world!\", sw, true);\n+      escape(\"Hello &amp world!\", sw);\n       assertEquals(\"Hello &amp;amp world!\", sw.toString());\n     }\n     {\n       StringWriter sw = new StringWriter();\n-      escape(\"\\\"Hello\\\" &amp world!\", sw, true);\n+      escape(\"\\\"Hello\\\" &amp world!\", sw);\n       assertEquals(\"&quot;Hello&quot; &amp;amp world!\", sw.toString());\n     }\n     {\n       StringWriter sw = new StringWriter();\n-      escape(\"\\\"Hello\\\" &amp world!&#10;\", sw, false);\n-      assertEquals(\"&quot;Hello&quot; &amp;amp world!&#10;\", sw.toString());\n-    }\n-    {\n-      StringWriter sw = new StringWriter();\n-      escape(\"\\\"Hello\\\" &amp world!&#10;\", sw, true);\n+      escape(\"\\\"Hello\\\" &amp world!&#10;\", sw);\n       assertEquals(\"&quot;Hello&quot; &amp;amp world!&amp;#10;\", sw.toString());\n     }\n     {\n       StringWriter sw = new StringWriter();\n-      escape(\"\\\"Hello\\\" &amp <world>!\\n\", sw, true);\n+      escape(\"\\\"Hello\\\" &amp <world>!\\n\", sw);\n       assertEquals(\"&quot;Hello&quot; &amp;amp &lt;world&gt;!&#10;\", sw.toString());\n     }\n     {\n       StringWriter sw = new StringWriter();\n-      escape(\"\\\"Hello\\\" &amp world!\\n&sam\", sw, true);\n+      escape(\"\\\"Hello\\\" &amp world!\\n&sam\", sw);\n       assertEquals(\"&quot;Hello&quot; &amp;amp world!&#10;&amp;sam\", sw.toString());\n     }\n     {\n       StringWriter sw = new StringWriter();\n-      escape(\"\\\"Hello\\\" &amp 'world'!\\n&sam\", sw, true);\n+      escape(\"\\\"Hello\\\" &amp 'world'!\\n&sam\", sw);\n       assertEquals(\"&quot;Hello&quot; &amp;amp &#39;world&#39;!&#10;&amp;sam\", sw.toString());\n     }\n     {\n       StringWriter sw = new StringWriter();\n-      escape(\"\\\"Hello\\\" &amp 'world'!\\n&sam\", sw, true);\n+      escape(\"\\\"Hello\\\" &amp 'world'!\\n&sam\", sw);\n       assertEquals(\"&quot;Hello&quot; &amp;amp &#39;world&#39;!&#10;&amp;sam\", sw.toString());\n     }\n     {\n       StringWriter sw = new StringWriter();\n-      escape(\"\\\"Hello\\\" &amp&#zz 'world'!\\n&sam\", sw, true);\n+      escape(\"\\\"Hello\\\" &amp&#zz 'world'!\\n&sam\", sw);\n       assertEquals(\"&quot;Hello&quot; &amp;amp&amp;#zz &#39;world&#39;!&#10;&amp;sam\", sw.toString());\n     }\n     {\n       StringWriter sw = new StringWriter();\n-      escape(\"\\\"Hello\\\" &amp&#zz 'world'!\\n&sam&#\", sw, true);\n+      escape(\"\\\"Hello\\\" &amp&#zz 'world'!\\n&sam&#\", sw);\n       assertEquals(\"&quot;Hello&quot; &amp;amp&amp;#zz &#39;world&#39;!&#10;&amp;sam&amp;#\", sw.toString());\n     }\n   }\ndiff -ru /tmp/v1/compiler/src/test/java/com/github/mustachejavabenchmarks/JsonInterpreterTest.java /tmp/v2/compiler/src/test/java/com/github/mustachejavabenchmarks/JsonInterpreterTest.java\n--- /tmp/v1/compiler/src/test/java/com/github/mustachejavabenchmarks/JsonInterpreterTest.java\t2022-06-06 18:28:39.251252006 +0200\n+++ /tmp/v2/compiler/src/test/java/com/github/mustachejavabenchmarks/JsonInterpreterTest.java\t2022-06-06 18:28:39.143251284 +0200\n@@ -27,7 +27,7 @@\n  * Time: 10:23:54 AM\n  */\n public class JsonInterpreterTest extends TestCase {\n-  private static final int TIME = 2;\n+  private static final int TIME = 20;\n \n   protected File root;\n \n",
        "sha1": "0195b52",
        "sha2": "de0639c",
        "config": "EMPTY_INTERSECTION_CODE_COVERAGE"
    }
}