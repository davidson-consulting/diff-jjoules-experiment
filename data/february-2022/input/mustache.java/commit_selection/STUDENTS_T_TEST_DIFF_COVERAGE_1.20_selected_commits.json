{
    "16": {
        "size": 27,
        "decision": "pass",
        "diff": "diff -ru /tmp/v1/compiler/src/main/java/com/github/mustachejava/DefaultMustacheFactory.java /tmp/v2/compiler/src/main/java/com/github/mustachejava/DefaultMustacheFactory.java\n--- /tmp/v1/compiler/src/main/java/com/github/mustachejava/DefaultMustacheFactory.java\t2022-06-06 18:29:04.571421031 +0200\n+++ /tmp/v2/compiler/src/main/java/com/github/mustachejava/DefaultMustacheFactory.java\t2022-06-06 18:29:04.427420071 +0200\n@@ -224,7 +224,7 @@\n     return recursionLimit;\n   }\n \n-  private final ThreadLocal<Map<String, Mustache>> partialCache = ThreadLocal.withInitial(() -> new HashMap<>());\n+  private final ThreadLocal<Map<String, Mustache>> partialCache = ThreadLocal.withInitial(HashMap::new);\n \n   /**\n    * In order to handle recursion, we need a temporary thread local cache during compilation\ndiff -ru /tmp/v1/compiler/src/main/java/com/github/mustachejava/MustacheParser.java /tmp/v2/compiler/src/main/java/com/github/mustachejava/MustacheParser.java\n--- /tmp/v1/compiler/src/main/java/com/github/mustachejava/MustacheParser.java\t2022-06-06 18:29:04.571421031 +0200\n+++ /tmp/v2/compiler/src/main/java/com/github/mustachejava/MustacheParser.java\t2022-06-06 18:29:04.583421111 +0200\n@@ -17,7 +17,8 @@\n   public static final String DEFAULT_SM = \"{{\";\n   public static final String DEFAULT_EM = \"}}\";\n   private final boolean specConformWhitespace;\n-  private MustacheFactory mf;\n+  private final MustacheFactory mf;\n+  private boolean allowChangingDelimeters = true;\n \n   protected MustacheParser(MustacheFactory mf, boolean specConformWhitespace) {\n     this.mf = mf;\n@@ -246,6 +247,9 @@\n                   out = write(mv, out, file, currentLine.intValue(), startOfLine);\n                   break;\n                 case '=':\n+                  if (!allowChangingDelimeters) {\n+                    throw new MustacheException(\"Disallowed: changing defaul delimiters\");\n+                  }\n                   // Change delimiters\n                   out = write(mv, out, file, currentLine.intValue(), startOfLine);\n                   String trimmed = command.substring(1).trim();\n@@ -314,4 +318,7 @@\n     return new StringBuilder();\n   }\n \n+  public void setAllowChangingDelimeters(boolean allowChangingDelimeters) {\n+    this.allowChangingDelimeters = allowChangingDelimeters;\n+  }\n }\ndiff -ru /tmp/v1/compiler/src/main/java/com/github/mustachejava/reflect/BaseObjectHandler.java /tmp/v2/compiler/src/main/java/com/github/mustachejava/reflect/BaseObjectHandler.java\n--- /tmp/v1/compiler/src/main/java/com/github/mustachejava/reflect/BaseObjectHandler.java\t2022-06-06 18:29:04.571421031 +0200\n+++ /tmp/v2/compiler/src/main/java/com/github/mustachejava/reflect/BaseObjectHandler.java\t2022-06-06 18:29:04.427420071 +0200\n@@ -193,7 +193,7 @@\n   }\n \n   // We default to not allowing private classes\n-  private boolean checkClass(Class sClass) {\n+  protected boolean checkClass(Class sClass) {\n     return (sClass.getModifiers() & Modifier.PUBLIC) != Modifier.PUBLIC;\n   }\n \nOnly in /tmp/v2/compiler/src/main/java/com/github/mustachejava: SafeMustacheFactory.java\ndiff -ru /tmp/v1/compiler/src/test/java/com/github/mustachejava/InterpreterTest.java /tmp/v2/compiler/src/test/java/com/github/mustachejava/InterpreterTest.java\n--- /tmp/v1/compiler/src/test/java/com/github/mustachejava/InterpreterTest.java\t2022-06-06 18:29:04.571421031 +0200\n+++ /tmp/v2/compiler/src/test/java/com/github/mustachejava/InterpreterTest.java\t2022-06-06 18:29:04.583421111 +0200\n@@ -56,6 +56,24 @@\n     assertEquals(getContents(root, \"simple.txt\"), sw.toString());\n   }\n \n+  public void testSafeSimple() throws MustacheException, IOException, ExecutionException, InterruptedException {\n+    MustacheFactory c = new SafeMustacheFactory(Collections.singleton(\"simple.html\"), root);\n+    Mustache m = c.compile(\"simple.html\");\n+    StringWriter sw = new StringWriter();\n+    m.execute(sw, new Object() {\n+      public String name = \"Chris\";\n+      public int value = 10000;\n+\n+      public int taxed_value() {\n+        return (int) (this.value - (this.value * 0.4));\n+      }\n+\n+      public boolean in_ca = true;\n+    });\n+    assertEquals(getContents(root, \"simple.txt\"), sw.toString());\n+  }\n+\n+\n   private static class LocalizedMustacheResolver extends DefaultResolver {\n     private final Locale locale;\n \n",
        "sha1": "28d8a4a",
        "sha2": "7d9c237"
    },
    "102": {
        "size": 20,
        "decision": "break",
        "diff": "diff -ru /tmp/v1/compiler/src/main/java/com/github/mustachejava/resolver/ClasspathResolver.java /tmp/v2/compiler/src/main/java/com/github/mustachejava/resolver/ClasspathResolver.java\n--- /tmp/v1/compiler/src/main/java/com/github/mustachejava/resolver/ClasspathResolver.java\t2022-06-06 18:29:05.339426149 +0200\n+++ /tmp/v2/compiler/src/main/java/com/github/mustachejava/resolver/ClasspathResolver.java\t2022-06-06 18:29:05.311425962 +0200\n@@ -6,6 +6,7 @@\n import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.io.Reader;\n+import java.net.URI;\n import java.nio.charset.StandardCharsets;\n \n /**\n@@ -33,11 +34,12 @@\n         ClassLoader ccl = Thread.currentThread().getContextClassLoader();\n \n         String fullResourceName = concatResourceRootAndResourceName(resourceName);\n+        String normalizeResourceName = URI.create(fullResourceName).normalize().getPath();\n \n-        InputStream is = ccl.getResourceAsStream(fullResourceName);\n+        InputStream is = ccl.getResourceAsStream(normalizeResourceName);\n         if (is == null) {\n             ClassLoader classLoader = ClasspathResolver.class.getClassLoader();\n-            is = classLoader.getResourceAsStream(fullResourceName);\n+            is = classLoader.getResourceAsStream(normalizeResourceName);\n         }\n \n         if (is != null) {\ndiff -ru /tmp/v1/compiler/src/test/java/com/github/mustachejava/resolver/ClasspathResolverTest.java /tmp/v2/compiler/src/test/java/com/github/mustachejava/resolver/ClasspathResolverTest.java\n--- /tmp/v1/compiler/src/test/java/com/github/mustachejava/resolver/ClasspathResolverTest.java\t2022-06-06 18:29:05.339426149 +0200\n+++ /tmp/v2/compiler/src/test/java/com/github/mustachejava/resolver/ClasspathResolverTest.java\t2022-06-06 18:29:05.311425962 +0200\n@@ -65,4 +65,17 @@\n         underTest.getReader(null);\n     }\n \n+    @Test\n+    public void getReaderWithRootAndResourceHasDoubleDotRelativePath() throws Exception {\n+        ClasspathResolver underTest = new ClasspathResolver(\"templates\");\n+        Reader reader = underTest.getReader(\"absolute/../absolute_partials_template.html\");\n+        assertThat(reader, is(notNullValue()));\n+    }\n+\n+    @Test\n+    public void getReaderWithRootAndResourceHasDotRelativePath() throws Exception {\n+        ClasspathResolver underTest = new ClasspathResolver(\"templates\");\n+        Reader reader = underTest.getReader(\"absolute/./nested_partials_sub.html\");\n+        assertThat(reader, is(notNullValue()));\n+    }\n }\n\\ No newline at end of file\n",
        "sha1": "710c467",
        "sha2": "774ae7a"
    }
}